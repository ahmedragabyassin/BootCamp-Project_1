
LCD_Driver_4bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004460  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00004460  000044d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000045b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000045e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f7a  00000000  00000000  000046fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e5  00000000  00000000  00006676  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c38  00000000  00000000  00006e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b4  00000000  00000000  00008a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dc  00000000  00000000  00008d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000574  00000000  00000000  00009224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  00009798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 92 20 	call	0x4124	; 0x4124 <main>
      7a:	0c 94 2e 22 	jmp	0x445c	; 0x445c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WritePin>:
 */
#include "DIO_REGISTERS.h"
#include "DIO.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{   
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	00 d0       	rcall	.+0      	; 0x88 <DIO_WritePin+0x6>
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62
      8c:	89 83       	std	Y+1, r24	; 0x01
      8e:	6a 83       	std	Y+2, r22	; 0x02
	  /* PORTA 0~7 */
		if((PinNum>=PIN0)&&(PinNum<=PIN7))
      90:	89 81       	ldd	r24, Y+1	; 0x01
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	68 f5       	brcc	.+90     	; 0xf0 <DIO_WritePin+0x6e>
		{    if(PinValue) { Set_bit(PORTA, PinNum); }
      96:	8a 81       	ldd	r24, Y+2	; 0x02
      98:	88 23       	and	r24, r24
      9a:	a9 f0       	breq	.+42     	; 0xc6 <DIO_WritePin+0x44>
      9c:	8b e3       	ldi	r24, 0x3B	; 59
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	2b e3       	ldi	r18, 0x3B	; 59
      a2:	30 e0       	ldi	r19, 0x00	; 0
      a4:	f9 01       	movw	r30, r18
      a6:	20 81       	ld	r18, Z
      a8:	62 2f       	mov	r22, r18
      aa:	29 81       	ldd	r18, Y+1	; 0x01
      ac:	42 2f       	mov	r20, r18
      ae:	50 e0       	ldi	r21, 0x00	; 0
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	30 e0       	ldi	r19, 0x00	; 0
      b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_WritePin+0x38>
      b6:	22 0f       	add	r18, r18
      b8:	33 1f       	adc	r19, r19
      ba:	4a 95       	dec	r20
      bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_WritePin+0x34>
      be:	26 2b       	or	r18, r22
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <DIO_WritePin+0x1c6>
			 else { Clear_bit(PORTA ,PinNum); }
      c6:	8b e3       	ldi	r24, 0x3B	; 59
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2b e3       	ldi	r18, 0x3B	; 59
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	f9 01       	movw	r30, r18
      d0:	60 81       	ld	r22, Z
      d2:	29 81       	ldd	r18, Y+1	; 0x01
      d4:	42 2f       	mov	r20, r18
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_WritePin+0x60>
      de:	22 0f       	add	r18, r18
      e0:	33 1f       	adc	r19, r19
      e2:	4a 95       	dec	r20
      e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_WritePin+0x5c>
      e6:	20 95       	com	r18
      e8:	26 23       	and	r18, r22
      ea:	fc 01       	movw	r30, r24
      ec:	20 83       	st	Z, r18
      ee:	ac c0       	rjmp	.+344    	; 0x248 <DIO_WritePin+0x1c6>
		}
		
		/* PORTB 8~15 */
		else if((PinNum>=PIN8)&&(PinNum<=PIN15))
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	88 30       	cpi	r24, 0x08	; 8
      f4:	b0 f1       	brcs	.+108    	; 0x162 <DIO_WritePin+0xe0>
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	80 31       	cpi	r24, 0x10	; 16
      fa:	98 f5       	brcc	.+102    	; 0x162 <DIO_WritePin+0xe0>
		{    if(PinValue) { Set_bit(PORTB, (PinNum-PIN8)); }
      fc:	8a 81       	ldd	r24, Y+2	; 0x02
      fe:	88 23       	and	r24, r24
     100:	c1 f0       	breq	.+48     	; 0x132 <DIO_WritePin+0xb0>
     102:	88 e3       	ldi	r24, 0x38	; 56
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	28 e3       	ldi	r18, 0x38	; 56
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	f9 01       	movw	r30, r18
     10c:	20 81       	ld	r18, Z
     10e:	62 2f       	mov	r22, r18
     110:	29 81       	ldd	r18, Y+1	; 0x01
     112:	22 2f       	mov	r18, r18
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	a9 01       	movw	r20, r18
     118:	48 50       	subi	r20, 0x08	; 8
     11a:	51 09       	sbc	r21, r1
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_WritePin+0xa4>
     122:	22 0f       	add	r18, r18
     124:	33 1f       	adc	r19, r19
     126:	4a 95       	dec	r20
     128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_WritePin+0xa0>
     12a:	26 2b       	or	r18, r22
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
     130:	8b c0       	rjmp	.+278    	; 0x248 <DIO_WritePin+0x1c6>
			else { Clear_bit(PORTB ,(PinNum-PIN8)); }
     132:	88 e3       	ldi	r24, 0x38	; 56
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	28 e3       	ldi	r18, 0x38	; 56
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	f9 01       	movw	r30, r18
     13c:	60 81       	ld	r22, Z
     13e:	29 81       	ldd	r18, Y+1	; 0x01
     140:	22 2f       	mov	r18, r18
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	a9 01       	movw	r20, r18
     146:	48 50       	subi	r20, 0x08	; 8
     148:	51 09       	sbc	r21, r1
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_WritePin+0xd2>
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	4a 95       	dec	r20
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_WritePin+0xce>
     158:	20 95       	com	r18
     15a:	26 23       	and	r18, r22
     15c:	fc 01       	movw	r30, r24
     15e:	20 83       	st	Z, r18
			 else { Clear_bit(PORTA ,PinNum); }
		}
		
		/* PORTB 8~15 */
		else if((PinNum>=PIN8)&&(PinNum<=PIN15))
		{    if(PinValue) { Set_bit(PORTB, (PinNum-PIN8)); }
     160:	73 c0       	rjmp	.+230    	; 0x248 <DIO_WritePin+0x1c6>
			else { Clear_bit(PORTB ,(PinNum-PIN8)); }
		}
		/* PORTC 16~23 */
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	80 31       	cpi	r24, 0x10	; 16
     166:	b0 f1       	brcs	.+108    	; 0x1d4 <DIO_WritePin+0x152>
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	88 31       	cpi	r24, 0x18	; 24
     16c:	98 f5       	brcc	.+102    	; 0x1d4 <DIO_WritePin+0x152>
		{    if(PinValue) { Set_bit(PORTC, (PinNum-PIN16)); }
     16e:	8a 81       	ldd	r24, Y+2	; 0x02
     170:	88 23       	and	r24, r24
     172:	c1 f0       	breq	.+48     	; 0x1a4 <DIO_WritePin+0x122>
     174:	85 e3       	ldi	r24, 0x35	; 53
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	25 e3       	ldi	r18, 0x35	; 53
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	20 81       	ld	r18, Z
     180:	62 2f       	mov	r22, r18
     182:	29 81       	ldd	r18, Y+1	; 0x01
     184:	22 2f       	mov	r18, r18
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	a9 01       	movw	r20, r18
     18a:	40 51       	subi	r20, 0x10	; 16
     18c:	51 09       	sbc	r21, r1
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_WritePin+0x116>
     194:	22 0f       	add	r18, r18
     196:	33 1f       	adc	r19, r19
     198:	4a 95       	dec	r20
     19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_WritePin+0x112>
     19c:	26 2b       	or	r18, r22
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
     1a2:	52 c0       	rjmp	.+164    	; 0x248 <DIO_WritePin+0x1c6>
			else { Clear_bit(PORTC ,(PinNum-PIN16)); }
     1a4:	85 e3       	ldi	r24, 0x35	; 53
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	25 e3       	ldi	r18, 0x35	; 53
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	f9 01       	movw	r30, r18
     1ae:	60 81       	ld	r22, Z
     1b0:	29 81       	ldd	r18, Y+1	; 0x01
     1b2:	22 2f       	mov	r18, r18
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	a9 01       	movw	r20, r18
     1b8:	40 51       	subi	r20, 0x10	; 16
     1ba:	51 09       	sbc	r21, r1
     1bc:	21 e0       	ldi	r18, 0x01	; 1
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePin+0x144>
     1c2:	22 0f       	add	r18, r18
     1c4:	33 1f       	adc	r19, r19
     1c6:	4a 95       	dec	r20
     1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePin+0x140>
     1ca:	20 95       	com	r18
     1cc:	26 23       	and	r18, r22
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
		{    if(PinValue) { Set_bit(PORTB, (PinNum-PIN8)); }
			else { Clear_bit(PORTB ,(PinNum-PIN8)); }
		}
		/* PORTC 16~23 */
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
		{    if(PinValue) { Set_bit(PORTC, (PinNum-PIN16)); }
     1d2:	3a c0       	rjmp	.+116    	; 0x248 <DIO_WritePin+0x1c6>
			else { Clear_bit(PORTC ,(PinNum-PIN16)); }
		}
		/* PORTD PIN24~31 */
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	88 31       	cpi	r24, 0x18	; 24
     1d8:	b0 f1       	brcs	.+108    	; 0x246 <DIO_WritePin+0x1c4>
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	80 32       	cpi	r24, 0x20	; 32
     1de:	98 f5       	brcc	.+102    	; 0x246 <DIO_WritePin+0x1c4>
		{    if(PinValue) { Set_bit(PORTD, (PinNum-PIN24)); }
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	88 23       	and	r24, r24
     1e4:	c1 f0       	breq	.+48     	; 0x216 <DIO_WritePin+0x194>
     1e6:	82 e3       	ldi	r24, 0x32	; 50
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	22 e3       	ldi	r18, 0x32	; 50
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	f9 01       	movw	r30, r18
     1f0:	20 81       	ld	r18, Z
     1f2:	62 2f       	mov	r22, r18
     1f4:	29 81       	ldd	r18, Y+1	; 0x01
     1f6:	22 2f       	mov	r18, r18
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	a9 01       	movw	r20, r18
     1fc:	48 51       	subi	r20, 0x18	; 24
     1fe:	51 09       	sbc	r21, r1
     200:	21 e0       	ldi	r18, 0x01	; 1
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_WritePin+0x188>
     206:	22 0f       	add	r18, r18
     208:	33 1f       	adc	r19, r19
     20a:	4a 95       	dec	r20
     20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_WritePin+0x184>
     20e:	26 2b       	or	r18, r22
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18
     214:	19 c0       	rjmp	.+50     	; 0x248 <DIO_WritePin+0x1c6>
			else { Clear_bit(PORTD ,(PinNum-PIN24)); }
     216:	82 e3       	ldi	r24, 0x32	; 50
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	22 e3       	ldi	r18, 0x32	; 50
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	60 81       	ld	r22, Z
     222:	29 81       	ldd	r18, Y+1	; 0x01
     224:	22 2f       	mov	r18, r18
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	a9 01       	movw	r20, r18
     22a:	48 51       	subi	r20, 0x18	; 24
     22c:	51 09       	sbc	r21, r1
     22e:	21 e0       	ldi	r18, 0x01	; 1
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_WritePin+0x1b6>
     234:	22 0f       	add	r18, r18
     236:	33 1f       	adc	r19, r19
     238:	4a 95       	dec	r20
     23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_WritePin+0x1b2>
     23c:	20 95       	com	r18
     23e:	26 23       	and	r18, r22
     240:	fc 01       	movw	r30, r24
     242:	20 83       	st	Z, r18
		{    if(PinValue) { Set_bit(PORTC, (PinNum-PIN16)); }
			else { Clear_bit(PORTC ,(PinNum-PIN16)); }
		}
		/* PORTD PIN24~31 */
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
		{    if(PinValue) { Set_bit(PORTD, (PinNum-PIN24)); }
     244:	01 c0       	rjmp	.+2      	; 0x248 <DIO_WritePin+0x1c6>
			else { Clear_bit(PORTD ,(PinNum-PIN24)); }
	    }
	   else {return LOW; }
     246:	00 00       	nop
}
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <DIO_ReadPin>:

uint8 DIO_ReadPin(uint8 PinNum)
{
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	1f 92       	push	r1
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
     25c:	89 83       	std	Y+1, r24	; 0x01
	if((PinNum>=PIN0)&&(PinNum<=PIN7))   /* PORTA 0~7 */
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	88 30       	cpi	r24, 0x08	; 8
     262:	c8 f4       	brcc	.+50     	; 0x296 <DIO_ReadPin+0x44>
	{
		return (Get_bit(PINA,PinNum));
     264:	89 e3       	ldi	r24, 0x39	; 57
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	fc 01       	movw	r30, r24
     26a:	80 81       	ld	r24, Z
     26c:	28 2f       	mov	r18, r24
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	48 2f       	mov	r20, r24
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_ReadPin+0x2e>
     27c:	88 0f       	add	r24, r24
     27e:	99 1f       	adc	r25, r25
     280:	4a 95       	dec	r20
     282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_ReadPin+0x2a>
     284:	99 27       	eor	r25, r25
     286:	82 23       	and	r24, r18
     288:	93 23       	and	r25, r19
     28a:	21 e0       	ldi	r18, 0x01	; 1
     28c:	89 2b       	or	r24, r25
     28e:	09 f4       	brne	.+2      	; 0x292 <DIO_ReadPin+0x40>
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	82 2f       	mov	r24, r18
     294:	67 c0       	rjmp	.+206    	; 0x364 <DIO_ReadPin+0x112>
	}
	else if((PinNum>=PIN8)&&(PinNum<=PIN15)) /* PORTB 8~15 */
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 30       	cpi	r24, 0x08	; 8
     29a:	f8 f0       	brcs	.+62     	; 0x2da <DIO_ReadPin+0x88>
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	80 31       	cpi	r24, 0x10	; 16
     2a0:	e0 f4       	brcc	.+56     	; 0x2da <DIO_ReadPin+0x88>
	{
		return (Get_bit(PINB,(PinNum-PIN8)));
     2a2:	86 e3       	ldi	r24, 0x36	; 54
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	fc 01       	movw	r30, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	28 2f       	mov	r18, r24
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	88 2f       	mov	r24, r24
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	ac 01       	movw	r20, r24
     2b6:	48 50       	subi	r20, 0x08	; 8
     2b8:	51 09       	sbc	r21, r1
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_ReadPin+0x72>
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	4a 95       	dec	r20
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_ReadPin+0x6e>
     2c8:	99 27       	eor	r25, r25
     2ca:	82 23       	and	r24, r18
     2cc:	93 23       	and	r25, r19
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	89 2b       	or	r24, r25
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <DIO_ReadPin+0x84>
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	82 2f       	mov	r24, r18
     2d8:	45 c0       	rjmp	.+138    	; 0x364 <DIO_ReadPin+0x112>
	}
	else if((PinNum>=PIN16)&&(PinNum<=PIN23)) /* PORTC 16~23 */
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	80 31       	cpi	r24, 0x10	; 16
     2de:	f8 f0       	brcs	.+62     	; 0x31e <DIO_ReadPin+0xcc>
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	88 31       	cpi	r24, 0x18	; 24
     2e4:	e0 f4       	brcc	.+56     	; 0x31e <DIO_ReadPin+0xcc>
	{ 
		return (Get_bit(PINC,(PinNum-PIN16)));
     2e6:	83 e3       	ldi	r24, 0x33	; 51
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	fc 01       	movw	r30, r24
     2ec:	80 81       	ld	r24, Z
     2ee:	28 2f       	mov	r18, r24
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	88 2f       	mov	r24, r24
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	ac 01       	movw	r20, r24
     2fa:	40 51       	subi	r20, 0x10	; 16
     2fc:	51 09       	sbc	r21, r1
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_ReadPin+0xb6>
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	4a 95       	dec	r20
     30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_ReadPin+0xb2>
     30c:	99 27       	eor	r25, r25
     30e:	82 23       	and	r24, r18
     310:	93 23       	and	r25, r19
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	89 2b       	or	r24, r25
     316:	09 f4       	brne	.+2      	; 0x31a <DIO_ReadPin+0xc8>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	82 2f       	mov	r24, r18
     31c:	23 c0       	rjmp	.+70     	; 0x364 <DIO_ReadPin+0x112>
	}

	else if((PinNum>=PIN16)&&(PinNum<=PIN23)) /* PORTD 24~31 */
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	80 31       	cpi	r24, 0x10	; 16
     322:	f8 f0       	brcs	.+62     	; 0x362 <DIO_ReadPin+0x110>
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	88 31       	cpi	r24, 0x18	; 24
     328:	e0 f4       	brcc	.+56     	; 0x362 <DIO_ReadPin+0x110>
	{
		return (Get_bit(PIND,(PinNum-PIN24)));
     32a:	80 e3       	ldi	r24, 0x30	; 48
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	28 2f       	mov	r18, r24
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	ac 01       	movw	r20, r24
     33e:	48 51       	subi	r20, 0x18	; 24
     340:	51 09       	sbc	r21, r1
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_ReadPin+0xfa>
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	4a 95       	dec	r20
     34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_ReadPin+0xf6>
     350:	99 27       	eor	r25, r25
     352:	82 23       	and	r24, r18
     354:	93 23       	and	r25, r19
     356:	21 e0       	ldi	r18, 0x01	; 1
     358:	89 2b       	or	r24, r25
     35a:	09 f4       	brne	.+2      	; 0x35e <DIO_ReadPin+0x10c>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	82 2f       	mov	r24, r18
     360:	01 c0       	rjmp	.+2      	; 0x364 <DIO_ReadPin+0x112>
	}
	else {return LOW;}
     362:	80 e0       	ldi	r24, 0x00	; 0
}
     364:	0f 90       	pop	r0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <DIO_SetPinDirection>:

 void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
 {    /* PORTA PIN0~PIN7 */
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	00 d0       	rcall	.+0      	; 0x372 <DIO_SetPinDirection+0x6>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	89 83       	std	Y+1, r24	; 0x01
     378:	6a 83       	std	Y+2, r22	; 0x02
     	if((PinNum>=PIN0)&&(PinNum<=PIN7))
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	88 30       	cpi	r24, 0x08	; 8
     37e:	68 f5       	brcc	.+90     	; 0x3da <DIO_SetPinDirection+0x6e>
     	{    if(PinDirection) { Set_bit(DDRA, PinNum); }
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	88 23       	and	r24, r24
     384:	a9 f0       	breq	.+42     	; 0x3b0 <DIO_SetPinDirection+0x44>
     386:	8a e3       	ldi	r24, 0x3A	; 58
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	2a e3       	ldi	r18, 0x3A	; 58
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	62 2f       	mov	r22, r18
     394:	29 81       	ldd	r18, Y+1	; 0x01
     396:	42 2f       	mov	r20, r18
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPinDirection+0x38>
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	4a 95       	dec	r20
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPinDirection+0x34>
     3a8:	26 2b       	or	r18, r22
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
		{      if(PinDirection) { Set_bit(DDRD, (PinNum-PIN24)); }
            else { Clear_bit(DDRD ,(PinNum-PIN24)); }
		}
		else { }
	
 }
     3ae:	c0 c0       	rjmp	.+384    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>

 void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
 {    /* PORTA PIN0~PIN7 */
     	if((PinNum>=PIN0)&&(PinNum<=PIN7))
     	{    if(PinDirection) { Set_bit(DDRA, PinNum); }
     		else { Clear_bit(DDRA ,PinNum); }
     3b0:	8a e3       	ldi	r24, 0x3A	; 58
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	2a e3       	ldi	r18, 0x3A	; 58
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	f9 01       	movw	r30, r18
     3ba:	60 81       	ld	r22, Z
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	42 2f       	mov	r20, r18
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPinDirection+0x60>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	4a 95       	dec	r20
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPinDirection+0x5c>
     3d0:	20 95       	com	r18
     3d2:	26 23       	and	r18, r22
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
		{      if(PinDirection) { Set_bit(DDRD, (PinNum-PIN24)); }
            else { Clear_bit(DDRD ,(PinNum-PIN24)); }
		}
		else { }
	
 }
     3d8:	ab c0       	rjmp	.+342    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     	{    if(PinDirection) { Set_bit(DDRA, PinNum); }
     		else { Clear_bit(DDRA ,PinNum); }
     	}
     	
     	/* PORTB 8~15 */
     	else if((PinNum>=PIN8)&&(PinNum<=PIN15))
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	88 30       	cpi	r24, 0x08	; 8
     3de:	b0 f1       	brcs	.+108    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	80 31       	cpi	r24, 0x10	; 16
     3e4:	98 f5       	brcc	.+102    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     	{    if(PinDirection) { Set_bit(DDRB, (PinNum-PIN8)); }
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	88 23       	and	r24, r24
     3ea:	c1 f0       	breq	.+48     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3ec:	87 e3       	ldi	r24, 0x37	; 55
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	27 e3       	ldi	r18, 0x37	; 55
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	f9 01       	movw	r30, r18
     3f6:	20 81       	ld	r18, Z
     3f8:	62 2f       	mov	r22, r18
     3fa:	29 81       	ldd	r18, Y+1	; 0x01
     3fc:	22 2f       	mov	r18, r18
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	a9 01       	movw	r20, r18
     402:	48 50       	subi	r20, 0x08	; 8
     404:	51 09       	sbc	r21, r1
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	4a 95       	dec	r20
     412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	26 2b       	or	r18, r22
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
     41a:	8a c0       	rjmp	.+276    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     	     else { Clear_bit(DDRB ,(PinNum-PIN8)); }
     41c:	87 e3       	ldi	r24, 0x37	; 55
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	27 e3       	ldi	r18, 0x37	; 55
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	60 81       	ld	r22, Z
     428:	29 81       	ldd	r18, Y+1	; 0x01
     42a:	22 2f       	mov	r18, r18
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	a9 01       	movw	r20, r18
     430:	48 50       	subi	r20, 0x08	; 8
     432:	51 09       	sbc	r21, r1
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	22 0f       	add	r18, r18
     43c:	33 1f       	adc	r19, r19
     43e:	4a 95       	dec	r20
     440:	e2 f7       	brpl	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     442:	20 95       	com	r18
     444:	26 23       	and	r18, r22
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
     		else { Clear_bit(DDRA ,PinNum); }
     	}
     	
     	/* PORTB 8~15 */
     	else if((PinNum>=PIN8)&&(PinNum<=PIN15))
     	{    if(PinDirection) { Set_bit(DDRB, (PinNum-PIN8)); }
     44a:	72 c0       	rjmp	.+228    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     	     else { Clear_bit(DDRB ,(PinNum-PIN8)); }
        }
     /* PORTC 16~23 */
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	80 31       	cpi	r24, 0x10	; 16
     450:	b0 f1       	brcs	.+108    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	88 31       	cpi	r24, 0x18	; 24
     456:	98 f5       	brcc	.+102    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{    if(PinDirection) { Set_bit(DDRC, (PinNum-PIN16)); }
     458:	8a 81       	ldd	r24, Y+2	; 0x02
     45a:	88 23       	and	r24, r24
     45c:	c1 f0       	breq	.+48     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     45e:	84 e3       	ldi	r24, 0x34	; 52
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	24 e3       	ldi	r18, 0x34	; 52
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	f9 01       	movw	r30, r18
     468:	20 81       	ld	r18, Z
     46a:	62 2f       	mov	r22, r18
     46c:	29 81       	ldd	r18, Y+1	; 0x01
     46e:	22 2f       	mov	r18, r18
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	a9 01       	movw	r20, r18
     474:	40 51       	subi	r20, 0x10	; 16
     476:	51 09       	sbc	r21, r1
     478:	21 e0       	ldi	r18, 0x01	; 1
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	4a 95       	dec	r20
     484:	e2 f7       	brpl	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     486:	26 2b       	or	r18, r22
     488:	fc 01       	movw	r30, r24
     48a:	20 83       	st	Z, r18
     48c:	51 c0       	rjmp	.+162    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		     else { Clear_bit(DDRC ,(PinNum-PIN16)); }
     48e:	84 e3       	ldi	r24, 0x34	; 52
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	24 e3       	ldi	r18, 0x34	; 52
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	f9 01       	movw	r30, r18
     498:	60 81       	ld	r22, Z
     49a:	29 81       	ldd	r18, Y+1	; 0x01
     49c:	22 2f       	mov	r18, r18
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	a9 01       	movw	r20, r18
     4a2:	40 51       	subi	r20, 0x10	; 16
     4a4:	51 09       	sbc	r21, r1
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	4a 95       	dec	r20
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4b4:	20 95       	com	r18
     4b6:	26 23       	and	r18, r22
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 83       	st	Z, r18
     	{    if(PinDirection) { Set_bit(DDRB, (PinNum-PIN8)); }
     	     else { Clear_bit(DDRB ,(PinNum-PIN8)); }
        }
     /* PORTC 16~23 */
		else if((PinNum>=PIN16)&&(PinNum<=PIN23))
		{    if(PinDirection) { Set_bit(DDRC, (PinNum-PIN16)); }
     4bc:	39 c0       	rjmp	.+114    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		     else { Clear_bit(DDRC ,(PinNum-PIN16)); }
		}
      /* PORTD PIN24~31 */
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	88 31       	cpi	r24, 0x18	; 24
     4c2:	b0 f1       	brcs	.+108    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	80 32       	cpi	r24, 0x20	; 32
     4c8:	98 f5       	brcc	.+102    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		{      if(PinDirection) { Set_bit(DDRD, (PinNum-PIN24)); }
     4ca:	8a 81       	ldd	r24, Y+2	; 0x02
     4cc:	88 23       	and	r24, r24
     4ce:	c1 f0       	breq	.+48     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4d0:	81 e3       	ldi	r24, 0x31	; 49
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	21 e3       	ldi	r18, 0x31	; 49
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	62 2f       	mov	r22, r18
     4de:	29 81       	ldd	r18, Y+1	; 0x01
     4e0:	22 2f       	mov	r18, r18
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	a9 01       	movw	r20, r18
     4e6:	48 51       	subi	r20, 0x18	; 24
     4e8:	51 09       	sbc	r21, r1
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	4a 95       	dec	r20
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f8:	26 2b       	or	r18, r22
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
            else { Clear_bit(DDRD ,(PinNum-PIN24)); }
		}
		else { }
	
 }
     4fe:	18 c0       	rjmp	.+48     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		     else { Clear_bit(DDRC ,(PinNum-PIN16)); }
		}
      /* PORTD PIN24~31 */
		else if((PinNum>=PIN24)&&(PinNum<=PIN31))
		{      if(PinDirection) { Set_bit(DDRD, (PinNum-PIN24)); }
            else { Clear_bit(DDRD ,(PinNum-PIN24)); }
     500:	81 e3       	ldi	r24, 0x31	; 49
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	21 e3       	ldi	r18, 0x31	; 49
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	f9 01       	movw	r30, r18
     50a:	60 81       	ld	r22, Z
     50c:	29 81       	ldd	r18, Y+1	; 0x01
     50e:	22 2f       	mov	r18, r18
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	a9 01       	movw	r20, r18
     514:	48 51       	subi	r20, 0x18	; 24
     516:	51 09       	sbc	r21, r1
     518:	21 e0       	ldi	r18, 0x01	; 1
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     51e:	22 0f       	add	r18, r18
     520:	33 1f       	adc	r19, r19
     522:	4a 95       	dec	r20
     524:	e2 f7       	brpl	.-8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     526:	20 95       	com	r18
     528:	26 23       	and	r18, r22
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
		}
		else { }
	
 }
     52e:	00 c0       	rjmp	.+0      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     530:	00 00       	nop
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <LCD_init>:
		   	/* Enable falling edge to latch information */
		   	Set_bit(LCD_PRT,LCD_E);
		   	_delay_ms(TWO_MS);
		   	Clear_bit(LCD_PRT,LCD_E);
		   	Delay(TWO_MS);
} 
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	6c 97       	sbiw	r28, 0x1c	; 28
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinDirection>
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinDirection>
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinDirection>
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	84 e0       	ldi	r24, 0x04	; 4
     56c:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinDirection>
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	85 e0       	ldi	r24, 0x05	; 5
     574:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinDirection>
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	86 e0       	ldi	r24, 0x06	; 6
     57c:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinDirection>
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinDirection>
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     590:	8b e3       	ldi	r24, 0x3B	; 59
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	2b e3       	ldi	r18, 0x3B	; 59
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	27 7f       	andi	r18, 0xF7	; 247
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	a0 e0       	ldi	r26, 0x00	; 0
     5a8:	b0 e4       	ldi	r27, 0x40	; 64
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	ab 83       	std	Y+3, r26	; 0x03
     5b0:	bc 83       	std	Y+4, r27	; 0x04
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	4a e7       	ldi	r20, 0x7A	; 122
     5b8:	55 e4       	ldi	r21, 0x45	; 69
     5ba:	69 81       	ldd	r22, Y+1	; 0x01
     5bc:	7a 81       	ldd	r23, Y+2	; 0x02
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	9c 81       	ldd	r25, Y+4	; 0x04
     5c2:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	8b 8b       	std	Y+19, r24	; 0x13
     5cc:	9c 8b       	std	Y+20, r25	; 0x14
     5ce:	ad 8b       	std	Y+21, r26	; 0x15
     5d0:	be 8b       	std	Y+22, r27	; 0x16
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e8       	ldi	r20, 0x80	; 128
     5d8:	5f e3       	ldi	r21, 0x3F	; 63
     5da:	6b 89       	ldd	r22, Y+19	; 0x13
     5dc:	7c 89       	ldd	r23, Y+20	; 0x14
     5de:	8d 89       	ldd	r24, Y+21	; 0x15
     5e0:	9e 89       	ldd	r25, Y+22	; 0x16
     5e2:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
     5e6:	88 23       	and	r24, r24
     5e8:	2c f4       	brge	.+10     	; 0x5f4 <LCD_init+0xb8>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	98 8f       	std	Y+24, r25	; 0x18
     5f0:	8f 8b       	std	Y+23, r24	; 0x17
     5f2:	3f c0       	rjmp	.+126    	; 0x672 <LCD_init+0x136>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	3f ef       	ldi	r19, 0xFF	; 255
     5f8:	4f e7       	ldi	r20, 0x7F	; 127
     5fa:	57 e4       	ldi	r21, 0x47	; 71
     5fc:	6b 89       	ldd	r22, Y+19	; 0x13
     5fe:	7c 89       	ldd	r23, Y+20	; 0x14
     600:	8d 89       	ldd	r24, Y+21	; 0x15
     602:	9e 89       	ldd	r25, Y+22	; 0x16
     604:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
     608:	18 16       	cp	r1, r24
     60a:	4c f5       	brge	.+82     	; 0x65e <LCD_init+0x122>
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e2       	ldi	r20, 0x20	; 32
     612:	51 e4       	ldi	r21, 0x41	; 65
     614:	69 81       	ldd	r22, Y+1	; 0x01
     616:	7a 81       	ldd	r23, Y+2	; 0x02
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	9c 81       	ldd	r25, Y+4	; 0x04
     61c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	bc 01       	movw	r22, r24
     626:	cd 01       	movw	r24, r26
     628:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	98 8f       	std	Y+24, r25	; 0x18
     632:	8f 8b       	std	Y+23, r24	; 0x17
     634:	0f c0       	rjmp	.+30     	; 0x654 <LCD_init+0x118>
     636:	80 e9       	ldi	r24, 0x90	; 144
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	9a 8f       	std	Y+26, r25	; 0x1a
     63c:	89 8f       	std	Y+25, r24	; 0x19
     63e:	89 8d       	ldd	r24, Y+25	; 0x19
     640:	9a 8d       	ldd	r25, Y+26	; 0x1a
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <LCD_init+0x106>
     646:	9a 8f       	std	Y+26, r25	; 0x1a
     648:	89 8f       	std	Y+25, r24	; 0x19
     64a:	8f 89       	ldd	r24, Y+23	; 0x17
     64c:	98 8d       	ldd	r25, Y+24	; 0x18
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	98 8f       	std	Y+24, r25	; 0x18
     652:	8f 8b       	std	Y+23, r24	; 0x17
     654:	8f 89       	ldd	r24, Y+23	; 0x17
     656:	98 8d       	ldd	r25, Y+24	; 0x18
     658:	89 2b       	or	r24, r25
     65a:	69 f7       	brne	.-38     	; 0x636 <LCD_init+0xfa>
     65c:	14 c0       	rjmp	.+40     	; 0x686 <LCD_init+0x14a>
     65e:	6b 89       	ldd	r22, Y+19	; 0x13
     660:	7c 89       	ldd	r23, Y+20	; 0x14
     662:	8d 89       	ldd	r24, Y+21	; 0x15
     664:	9e 89       	ldd	r25, Y+22	; 0x16
     666:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	98 8f       	std	Y+24, r25	; 0x18
     670:	8f 8b       	std	Y+23, r24	; 0x17
     672:	8f 89       	ldd	r24, Y+23	; 0x17
     674:	98 8d       	ldd	r25, Y+24	; 0x18
     676:	9c 8f       	std	Y+28, r25	; 0x1c
     678:	8b 8f       	std	Y+27, r24	; 0x1b
     67a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     67c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <LCD_init+0x142>
     682:	9c 8f       	std	Y+28, r25	; 0x1c
     684:	8b 8f       	std	Y+27, r24	; 0x1b
     686:	83 e3       	ldi	r24, 0x33	; 51
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
     68e:	82 e3       	ldi	r24, 0x32	; 50
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
     696:	88 e2       	ldi	r24, 0x28	; 40
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
     69e:	8e e0       	ldi	r24, 0x0E	; 14
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
     6ae:	86 e0       	ldi	r24, 0x06	; 6
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	a0 e0       	ldi	r26, 0x00	; 0
     6bc:	b0 e4       	ldi	r27, 0x40	; 64
     6be:	8d 83       	std	Y+5, r24	; 0x05
     6c0:	9e 83       	std	Y+6, r25	; 0x06
     6c2:	af 83       	std	Y+7, r26	; 0x07
     6c4:	b8 87       	std	Y+8, r27	; 0x08
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	4a e7       	ldi	r20, 0x7A	; 122
     6cc:	55 e4       	ldi	r21, 0x45	; 69
     6ce:	6d 81       	ldd	r22, Y+5	; 0x05
     6d0:	7e 81       	ldd	r23, Y+6	; 0x06
     6d2:	8f 81       	ldd	r24, Y+7	; 0x07
     6d4:	98 85       	ldd	r25, Y+8	; 0x08
     6d6:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	89 87       	std	Y+9, r24	; 0x09
     6e0:	9a 87       	std	Y+10, r25	; 0x0a
     6e2:	ab 87       	std	Y+11, r26	; 0x0b
     6e4:	bc 87       	std	Y+12, r27	; 0x0c
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	5f e3       	ldi	r21, 0x3F	; 63
     6ee:	69 85       	ldd	r22, Y+9	; 0x09
     6f0:	7a 85       	ldd	r23, Y+10	; 0x0a
     6f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f6:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
     6fa:	88 23       	and	r24, r24
     6fc:	2c f4       	brge	.+10     	; 0x708 <LCD_init+0x1cc>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	9e 87       	std	Y+14, r25	; 0x0e
     704:	8d 87       	std	Y+13, r24	; 0x0d
     706:	3f c0       	rjmp	.+126    	; 0x786 <LCD_init+0x24a>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	3f ef       	ldi	r19, 0xFF	; 255
     70c:	4f e7       	ldi	r20, 0x7F	; 127
     70e:	57 e4       	ldi	r21, 0x47	; 71
     710:	69 85       	ldd	r22, Y+9	; 0x09
     712:	7a 85       	ldd	r23, Y+10	; 0x0a
     714:	8b 85       	ldd	r24, Y+11	; 0x0b
     716:	9c 85       	ldd	r25, Y+12	; 0x0c
     718:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
     71c:	18 16       	cp	r1, r24
     71e:	4c f5       	brge	.+82     	; 0x772 <LCD_init+0x236>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e2       	ldi	r20, 0x20	; 32
     726:	51 e4       	ldi	r21, 0x41	; 65
     728:	6d 81       	ldd	r22, Y+5	; 0x05
     72a:	7e 81       	ldd	r23, Y+6	; 0x06
     72c:	8f 81       	ldd	r24, Y+7	; 0x07
     72e:	98 85       	ldd	r25, Y+8	; 0x08
     730:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	bc 01       	movw	r22, r24
     73a:	cd 01       	movw	r24, r26
     73c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	9e 87       	std	Y+14, r25	; 0x0e
     746:	8d 87       	std	Y+13, r24	; 0x0d
     748:	0f c0       	rjmp	.+30     	; 0x768 <LCD_init+0x22c>
     74a:	80 e9       	ldi	r24, 0x90	; 144
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	98 8b       	std	Y+16, r25	; 0x10
     750:	8f 87       	std	Y+15, r24	; 0x0f
     752:	8f 85       	ldd	r24, Y+15	; 0x0f
     754:	98 89       	ldd	r25, Y+16	; 0x10
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <LCD_init+0x21a>
     75a:	98 8b       	std	Y+16, r25	; 0x10
     75c:	8f 87       	std	Y+15, r24	; 0x0f
     75e:	8d 85       	ldd	r24, Y+13	; 0x0d
     760:	9e 85       	ldd	r25, Y+14	; 0x0e
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	9e 87       	std	Y+14, r25	; 0x0e
     766:	8d 87       	std	Y+13, r24	; 0x0d
     768:	8d 85       	ldd	r24, Y+13	; 0x0d
     76a:	9e 85       	ldd	r25, Y+14	; 0x0e
     76c:	89 2b       	or	r24, r25
     76e:	69 f7       	brne	.-38     	; 0x74a <LCD_init+0x20e>
     770:	14 c0       	rjmp	.+40     	; 0x79a <LCD_init+0x25e>
     772:	69 85       	ldd	r22, Y+9	; 0x09
     774:	7a 85       	ldd	r23, Y+10	; 0x0a
     776:	8b 85       	ldd	r24, Y+11	; 0x0b
     778:	9c 85       	ldd	r25, Y+12	; 0x0c
     77a:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	9e 87       	std	Y+14, r25	; 0x0e
     784:	8d 87       	std	Y+13, r24	; 0x0d
     786:	8d 85       	ldd	r24, Y+13	; 0x0d
     788:	9e 85       	ldd	r25, Y+14	; 0x0e
     78a:	9a 8b       	std	Y+18, r25	; 0x12
     78c:	89 8b       	std	Y+17, r24	; 0x11
     78e:	89 89       	ldd	r24, Y+17	; 0x11
     790:	9a 89       	ldd	r25, Y+18	; 0x12
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <LCD_init+0x256>
     796:	9a 8b       	std	Y+18, r25	; 0x12
     798:	89 8b       	std	Y+17, r24	; 0x11
     79a:	00 00       	nop
     79c:	6c 96       	adiw	r28, 0x1c	; 28
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <LCD_sendCommand>:
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	c7 54       	subi	r28, 0x47	; 71
     7bc:	d1 09       	sbc	r29, r1
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	9e 01       	movw	r18, r28
     7ca:	29 5b       	subi	r18, 0xB9	; 185
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
     7ce:	f9 01       	movw	r30, r18
     7d0:	80 83       	st	Z, r24
     7d2:	ce 01       	movw	r24, r28
     7d4:	89 5b       	subi	r24, 0xB9	; 185
     7d6:	9f 4f       	sbci	r25, 0xFF	; 255
     7d8:	fc 01       	movw	r30, r24
     7da:	80 81       	ld	r24, Z
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	80 71       	andi	r24, 0x10	; 16
     7e2:	99 27       	eor	r25, r25
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	89 2b       	or	r24, r25
     7e8:	09 f4       	brne	.+2      	; 0x7ec <LCD_sendCommand+0x3e>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	82 2f       	mov	r24, r18
     7ee:	68 2f       	mov	r22, r24
     7f0:	84 e0       	ldi	r24, 0x04	; 4
     7f2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     7f6:	ce 01       	movw	r24, r28
     7f8:	89 5b       	subi	r24, 0xB9	; 185
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	fc 01       	movw	r30, r24
     7fe:	80 81       	ld	r24, Z
     800:	88 2f       	mov	r24, r24
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	80 72       	andi	r24, 0x20	; 32
     806:	99 27       	eor	r25, r25
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	89 2b       	or	r24, r25
     80c:	09 f4       	brne	.+2      	; 0x810 <LCD_sendCommand+0x62>
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	82 2f       	mov	r24, r18
     812:	68 2f       	mov	r22, r24
     814:	85 e0       	ldi	r24, 0x05	; 5
     816:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     81a:	ce 01       	movw	r24, r28
     81c:	89 5b       	subi	r24, 0xB9	; 185
     81e:	9f 4f       	sbci	r25, 0xFF	; 255
     820:	fc 01       	movw	r30, r24
     822:	80 81       	ld	r24, Z
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	80 74       	andi	r24, 0x40	; 64
     82a:	99 27       	eor	r25, r25
     82c:	21 e0       	ldi	r18, 0x01	; 1
     82e:	89 2b       	or	r24, r25
     830:	09 f4       	brne	.+2      	; 0x834 <LCD_sendCommand+0x86>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	82 2f       	mov	r24, r18
     836:	68 2f       	mov	r22, r24
     838:	86 e0       	ldi	r24, 0x06	; 6
     83a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     83e:	ce 01       	movw	r24, r28
     840:	89 5b       	subi	r24, 0xB9	; 185
     842:	9f 4f       	sbci	r25, 0xFF	; 255
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	88 1f       	adc	r24, r24
     84a:	88 27       	eor	r24, r24
     84c:	88 1f       	adc	r24, r24
     84e:	68 2f       	mov	r22, r24
     850:	87 e0       	ldi	r24, 0x07	; 7
     852:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	a0 e0       	ldi	r26, 0x00	; 0
     85c:	b0 e4       	ldi	r27, 0x40	; 64
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	9a 83       	std	Y+2, r25	; 0x02
     862:	ab 83       	std	Y+3, r26	; 0x03
     864:	bc 83       	std	Y+4, r27	; 0x04
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	4a e7       	ldi	r20, 0x7A	; 122
     86c:	55 e4       	ldi	r21, 0x45	; 69
     86e:	69 81       	ldd	r22, Y+1	; 0x01
     870:	7a 81       	ldd	r23, Y+2	; 0x02
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	9c 81       	ldd	r25, Y+4	; 0x04
     876:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	9e 01       	movw	r18, r28
     880:	23 5c       	subi	r18, 0xC3	; 195
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	f9 01       	movw	r30, r18
     886:	80 83       	st	Z, r24
     888:	91 83       	std	Z+1, r25	; 0x01
     88a:	a2 83       	std	Z+2, r26	; 0x02
     88c:	b3 83       	std	Z+3, r27	; 0x03
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e8       	ldi	r20, 0x80	; 128
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	ce 01       	movw	r24, r28
     898:	cd 96       	adiw	r24, 0x3d	; 61
     89a:	fc 01       	movw	r30, r24
     89c:	60 81       	ld	r22, Z
     89e:	71 81       	ldd	r23, Z+1	; 0x01
     8a0:	82 81       	ldd	r24, Z+2	; 0x02
     8a2:	93 81       	ldd	r25, Z+3	; 0x03
     8a4:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
     8a8:	88 23       	and	r24, r24
     8aa:	4c f4       	brge	.+18     	; 0x8be <__stack+0x5f>
     8ac:	ce 01       	movw	r24, r28
     8ae:	8f 5b       	subi	r24, 0xBF	; 191
     8b0:	9f 4f       	sbci	r25, 0xFF	; 255
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	fc 01       	movw	r30, r24
     8b8:	31 83       	std	Z+1, r19	; 0x01
     8ba:	20 83       	st	Z, r18
     8bc:	67 c0       	rjmp	.+206    	; 0x98c <__stack+0x12d>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	3f ef       	ldi	r19, 0xFF	; 255
     8c2:	4f e7       	ldi	r20, 0x7F	; 127
     8c4:	57 e4       	ldi	r21, 0x47	; 71
     8c6:	ce 01       	movw	r24, r28
     8c8:	cd 96       	adiw	r24, 0x3d	; 61
     8ca:	fc 01       	movw	r30, r24
     8cc:	60 81       	ld	r22, Z
     8ce:	71 81       	ldd	r23, Z+1	; 0x01
     8d0:	82 81       	ldd	r24, Z+2	; 0x02
     8d2:	93 81       	ldd	r25, Z+3	; 0x03
     8d4:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
     8d8:	18 16       	cp	r1, r24
     8da:	0c f0       	brlt	.+2      	; 0x8de <__stack+0x7f>
     8dc:	46 c0       	rjmp	.+140    	; 0x96a <__stack+0x10b>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e2       	ldi	r20, 0x20	; 32
     8e4:	51 e4       	ldi	r21, 0x41	; 65
     8e6:	69 81       	ldd	r22, Y+1	; 0x01
     8e8:	7a 81       	ldd	r23, Y+2	; 0x02
     8ea:	8b 81       	ldd	r24, Y+3	; 0x03
     8ec:	9c 81       	ldd	r25, Y+4	; 0x04
     8ee:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     8f2:	dc 01       	movw	r26, r24
     8f4:	cb 01       	movw	r24, r22
     8f6:	8e 01       	movw	r16, r28
     8f8:	0f 5b       	subi	r16, 0xBF	; 191
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	bc 01       	movw	r22, r24
     8fe:	cd 01       	movw	r24, r26
     900:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	f8 01       	movw	r30, r16
     90a:	91 83       	std	Z+1, r25	; 0x01
     90c:	80 83       	st	Z, r24
     90e:	24 c0       	rjmp	.+72     	; 0x958 <__stack+0xf9>
     910:	ce 01       	movw	r24, r28
     912:	8d 5b       	subi	r24, 0xBD	; 189
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	20 e9       	ldi	r18, 0x90	; 144
     918:	31 e0       	ldi	r19, 0x01	; 1
     91a:	fc 01       	movw	r30, r24
     91c:	31 83       	std	Z+1, r19	; 0x01
     91e:	20 83       	st	Z, r18
     920:	ce 01       	movw	r24, r28
     922:	8d 5b       	subi	r24, 0xBD	; 189
     924:	9f 4f       	sbci	r25, 0xFF	; 255
     926:	fc 01       	movw	r30, r24
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <__stack+0xcd>
     930:	9e 01       	movw	r18, r28
     932:	2d 5b       	subi	r18, 0xBD	; 189
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	f9 01       	movw	r30, r18
     938:	91 83       	std	Z+1, r25	; 0x01
     93a:	80 83       	st	Z, r24
     93c:	ce 01       	movw	r24, r28
     93e:	8f 5b       	subi	r24, 0xBF	; 191
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	9e 01       	movw	r18, r28
     944:	2f 5b       	subi	r18, 0xBF	; 191
     946:	3f 4f       	sbci	r19, 0xFF	; 255
     948:	f9 01       	movw	r30, r18
     94a:	20 81       	ld	r18, Z
     94c:	31 81       	ldd	r19, Z+1	; 0x01
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	31 09       	sbc	r19, r1
     952:	fc 01       	movw	r30, r24
     954:	31 83       	std	Z+1, r19	; 0x01
     956:	20 83       	st	Z, r18
     958:	ce 01       	movw	r24, r28
     95a:	8f 5b       	subi	r24, 0xBF	; 191
     95c:	9f 4f       	sbci	r25, 0xFF	; 255
     95e:	fc 01       	movw	r30, r24
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	89 2b       	or	r24, r25
     966:	a1 f6       	brne	.-88     	; 0x910 <__stack+0xb1>
     968:	2b c0       	rjmp	.+86     	; 0x9c0 <__stack+0x161>
     96a:	8e 01       	movw	r16, r28
     96c:	0f 5b       	subi	r16, 0xBF	; 191
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
     970:	ce 01       	movw	r24, r28
     972:	cd 96       	adiw	r24, 0x3d	; 61
     974:	fc 01       	movw	r30, r24
     976:	60 81       	ld	r22, Z
     978:	71 81       	ldd	r23, Z+1	; 0x01
     97a:	82 81       	ldd	r24, Z+2	; 0x02
     97c:	93 81       	ldd	r25, Z+3	; 0x03
     97e:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	f8 01       	movw	r30, r16
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
     98c:	ce 01       	movw	r24, r28
     98e:	8b 5b       	subi	r24, 0xBB	; 187
     990:	9f 4f       	sbci	r25, 0xFF	; 255
     992:	9e 01       	movw	r18, r28
     994:	2f 5b       	subi	r18, 0xBF	; 191
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	f9 01       	movw	r30, r18
     99a:	20 81       	ld	r18, Z
     99c:	31 81       	ldd	r19, Z+1	; 0x01
     99e:	fc 01       	movw	r30, r24
     9a0:	31 83       	std	Z+1, r19	; 0x01
     9a2:	20 83       	st	Z, r18
     9a4:	ce 01       	movw	r24, r28
     9a6:	8b 5b       	subi	r24, 0xBB	; 187
     9a8:	9f 4f       	sbci	r25, 0xFF	; 255
     9aa:	fc 01       	movw	r30, r24
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <__stack+0x151>
     9b4:	9e 01       	movw	r18, r28
     9b6:	2b 5b       	subi	r18, 0xBB	; 187
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	f9 01       	movw	r30, r18
     9bc:	91 83       	std	Z+1, r25	; 0x01
     9be:	80 83       	st	Z, r24
     9c0:	8b e3       	ldi	r24, 0x3B	; 59
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	2b e3       	ldi	r18, 0x3B	; 59
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	f9 01       	movw	r30, r18
     9ca:	20 81       	ld	r18, Z
     9cc:	2d 7f       	andi	r18, 0xFD	; 253
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
     9d2:	8b e3       	ldi	r24, 0x3B	; 59
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	2b e3       	ldi	r18, 0x3B	; 59
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	f9 01       	movw	r30, r18
     9dc:	20 81       	ld	r18, Z
     9de:	2b 7f       	andi	r18, 0xFB	; 251
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
     9e4:	8b e3       	ldi	r24, 0x3B	; 59
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	2b e3       	ldi	r18, 0x3B	; 59
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	28 60       	ori	r18, 0x08	; 8
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	a0 e0       	ldi	r26, 0x00	; 0
     9fc:	b0 e4       	ldi	r27, 0x40	; 64
     9fe:	8d 83       	std	Y+5, r24	; 0x05
     a00:	9e 83       	std	Y+6, r25	; 0x06
     a02:	af 83       	std	Y+7, r26	; 0x07
     a04:	b8 87       	std	Y+8, r27	; 0x08
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	4a e7       	ldi	r20, 0x7A	; 122
     a0c:	55 e4       	ldi	r21, 0x45	; 69
     a0e:	6d 81       	ldd	r22, Y+5	; 0x05
     a10:	7e 81       	ldd	r23, Y+6	; 0x06
     a12:	8f 81       	ldd	r24, Y+7	; 0x07
     a14:	98 85       	ldd	r25, Y+8	; 0x08
     a16:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	8b ab       	std	Y+51, r24	; 0x33
     a20:	9c ab       	std	Y+52, r25	; 0x34
     a22:	ad ab       	std	Y+53, r26	; 0x35
     a24:	be ab       	std	Y+54, r27	; 0x36
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e8       	ldi	r20, 0x80	; 128
     a2c:	5f e3       	ldi	r21, 0x3F	; 63
     a2e:	6b a9       	ldd	r22, Y+51	; 0x33
     a30:	7c a9       	ldd	r23, Y+52	; 0x34
     a32:	8d a9       	ldd	r24, Y+53	; 0x35
     a34:	9e a9       	ldd	r25, Y+54	; 0x36
     a36:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
     a3a:	88 23       	and	r24, r24
     a3c:	2c f4       	brge	.+10     	; 0xa48 <__stack+0x1e9>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	98 af       	std	Y+56, r25	; 0x38
     a44:	8f ab       	std	Y+55, r24	; 0x37
     a46:	3f c0       	rjmp	.+126    	; 0xac6 <__stack+0x267>
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	4f e7       	ldi	r20, 0x7F	; 127
     a4e:	57 e4       	ldi	r21, 0x47	; 71
     a50:	6b a9       	ldd	r22, Y+51	; 0x33
     a52:	7c a9       	ldd	r23, Y+52	; 0x34
     a54:	8d a9       	ldd	r24, Y+53	; 0x35
     a56:	9e a9       	ldd	r25, Y+54	; 0x36
     a58:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	4c f5       	brge	.+82     	; 0xab2 <__stack+0x253>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e2       	ldi	r20, 0x20	; 32
     a66:	51 e4       	ldi	r21, 0x41	; 65
     a68:	6d 81       	ldd	r22, Y+5	; 0x05
     a6a:	7e 81       	ldd	r23, Y+6	; 0x06
     a6c:	8f 81       	ldd	r24, Y+7	; 0x07
     a6e:	98 85       	ldd	r25, Y+8	; 0x08
     a70:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	bc 01       	movw	r22, r24
     a7a:	cd 01       	movw	r24, r26
     a7c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     a80:	dc 01       	movw	r26, r24
     a82:	cb 01       	movw	r24, r22
     a84:	98 af       	std	Y+56, r25	; 0x38
     a86:	8f ab       	std	Y+55, r24	; 0x37
     a88:	0f c0       	rjmp	.+30     	; 0xaa8 <__stack+0x249>
     a8a:	80 e9       	ldi	r24, 0x90	; 144
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	9a af       	std	Y+58, r25	; 0x3a
     a90:	89 af       	std	Y+57, r24	; 0x39
     a92:	89 ad       	ldd	r24, Y+57	; 0x39
     a94:	9a ad       	ldd	r25, Y+58	; 0x3a
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <__stack+0x237>
     a9a:	9a af       	std	Y+58, r25	; 0x3a
     a9c:	89 af       	std	Y+57, r24	; 0x39
     a9e:	8f a9       	ldd	r24, Y+55	; 0x37
     aa0:	98 ad       	ldd	r25, Y+56	; 0x38
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	98 af       	std	Y+56, r25	; 0x38
     aa6:	8f ab       	std	Y+55, r24	; 0x37
     aa8:	8f a9       	ldd	r24, Y+55	; 0x37
     aaa:	98 ad       	ldd	r25, Y+56	; 0x38
     aac:	89 2b       	or	r24, r25
     aae:	69 f7       	brne	.-38     	; 0xa8a <__stack+0x22b>
     ab0:	14 c0       	rjmp	.+40     	; 0xada <__stack+0x27b>
     ab2:	6b a9       	ldd	r22, Y+51	; 0x33
     ab4:	7c a9       	ldd	r23, Y+52	; 0x34
     ab6:	8d a9       	ldd	r24, Y+53	; 0x35
     ab8:	9e a9       	ldd	r25, Y+54	; 0x36
     aba:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	98 af       	std	Y+56, r25	; 0x38
     ac4:	8f ab       	std	Y+55, r24	; 0x37
     ac6:	8f a9       	ldd	r24, Y+55	; 0x37
     ac8:	98 ad       	ldd	r25, Y+56	; 0x38
     aca:	9c af       	std	Y+60, r25	; 0x3c
     acc:	8b af       	std	Y+59, r24	; 0x3b
     ace:	8b ad       	ldd	r24, Y+59	; 0x3b
     ad0:	9c ad       	ldd	r25, Y+60	; 0x3c
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <__stack+0x273>
     ad6:	9c af       	std	Y+60, r25	; 0x3c
     ad8:	8b af       	std	Y+59, r24	; 0x3b
     ada:	8b e3       	ldi	r24, 0x3B	; 59
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	2b e3       	ldi	r18, 0x3B	; 59
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	27 7f       	andi	r18, 0xF7	; 247
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e4       	ldi	r27, 0x40	; 64
     af4:	89 87       	std	Y+9, r24	; 0x09
     af6:	9a 87       	std	Y+10, r25	; 0x0a
     af8:	ab 87       	std	Y+11, r26	; 0x0b
     afa:	bc 87       	std	Y+12, r27	; 0x0c
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	4a e7       	ldi	r20, 0x7A	; 122
     b02:	55 e4       	ldi	r21, 0x45	; 69
     b04:	69 85       	ldd	r22, Y+9	; 0x09
     b06:	7a 85       	ldd	r23, Y+10	; 0x0a
     b08:	8b 85       	ldd	r24, Y+11	; 0x0b
     b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b0c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	89 a7       	std	Y+41, r24	; 0x29
     b16:	9a a7       	std	Y+42, r25	; 0x2a
     b18:	ab a7       	std	Y+43, r26	; 0x2b
     b1a:	bc a7       	std	Y+44, r27	; 0x2c
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e8       	ldi	r20, 0x80	; 128
     b22:	5f e3       	ldi	r21, 0x3F	; 63
     b24:	69 a5       	ldd	r22, Y+41	; 0x29
     b26:	7a a5       	ldd	r23, Y+42	; 0x2a
     b28:	8b a5       	ldd	r24, Y+43	; 0x2b
     b2a:	9c a5       	ldd	r25, Y+44	; 0x2c
     b2c:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
     b30:	88 23       	and	r24, r24
     b32:	2c f4       	brge	.+10     	; 0xb3e <__stack+0x2df>
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	9e a7       	std	Y+46, r25	; 0x2e
     b3a:	8d a7       	std	Y+45, r24	; 0x2d
     b3c:	3f c0       	rjmp	.+126    	; 0xbbc <__stack+0x35d>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	3f ef       	ldi	r19, 0xFF	; 255
     b42:	4f e7       	ldi	r20, 0x7F	; 127
     b44:	57 e4       	ldi	r21, 0x47	; 71
     b46:	69 a5       	ldd	r22, Y+41	; 0x29
     b48:	7a a5       	ldd	r23, Y+42	; 0x2a
     b4a:	8b a5       	ldd	r24, Y+43	; 0x2b
     b4c:	9c a5       	ldd	r25, Y+44	; 0x2c
     b4e:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
     b52:	18 16       	cp	r1, r24
     b54:	4c f5       	brge	.+82     	; 0xba8 <__stack+0x349>
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	40 e2       	ldi	r20, 0x20	; 32
     b5c:	51 e4       	ldi	r21, 0x41	; 65
     b5e:	69 85       	ldd	r22, Y+9	; 0x09
     b60:	7a 85       	ldd	r23, Y+10	; 0x0a
     b62:	8b 85       	ldd	r24, Y+11	; 0x0b
     b64:	9c 85       	ldd	r25, Y+12	; 0x0c
     b66:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	bc 01       	movw	r22, r24
     b70:	cd 01       	movw	r24, r26
     b72:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	9e a7       	std	Y+46, r25	; 0x2e
     b7c:	8d a7       	std	Y+45, r24	; 0x2d
     b7e:	0f c0       	rjmp	.+30     	; 0xb9e <__stack+0x33f>
     b80:	80 e9       	ldi	r24, 0x90	; 144
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	98 ab       	std	Y+48, r25	; 0x30
     b86:	8f a7       	std	Y+47, r24	; 0x2f
     b88:	8f a5       	ldd	r24, Y+47	; 0x2f
     b8a:	98 a9       	ldd	r25, Y+48	; 0x30
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <__stack+0x32d>
     b90:	98 ab       	std	Y+48, r25	; 0x30
     b92:	8f a7       	std	Y+47, r24	; 0x2f
     b94:	8d a5       	ldd	r24, Y+45	; 0x2d
     b96:	9e a5       	ldd	r25, Y+46	; 0x2e
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	9e a7       	std	Y+46, r25	; 0x2e
     b9c:	8d a7       	std	Y+45, r24	; 0x2d
     b9e:	8d a5       	ldd	r24, Y+45	; 0x2d
     ba0:	9e a5       	ldd	r25, Y+46	; 0x2e
     ba2:	89 2b       	or	r24, r25
     ba4:	69 f7       	brne	.-38     	; 0xb80 <__stack+0x321>
     ba6:	14 c0       	rjmp	.+40     	; 0xbd0 <__stack+0x371>
     ba8:	69 a5       	ldd	r22, Y+41	; 0x29
     baa:	7a a5       	ldd	r23, Y+42	; 0x2a
     bac:	8b a5       	ldd	r24, Y+43	; 0x2b
     bae:	9c a5       	ldd	r25, Y+44	; 0x2c
     bb0:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	9e a7       	std	Y+46, r25	; 0x2e
     bba:	8d a7       	std	Y+45, r24	; 0x2d
     bbc:	8d a5       	ldd	r24, Y+45	; 0x2d
     bbe:	9e a5       	ldd	r25, Y+46	; 0x2e
     bc0:	9a ab       	std	Y+50, r25	; 0x32
     bc2:	89 ab       	std	Y+49, r24	; 0x31
     bc4:	89 a9       	ldd	r24, Y+49	; 0x31
     bc6:	9a a9       	ldd	r25, Y+50	; 0x32
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <__stack+0x369>
     bcc:	9a ab       	std	Y+50, r25	; 0x32
     bce:	89 ab       	std	Y+49, r24	; 0x31
     bd0:	ce 01       	movw	r24, r28
     bd2:	89 5b       	subi	r24, 0xB9	; 185
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	fc 01       	movw	r30, r24
     bd8:	80 81       	ld	r24, Z
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	81 70       	andi	r24, 0x01	; 1
     be0:	99 27       	eor	r25, r25
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	89 2b       	or	r24, r25
     be6:	09 f4       	brne	.+2      	; 0xbea <__stack+0x38b>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	82 2f       	mov	r24, r18
     bec:	68 2f       	mov	r22, r24
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     bf4:	ce 01       	movw	r24, r28
     bf6:	89 5b       	subi	r24, 0xB9	; 185
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	82 70       	andi	r24, 0x02	; 2
     c04:	99 27       	eor	r25, r25
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	89 2b       	or	r24, r25
     c0a:	09 f4       	brne	.+2      	; 0xc0e <__stack+0x3af>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	82 2f       	mov	r24, r18
     c10:	68 2f       	mov	r22, r24
     c12:	85 e0       	ldi	r24, 0x05	; 5
     c14:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     c18:	ce 01       	movw	r24, r28
     c1a:	89 5b       	subi	r24, 0xB9	; 185
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	fc 01       	movw	r30, r24
     c20:	80 81       	ld	r24, Z
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	84 70       	andi	r24, 0x04	; 4
     c28:	99 27       	eor	r25, r25
     c2a:	21 e0       	ldi	r18, 0x01	; 1
     c2c:	89 2b       	or	r24, r25
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__stack+0x3d3>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	82 2f       	mov	r24, r18
     c34:	68 2f       	mov	r22, r24
     c36:	86 e0       	ldi	r24, 0x06	; 6
     c38:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     c3c:	ce 01       	movw	r24, r28
     c3e:	89 5b       	subi	r24, 0xB9	; 185
     c40:	9f 4f       	sbci	r25, 0xFF	; 255
     c42:	fc 01       	movw	r30, r24
     c44:	80 81       	ld	r24, Z
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	88 70       	andi	r24, 0x08	; 8
     c4c:	99 27       	eor	r25, r25
     c4e:	21 e0       	ldi	r18, 0x01	; 1
     c50:	89 2b       	or	r24, r25
     c52:	09 f4       	brne	.+2      	; 0xc56 <__stack+0x3f7>
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	82 2f       	mov	r24, r18
     c58:	68 2f       	mov	r22, r24
     c5a:	87 e0       	ldi	r24, 0x07	; 7
     c5c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     c60:	8b e3       	ldi	r24, 0x3B	; 59
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	2b e3       	ldi	r18, 0x3B	; 59
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	f9 01       	movw	r30, r18
     c6a:	20 81       	ld	r18, Z
     c6c:	28 60       	ori	r18, 0x08	; 8
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a0 e0       	ldi	r26, 0x00	; 0
     c78:	b0 e4       	ldi	r27, 0x40	; 64
     c7a:	8d 87       	std	Y+13, r24	; 0x0d
     c7c:	9e 87       	std	Y+14, r25	; 0x0e
     c7e:	af 87       	std	Y+15, r26	; 0x0f
     c80:	b8 8b       	std	Y+16, r27	; 0x10
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	4a e7       	ldi	r20, 0x7A	; 122
     c88:	55 e4       	ldi	r21, 0x45	; 69
     c8a:	6d 85       	ldd	r22, Y+13	; 0x0d
     c8c:	7e 85       	ldd	r23, Y+14	; 0x0e
     c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c90:	98 89       	ldd	r25, Y+16	; 0x10
     c92:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	8f 8f       	std	Y+31, r24	; 0x1f
     c9c:	98 a3       	std	Y+32, r25	; 0x20
     c9e:	a9 a3       	std	Y+33, r26	; 0x21
     ca0:	ba a3       	std	Y+34, r27	; 0x22
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e8       	ldi	r20, 0x80	; 128
     ca8:	5f e3       	ldi	r21, 0x3F	; 63
     caa:	6f 8d       	ldd	r22, Y+31	; 0x1f
     cac:	78 a1       	ldd	r23, Y+32	; 0x20
     cae:	89 a1       	ldd	r24, Y+33	; 0x21
     cb0:	9a a1       	ldd	r25, Y+34	; 0x22
     cb2:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
     cb6:	88 23       	and	r24, r24
     cb8:	2c f4       	brge	.+10     	; 0xcc4 <__stack+0x465>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	9c a3       	std	Y+36, r25	; 0x24
     cc0:	8b a3       	std	Y+35, r24	; 0x23
     cc2:	3f c0       	rjmp	.+126    	; 0xd42 <__stack+0x4e3>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	3f ef       	ldi	r19, 0xFF	; 255
     cc8:	4f e7       	ldi	r20, 0x7F	; 127
     cca:	57 e4       	ldi	r21, 0x47	; 71
     ccc:	6f 8d       	ldd	r22, Y+31	; 0x1f
     cce:	78 a1       	ldd	r23, Y+32	; 0x20
     cd0:	89 a1       	ldd	r24, Y+33	; 0x21
     cd2:	9a a1       	ldd	r25, Y+34	; 0x22
     cd4:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
     cd8:	18 16       	cp	r1, r24
     cda:	4c f5       	brge	.+82     	; 0xd2e <__stack+0x4cf>
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e2       	ldi	r20, 0x20	; 32
     ce2:	51 e4       	ldi	r21, 0x41	; 65
     ce4:	6d 85       	ldd	r22, Y+13	; 0x0d
     ce6:	7e 85       	ldd	r23, Y+14	; 0x0e
     ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cea:	98 89       	ldd	r25, Y+16	; 0x10
     cec:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	9c a3       	std	Y+36, r25	; 0x24
     d02:	8b a3       	std	Y+35, r24	; 0x23
     d04:	0f c0       	rjmp	.+30     	; 0xd24 <__stack+0x4c5>
     d06:	80 e9       	ldi	r24, 0x90	; 144
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	9e a3       	std	Y+38, r25	; 0x26
     d0c:	8d a3       	std	Y+37, r24	; 0x25
     d0e:	8d a1       	ldd	r24, Y+37	; 0x25
     d10:	9e a1       	ldd	r25, Y+38	; 0x26
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	f1 f7       	brne	.-4      	; 0xd12 <__stack+0x4b3>
     d16:	9e a3       	std	Y+38, r25	; 0x26
     d18:	8d a3       	std	Y+37, r24	; 0x25
     d1a:	8b a1       	ldd	r24, Y+35	; 0x23
     d1c:	9c a1       	ldd	r25, Y+36	; 0x24
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	9c a3       	std	Y+36, r25	; 0x24
     d22:	8b a3       	std	Y+35, r24	; 0x23
     d24:	8b a1       	ldd	r24, Y+35	; 0x23
     d26:	9c a1       	ldd	r25, Y+36	; 0x24
     d28:	89 2b       	or	r24, r25
     d2a:	69 f7       	brne	.-38     	; 0xd06 <__stack+0x4a7>
     d2c:	14 c0       	rjmp	.+40     	; 0xd56 <__stack+0x4f7>
     d2e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     d30:	78 a1       	ldd	r23, Y+32	; 0x20
     d32:	89 a1       	ldd	r24, Y+33	; 0x21
     d34:	9a a1       	ldd	r25, Y+34	; 0x22
     d36:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	9c a3       	std	Y+36, r25	; 0x24
     d40:	8b a3       	std	Y+35, r24	; 0x23
     d42:	8b a1       	ldd	r24, Y+35	; 0x23
     d44:	9c a1       	ldd	r25, Y+36	; 0x24
     d46:	98 a7       	std	Y+40, r25	; 0x28
     d48:	8f a3       	std	Y+39, r24	; 0x27
     d4a:	8f a1       	ldd	r24, Y+39	; 0x27
     d4c:	98 a5       	ldd	r25, Y+40	; 0x28
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <__stack+0x4ef>
     d52:	98 a7       	std	Y+40, r25	; 0x28
     d54:	8f a3       	std	Y+39, r24	; 0x27
     d56:	8b e3       	ldi	r24, 0x3B	; 59
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	2b e3       	ldi	r18, 0x3B	; 59
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	f9 01       	movw	r30, r18
     d60:	20 81       	ld	r18, Z
     d62:	27 7f       	andi	r18, 0xF7	; 247
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e4       	ldi	r27, 0x40	; 64
     d70:	89 8b       	std	Y+17, r24	; 0x11
     d72:	9a 8b       	std	Y+18, r25	; 0x12
     d74:	ab 8b       	std	Y+19, r26	; 0x13
     d76:	bc 8b       	std	Y+20, r27	; 0x14
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4a e7       	ldi	r20, 0x7A	; 122
     d7e:	55 e4       	ldi	r21, 0x45	; 69
     d80:	69 89       	ldd	r22, Y+17	; 0x11
     d82:	7a 89       	ldd	r23, Y+18	; 0x12
     d84:	8b 89       	ldd	r24, Y+19	; 0x13
     d86:	9c 89       	ldd	r25, Y+20	; 0x14
     d88:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	8d 8b       	std	Y+21, r24	; 0x15
     d92:	9e 8b       	std	Y+22, r25	; 0x16
     d94:	af 8b       	std	Y+23, r26	; 0x17
     d96:	b8 8f       	std	Y+24, r27	; 0x18
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e8       	ldi	r20, 0x80	; 128
     d9e:	5f e3       	ldi	r21, 0x3F	; 63
     da0:	6d 89       	ldd	r22, Y+21	; 0x15
     da2:	7e 89       	ldd	r23, Y+22	; 0x16
     da4:	8f 89       	ldd	r24, Y+23	; 0x17
     da6:	98 8d       	ldd	r25, Y+24	; 0x18
     da8:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
     dac:	88 23       	and	r24, r24
     dae:	2c f4       	brge	.+10     	; 0xdba <__stack+0x55b>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9a 8f       	std	Y+26, r25	; 0x1a
     db6:	89 8f       	std	Y+25, r24	; 0x19
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <__stack+0x5d9>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	6d 89       	ldd	r22, Y+21	; 0x15
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
     dce:	18 16       	cp	r1, r24
     dd0:	4c f5       	brge	.+82     	; 0xe24 <__stack+0x5c5>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e2       	ldi	r20, 0x20	; 32
     dd8:	51 e4       	ldi	r21, 0x41	; 65
     dda:	69 89       	ldd	r22, Y+17	; 0x11
     ddc:	7a 89       	ldd	r23, Y+18	; 0x12
     dde:	8b 89       	ldd	r24, Y+19	; 0x13
     de0:	9c 89       	ldd	r25, Y+20	; 0x14
     de2:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	9a 8f       	std	Y+26, r25	; 0x1a
     df8:	89 8f       	std	Y+25, r24	; 0x19
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <__stack+0x5bb>
     dfc:	80 e9       	ldi	r24, 0x90	; 144
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	9c 8f       	std	Y+28, r25	; 0x1c
     e02:	8b 8f       	std	Y+27, r24	; 0x1b
     e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <__stack+0x5a9>
     e0c:	9c 8f       	std	Y+28, r25	; 0x1c
     e0e:	8b 8f       	std	Y+27, r24	; 0x1b
     e10:	89 8d       	ldd	r24, Y+25	; 0x19
     e12:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	9a 8f       	std	Y+26, r25	; 0x1a
     e18:	89 8f       	std	Y+25, r24	; 0x19
     e1a:	89 8d       	ldd	r24, Y+25	; 0x19
     e1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e1e:	89 2b       	or	r24, r25
     e20:	69 f7       	brne	.-38     	; 0xdfc <__stack+0x59d>
     e22:	14 c0       	rjmp	.+40     	; 0xe4c <__stack+0x5ed>
     e24:	6d 89       	ldd	r22, Y+21	; 0x15
     e26:	7e 89       	ldd	r23, Y+22	; 0x16
     e28:	8f 89       	ldd	r24, Y+23	; 0x17
     e2a:	98 8d       	ldd	r25, Y+24	; 0x18
     e2c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9a 8f       	std	Y+26, r25	; 0x1a
     e36:	89 8f       	std	Y+25, r24	; 0x19
     e38:	89 8d       	ldd	r24, Y+25	; 0x19
     e3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e3c:	9e 8f       	std	Y+30, r25	; 0x1e
     e3e:	8d 8f       	std	Y+29, r24	; 0x1d
     e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e42:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <__stack+0x5e5>
     e48:	9e 8f       	std	Y+30, r25	; 0x1e
     e4a:	8d 8f       	std	Y+29, r24	; 0x1d
     e4c:	00 00       	nop
     e4e:	c9 5b       	subi	r28, 0xB9	; 185
     e50:	df 4f       	sbci	r29, 0xFF	; 255
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <LCD_displayChar>:
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	e9 97       	sbiw	r28, 0x39	; 57
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	89 af       	std	Y+57, r24	; 0x39
     e7c:	89 ad       	ldd	r24, Y+57	; 0x39
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	80 71       	andi	r24, 0x10	; 16
     e84:	99 27       	eor	r25, r25
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	89 2b       	or	r24, r25
     e8a:	09 f4       	brne	.+2      	; 0xe8e <LCD_displayChar+0x28>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	82 2f       	mov	r24, r18
     e90:	68 2f       	mov	r22, r24
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     e98:	89 ad       	ldd	r24, Y+57	; 0x39
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	80 72       	andi	r24, 0x20	; 32
     ea0:	99 27       	eor	r25, r25
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	89 2b       	or	r24, r25
     ea6:	09 f4       	brne	.+2      	; 0xeaa <LCD_displayChar+0x44>
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	82 2f       	mov	r24, r18
     eac:	68 2f       	mov	r22, r24
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     eb4:	89 ad       	ldd	r24, Y+57	; 0x39
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	80 74       	andi	r24, 0x40	; 64
     ebc:	99 27       	eor	r25, r25
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	89 2b       	or	r24, r25
     ec2:	09 f4       	brne	.+2      	; 0xec6 <LCD_displayChar+0x60>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	82 2f       	mov	r24, r18
     ec8:	68 2f       	mov	r22, r24
     eca:	86 e0       	ldi	r24, 0x06	; 6
     ecc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     ed0:	89 ad       	ldd	r24, Y+57	; 0x39
     ed2:	88 1f       	adc	r24, r24
     ed4:	88 27       	eor	r24, r24
     ed6:	88 1f       	adc	r24, r24
     ed8:	68 2f       	mov	r22, r24
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     ee0:	8b e3       	ldi	r24, 0x3B	; 59
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	2b e3       	ldi	r18, 0x3B	; 59
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	f9 01       	movw	r30, r18
     eea:	20 81       	ld	r18, Z
     eec:	22 60       	ori	r18, 0x02	; 2
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
     ef2:	8b e3       	ldi	r24, 0x3B	; 59
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	2b e3       	ldi	r18, 0x3B	; 59
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	f9 01       	movw	r30, r18
     efc:	20 81       	ld	r18, Z
     efe:	2b 7f       	andi	r18, 0xFB	; 251
     f00:	fc 01       	movw	r30, r24
     f02:	20 83       	st	Z, r18
     f04:	8b e3       	ldi	r24, 0x3B	; 59
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	2b e3       	ldi	r18, 0x3B	; 59
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	f9 01       	movw	r30, r18
     f0e:	20 81       	ld	r18, Z
     f10:	28 60       	ori	r18, 0x08	; 8
     f12:	fc 01       	movw	r30, r24
     f14:	20 83       	st	Z, r18
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e0       	ldi	r26, 0x00	; 0
     f1c:	b0 e4       	ldi	r27, 0x40	; 64
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	ab 83       	std	Y+3, r26	; 0x03
     f24:	bc 83       	std	Y+4, r27	; 0x04
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	4a e7       	ldi	r20, 0x7A	; 122
     f2c:	55 e4       	ldi	r21, 0x45	; 69
     f2e:	69 81       	ldd	r22, Y+1	; 0x01
     f30:	7a 81       	ldd	r23, Y+2	; 0x02
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8f a7       	std	Y+47, r24	; 0x2f
     f40:	98 ab       	std	Y+48, r25	; 0x30
     f42:	a9 ab       	std	Y+49, r26	; 0x31
     f44:	ba ab       	std	Y+50, r27	; 0x32
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	5f e3       	ldi	r21, 0x3F	; 63
     f4e:	6f a5       	ldd	r22, Y+47	; 0x2f
     f50:	78 a9       	ldd	r23, Y+48	; 0x30
     f52:	89 a9       	ldd	r24, Y+49	; 0x31
     f54:	9a a9       	ldd	r25, Y+50	; 0x32
     f56:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	2c f4       	brge	.+10     	; 0xf68 <LCD_displayChar+0x102>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9c ab       	std	Y+52, r25	; 0x34
     f64:	8b ab       	std	Y+51, r24	; 0x33
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <LCD_displayChar+0x180>
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	4f e7       	ldi	r20, 0x7F	; 127
     f6e:	57 e4       	ldi	r21, 0x47	; 71
     f70:	6f a5       	ldd	r22, Y+47	; 0x2f
     f72:	78 a9       	ldd	r23, Y+48	; 0x30
     f74:	89 a9       	ldd	r24, Y+49	; 0x31
     f76:	9a a9       	ldd	r25, Y+50	; 0x32
     f78:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	4c f5       	brge	.+82     	; 0xfd2 <LCD_displayChar+0x16c>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	51 e4       	ldi	r21, 0x41	; 65
     f88:	69 81       	ldd	r22, Y+1	; 0x01
     f8a:	7a 81       	ldd	r23, Y+2	; 0x02
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9c ab       	std	Y+52, r25	; 0x34
     fa6:	8b ab       	std	Y+51, r24	; 0x33
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <LCD_displayChar+0x162>
     faa:	80 e9       	ldi	r24, 0x90	; 144
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	9e ab       	std	Y+54, r25	; 0x36
     fb0:	8d ab       	std	Y+53, r24	; 0x35
     fb2:	8d a9       	ldd	r24, Y+53	; 0x35
     fb4:	9e a9       	ldd	r25, Y+54	; 0x36
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <LCD_displayChar+0x150>
     fba:	9e ab       	std	Y+54, r25	; 0x36
     fbc:	8d ab       	std	Y+53, r24	; 0x35
     fbe:	8b a9       	ldd	r24, Y+51	; 0x33
     fc0:	9c a9       	ldd	r25, Y+52	; 0x34
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9c ab       	std	Y+52, r25	; 0x34
     fc6:	8b ab       	std	Y+51, r24	; 0x33
     fc8:	8b a9       	ldd	r24, Y+51	; 0x33
     fca:	9c a9       	ldd	r25, Y+52	; 0x34
     fcc:	89 2b       	or	r24, r25
     fce:	69 f7       	brne	.-38     	; 0xfaa <LCD_displayChar+0x144>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <LCD_displayChar+0x194>
     fd2:	6f a5       	ldd	r22, Y+47	; 0x2f
     fd4:	78 a9       	ldd	r23, Y+48	; 0x30
     fd6:	89 a9       	ldd	r24, Y+49	; 0x31
     fd8:	9a a9       	ldd	r25, Y+50	; 0x32
     fda:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9c ab       	std	Y+52, r25	; 0x34
     fe4:	8b ab       	std	Y+51, r24	; 0x33
     fe6:	8b a9       	ldd	r24, Y+51	; 0x33
     fe8:	9c a9       	ldd	r25, Y+52	; 0x34
     fea:	98 af       	std	Y+56, r25	; 0x38
     fec:	8f ab       	std	Y+55, r24	; 0x37
     fee:	8f a9       	ldd	r24, Y+55	; 0x37
     ff0:	98 ad       	ldd	r25, Y+56	; 0x38
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <LCD_displayChar+0x18c>
     ff6:	98 af       	std	Y+56, r25	; 0x38
     ff8:	8f ab       	std	Y+55, r24	; 0x37
     ffa:	8b e3       	ldi	r24, 0x3B	; 59
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	2b e3       	ldi	r18, 0x3B	; 59
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	f9 01       	movw	r30, r18
    1004:	20 81       	ld	r18, Z
    1006:	27 7f       	andi	r18, 0xF7	; 247
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a0 e0       	ldi	r26, 0x00	; 0
    1012:	b0 e4       	ldi	r27, 0x40	; 64
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	af 83       	std	Y+7, r26	; 0x07
    101a:	b8 87       	std	Y+8, r27	; 0x08
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	4a e7       	ldi	r20, 0x7A	; 122
    1022:	55 e4       	ldi	r21, 0x45	; 69
    1024:	6d 81       	ldd	r22, Y+5	; 0x05
    1026:	7e 81       	ldd	r23, Y+6	; 0x06
    1028:	8f 81       	ldd	r24, Y+7	; 0x07
    102a:	98 85       	ldd	r25, Y+8	; 0x08
    102c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	8d a3       	std	Y+37, r24	; 0x25
    1036:	9e a3       	std	Y+38, r25	; 0x26
    1038:	af a3       	std	Y+39, r26	; 0x27
    103a:	b8 a7       	std	Y+40, r27	; 0x28
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	6d a1       	ldd	r22, Y+37	; 0x25
    1046:	7e a1       	ldd	r23, Y+38	; 0x26
    1048:	8f a1       	ldd	r24, Y+39	; 0x27
    104a:	98 a5       	ldd	r25, Y+40	; 0x28
    104c:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    1050:	88 23       	and	r24, r24
    1052:	2c f4       	brge	.+10     	; 0x105e <LCD_displayChar+0x1f8>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9a a7       	std	Y+42, r25	; 0x2a
    105a:	89 a7       	std	Y+41, r24	; 0x29
    105c:	3f c0       	rjmp	.+126    	; 0x10dc <LCD_displayChar+0x276>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	4f e7       	ldi	r20, 0x7F	; 127
    1064:	57 e4       	ldi	r21, 0x47	; 71
    1066:	6d a1       	ldd	r22, Y+37	; 0x25
    1068:	7e a1       	ldd	r23, Y+38	; 0x26
    106a:	8f a1       	ldd	r24, Y+39	; 0x27
    106c:	98 a5       	ldd	r25, Y+40	; 0x28
    106e:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    1072:	18 16       	cp	r1, r24
    1074:	4c f5       	brge	.+82     	; 0x10c8 <LCD_displayChar+0x262>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	6d 81       	ldd	r22, Y+5	; 0x05
    1080:	7e 81       	ldd	r23, Y+6	; 0x06
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9a a7       	std	Y+42, r25	; 0x2a
    109c:	89 a7       	std	Y+41, r24	; 0x29
    109e:	0f c0       	rjmp	.+30     	; 0x10be <LCD_displayChar+0x258>
    10a0:	80 e9       	ldi	r24, 0x90	; 144
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	9c a7       	std	Y+44, r25	; 0x2c
    10a6:	8b a7       	std	Y+43, r24	; 0x2b
    10a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <LCD_displayChar+0x246>
    10b0:	9c a7       	std	Y+44, r25	; 0x2c
    10b2:	8b a7       	std	Y+43, r24	; 0x2b
    10b4:	89 a5       	ldd	r24, Y+41	; 0x29
    10b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	9a a7       	std	Y+42, r25	; 0x2a
    10bc:	89 a7       	std	Y+41, r24	; 0x29
    10be:	89 a5       	ldd	r24, Y+41	; 0x29
    10c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c2:	89 2b       	or	r24, r25
    10c4:	69 f7       	brne	.-38     	; 0x10a0 <LCD_displayChar+0x23a>
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <LCD_displayChar+0x28a>
    10c8:	6d a1       	ldd	r22, Y+37	; 0x25
    10ca:	7e a1       	ldd	r23, Y+38	; 0x26
    10cc:	8f a1       	ldd	r24, Y+39	; 0x27
    10ce:	98 a5       	ldd	r25, Y+40	; 0x28
    10d0:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9a a7       	std	Y+42, r25	; 0x2a
    10da:	89 a7       	std	Y+41, r24	; 0x29
    10dc:	89 a5       	ldd	r24, Y+41	; 0x29
    10de:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e0:	9e a7       	std	Y+46, r25	; 0x2e
    10e2:	8d a7       	std	Y+45, r24	; 0x2d
    10e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    10e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <LCD_displayChar+0x282>
    10ec:	9e a7       	std	Y+46, r25	; 0x2e
    10ee:	8d a7       	std	Y+45, r24	; 0x2d
    10f0:	89 ad       	ldd	r24, Y+57	; 0x39
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	81 70       	andi	r24, 0x01	; 1
    10f8:	99 27       	eor	r25, r25
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	89 2b       	or	r24, r25
    10fe:	09 f4       	brne	.+2      	; 0x1102 <LCD_displayChar+0x29c>
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	82 2f       	mov	r24, r18
    1104:	68 2f       	mov	r22, r24
    1106:	84 e0       	ldi	r24, 0x04	; 4
    1108:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    110c:	89 ad       	ldd	r24, Y+57	; 0x39
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	82 70       	andi	r24, 0x02	; 2
    1114:	99 27       	eor	r25, r25
    1116:	21 e0       	ldi	r18, 0x01	; 1
    1118:	89 2b       	or	r24, r25
    111a:	09 f4       	brne	.+2      	; 0x111e <LCD_displayChar+0x2b8>
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	82 2f       	mov	r24, r18
    1120:	68 2f       	mov	r22, r24
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1128:	89 ad       	ldd	r24, Y+57	; 0x39
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	84 70       	andi	r24, 0x04	; 4
    1130:	99 27       	eor	r25, r25
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	89 2b       	or	r24, r25
    1136:	09 f4       	brne	.+2      	; 0x113a <LCD_displayChar+0x2d4>
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	82 2f       	mov	r24, r18
    113c:	68 2f       	mov	r22, r24
    113e:	86 e0       	ldi	r24, 0x06	; 6
    1140:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1144:	89 ad       	ldd	r24, Y+57	; 0x39
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	88 70       	andi	r24, 0x08	; 8
    114c:	99 27       	eor	r25, r25
    114e:	21 e0       	ldi	r18, 0x01	; 1
    1150:	89 2b       	or	r24, r25
    1152:	09 f4       	brne	.+2      	; 0x1156 <LCD_displayChar+0x2f0>
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	82 2f       	mov	r24, r18
    1158:	68 2f       	mov	r22, r24
    115a:	87 e0       	ldi	r24, 0x07	; 7
    115c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1160:	8b e3       	ldi	r24, 0x3B	; 59
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	2b e3       	ldi	r18, 0x3B	; 59
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	f9 01       	movw	r30, r18
    116a:	20 81       	ld	r18, Z
    116c:	28 60       	ori	r18, 0x08	; 8
    116e:	fc 01       	movw	r30, r24
    1170:	20 83       	st	Z, r18
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e4       	ldi	r27, 0x40	; 64
    117a:	89 87       	std	Y+9, r24	; 0x09
    117c:	9a 87       	std	Y+10, r25	; 0x0a
    117e:	ab 87       	std	Y+11, r26	; 0x0b
    1180:	bc 87       	std	Y+12, r27	; 0x0c
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	4a e7       	ldi	r20, 0x7A	; 122
    1188:	55 e4       	ldi	r21, 0x45	; 69
    118a:	69 85       	ldd	r22, Y+9	; 0x09
    118c:	7a 85       	ldd	r23, Y+10	; 0x0a
    118e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1190:	9c 85       	ldd	r25, Y+12	; 0x0c
    1192:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	8b 8f       	std	Y+27, r24	; 0x1b
    119c:	9c 8f       	std	Y+28, r25	; 0x1c
    119e:	ad 8f       	std	Y+29, r26	; 0x1d
    11a0:	be 8f       	std	Y+30, r27	; 0x1e
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    11ac:	7c 8d       	ldd	r23, Y+28	; 0x1c
    11ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b2:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    11b6:	88 23       	and	r24, r24
    11b8:	2c f4       	brge	.+10     	; 0x11c4 <LCD_displayChar+0x35e>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	98 a3       	std	Y+32, r25	; 0x20
    11c0:	8f 8f       	std	Y+31, r24	; 0x1f
    11c2:	3f c0       	rjmp	.+126    	; 0x1242 <LCD_displayChar+0x3dc>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    11ce:	7c 8d       	ldd	r23, Y+28	; 0x1c
    11d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11d4:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    11d8:	18 16       	cp	r1, r24
    11da:	4c f5       	brge	.+82     	; 0x122e <LCD_displayChar+0x3c8>
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	69 85       	ldd	r22, Y+9	; 0x09
    11e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    11e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ec:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	98 a3       	std	Y+32, r25	; 0x20
    1202:	8f 8f       	std	Y+31, r24	; 0x1f
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <LCD_displayChar+0x3be>
    1206:	80 e9       	ldi	r24, 0x90	; 144
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	9a a3       	std	Y+34, r25	; 0x22
    120c:	89 a3       	std	Y+33, r24	; 0x21
    120e:	89 a1       	ldd	r24, Y+33	; 0x21
    1210:	9a a1       	ldd	r25, Y+34	; 0x22
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <LCD_displayChar+0x3ac>
    1216:	9a a3       	std	Y+34, r25	; 0x22
    1218:	89 a3       	std	Y+33, r24	; 0x21
    121a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    121c:	98 a1       	ldd	r25, Y+32	; 0x20
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	98 a3       	std	Y+32, r25	; 0x20
    1222:	8f 8f       	std	Y+31, r24	; 0x1f
    1224:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1226:	98 a1       	ldd	r25, Y+32	; 0x20
    1228:	89 2b       	or	r24, r25
    122a:	69 f7       	brne	.-38     	; 0x1206 <LCD_displayChar+0x3a0>
    122c:	14 c0       	rjmp	.+40     	; 0x1256 <LCD_displayChar+0x3f0>
    122e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1230:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1232:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1234:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1236:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	98 a3       	std	Y+32, r25	; 0x20
    1240:	8f 8f       	std	Y+31, r24	; 0x1f
    1242:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1244:	98 a1       	ldd	r25, Y+32	; 0x20
    1246:	9c a3       	std	Y+36, r25	; 0x24
    1248:	8b a3       	std	Y+35, r24	; 0x23
    124a:	8b a1       	ldd	r24, Y+35	; 0x23
    124c:	9c a1       	ldd	r25, Y+36	; 0x24
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <LCD_displayChar+0x3e8>
    1252:	9c a3       	std	Y+36, r25	; 0x24
    1254:	8b a3       	std	Y+35, r24	; 0x23
    1256:	8b e3       	ldi	r24, 0x3B	; 59
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	2b e3       	ldi	r18, 0x3B	; 59
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	f9 01       	movw	r30, r18
    1260:	20 81       	ld	r18, Z
    1262:	27 7f       	andi	r18, 0xF7	; 247
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e4       	ldi	r27, 0x40	; 64
    1270:	8d 87       	std	Y+13, r24	; 0x0d
    1272:	9e 87       	std	Y+14, r25	; 0x0e
    1274:	af 87       	std	Y+15, r26	; 0x0f
    1276:	b8 8b       	std	Y+16, r27	; 0x10
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a e7       	ldi	r20, 0x7A	; 122
    127e:	55 e4       	ldi	r21, 0x45	; 69
    1280:	6d 85       	ldd	r22, Y+13	; 0x0d
    1282:	7e 85       	ldd	r23, Y+14	; 0x0e
    1284:	8f 85       	ldd	r24, Y+15	; 0x0f
    1286:	98 89       	ldd	r25, Y+16	; 0x10
    1288:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	89 8b       	std	Y+17, r24	; 0x11
    1292:	9a 8b       	std	Y+18, r25	; 0x12
    1294:	ab 8b       	std	Y+19, r26	; 0x13
    1296:	bc 8b       	std	Y+20, r27	; 0x14
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	69 89       	ldd	r22, Y+17	; 0x11
    12a2:	7a 89       	ldd	r23, Y+18	; 0x12
    12a4:	8b 89       	ldd	r24, Y+19	; 0x13
    12a6:	9c 89       	ldd	r25, Y+20	; 0x14
    12a8:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    12ac:	88 23       	and	r24, r24
    12ae:	2c f4       	brge	.+10     	; 0x12ba <LCD_displayChar+0x454>
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9e 8b       	std	Y+22, r25	; 0x16
    12b6:	8d 8b       	std	Y+21, r24	; 0x15
    12b8:	3f c0       	rjmp	.+126    	; 0x1338 <LCD_displayChar+0x4d2>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	69 89       	ldd	r22, Y+17	; 0x11
    12c4:	7a 89       	ldd	r23, Y+18	; 0x12
    12c6:	8b 89       	ldd	r24, Y+19	; 0x13
    12c8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ca:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    12ce:	18 16       	cp	r1, r24
    12d0:	4c f5       	brge	.+82     	; 0x1324 <LCD_displayChar+0x4be>
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	6d 85       	ldd	r22, Y+13	; 0x0d
    12dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    12de:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e0:	98 89       	ldd	r25, Y+16	; 0x10
    12e2:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9e 8b       	std	Y+22, r25	; 0x16
    12f8:	8d 8b       	std	Y+21, r24	; 0x15
    12fa:	0f c0       	rjmp	.+30     	; 0x131a <LCD_displayChar+0x4b4>
    12fc:	80 e9       	ldi	r24, 0x90	; 144
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	98 8f       	std	Y+24, r25	; 0x18
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	8f 89       	ldd	r24, Y+23	; 0x17
    1306:	98 8d       	ldd	r25, Y+24	; 0x18
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <LCD_displayChar+0x4a2>
    130c:	98 8f       	std	Y+24, r25	; 0x18
    130e:	8f 8b       	std	Y+23, r24	; 0x17
    1310:	8d 89       	ldd	r24, Y+21	; 0x15
    1312:	9e 89       	ldd	r25, Y+22	; 0x16
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	9e 8b       	std	Y+22, r25	; 0x16
    1318:	8d 8b       	std	Y+21, r24	; 0x15
    131a:	8d 89       	ldd	r24, Y+21	; 0x15
    131c:	9e 89       	ldd	r25, Y+22	; 0x16
    131e:	89 2b       	or	r24, r25
    1320:	69 f7       	brne	.-38     	; 0x12fc <LCD_displayChar+0x496>
    1322:	14 c0       	rjmp	.+40     	; 0x134c <LCD_displayChar+0x4e6>
    1324:	69 89       	ldd	r22, Y+17	; 0x11
    1326:	7a 89       	ldd	r23, Y+18	; 0x12
    1328:	8b 89       	ldd	r24, Y+19	; 0x13
    132a:	9c 89       	ldd	r25, Y+20	; 0x14
    132c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	9e 8b       	std	Y+22, r25	; 0x16
    1336:	8d 8b       	std	Y+21, r24	; 0x15
    1338:	8d 89       	ldd	r24, Y+21	; 0x15
    133a:	9e 89       	ldd	r25, Y+22	; 0x16
    133c:	9a 8f       	std	Y+26, r25	; 0x1a
    133e:	89 8f       	std	Y+25, r24	; 0x19
    1340:	89 8d       	ldd	r24, Y+25	; 0x19
    1342:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCD_displayChar+0x4de>
    1348:	9a 8f       	std	Y+26, r25	; 0x1a
    134a:	89 8f       	std	Y+25, r24	; 0x19
    134c:	00 00       	nop
    134e:	e9 96       	adiw	r28, 0x39	; 57
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <LCD_gotoRowColumn>:
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	00 d0       	rcall	.+0      	; 0x1366 <LCD_gotoRowColumn+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <LCD_gotoRowColumn+0x8>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	6c 83       	std	Y+4, r22	; 0x04
    1370:	80 e8       	ldi	r24, 0x80	; 128
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	80 ec       	ldi	r24, 0xC0	; 192
    1376:	8a 83       	std	Y+2, r24	; 0x02
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9e 01       	movw	r18, r28
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	fc 01       	movw	r30, r24
    138a:	90 81       	ld	r25, Z
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	89 0f       	add	r24, r25
    1390:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
    1394:	00 00       	nop
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <LCD_displayStringRowColumn>:
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	63 97       	sbiw	r28, 0x13	; 19
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	99 8b       	std	Y+17, r25	; 0x11
    13ba:	88 8b       	std	Y+16, r24	; 0x10
    13bc:	6a 8b       	std	Y+18, r22	; 0x12
    13be:	4b 8b       	std	Y+19, r20	; 0x13
    13c0:	6b 89       	ldd	r22, Y+19	; 0x13
    13c2:	8a 89       	ldd	r24, Y+18	; 0x12
    13c4:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_gotoRowColumn>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e2       	ldi	r26, 0x20	; 32
    13ce:	b1 e4       	ldi	r27, 0x41	; 65
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	9b 83       	std	Y+3, r25	; 0x03
    13d4:	ac 83       	std	Y+4, r26	; 0x04
    13d6:	bd 83       	std	Y+5, r27	; 0x05
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	4a e7       	ldi	r20, 0x7A	; 122
    13de:	55 e4       	ldi	r21, 0x45	; 69
    13e0:	6a 81       	ldd	r22, Y+2	; 0x02
    13e2:	7b 81       	ldd	r23, Y+3	; 0x03
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8e 83       	std	Y+6, r24	; 0x06
    13f2:	9f 83       	std	Y+7, r25	; 0x07
    13f4:	a8 87       	std	Y+8, r26	; 0x08
    13f6:	b9 87       	std	Y+9, r27	; 0x09
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e8       	ldi	r20, 0x80	; 128
    13fe:	5f e3       	ldi	r21, 0x3F	; 63
    1400:	6e 81       	ldd	r22, Y+6	; 0x06
    1402:	7f 81       	ldd	r23, Y+7	; 0x07
    1404:	88 85       	ldd	r24, Y+8	; 0x08
    1406:	99 85       	ldd	r25, Y+9	; 0x09
    1408:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <LCD_displayStringRowColumn+0x76>
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9b 87       	std	Y+11, r25	; 0x0b
    1416:	8a 87       	std	Y+10, r24	; 0x0a
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <LCD_displayStringRowColumn+0xf4>
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	57 e4       	ldi	r21, 0x47	; 71
    1422:	6e 81       	ldd	r22, Y+6	; 0x06
    1424:	7f 81       	ldd	r23, Y+7	; 0x07
    1426:	88 85       	ldd	r24, Y+8	; 0x08
    1428:	99 85       	ldd	r25, Y+9	; 0x09
    142a:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    142e:	18 16       	cp	r1, r24
    1430:	4c f5       	brge	.+82     	; 0x1484 <LCD_displayStringRowColumn+0xe0>
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e2       	ldi	r20, 0x20	; 32
    1438:	51 e4       	ldi	r21, 0x41	; 65
    143a:	6a 81       	ldd	r22, Y+2	; 0x02
    143c:	7b 81       	ldd	r23, Y+3	; 0x03
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	9d 81       	ldd	r25, Y+5	; 0x05
    1442:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9b 87       	std	Y+11, r25	; 0x0b
    1458:	8a 87       	std	Y+10, r24	; 0x0a
    145a:	0f c0       	rjmp	.+30     	; 0x147a <LCD_displayStringRowColumn+0xd6>
    145c:	80 e9       	ldi	r24, 0x90	; 144
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	9d 87       	std	Y+13, r25	; 0x0d
    1462:	8c 87       	std	Y+12, r24	; 0x0c
    1464:	8c 85       	ldd	r24, Y+12	; 0x0c
    1466:	9d 85       	ldd	r25, Y+13	; 0x0d
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <LCD_displayStringRowColumn+0xc4>
    146c:	9d 87       	std	Y+13, r25	; 0x0d
    146e:	8c 87       	std	Y+12, r24	; 0x0c
    1470:	8a 85       	ldd	r24, Y+10	; 0x0a
    1472:	9b 85       	ldd	r25, Y+11	; 0x0b
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	9b 87       	std	Y+11, r25	; 0x0b
    1478:	8a 87       	std	Y+10, r24	; 0x0a
    147a:	8a 85       	ldd	r24, Y+10	; 0x0a
    147c:	9b 85       	ldd	r25, Y+11	; 0x0b
    147e:	89 2b       	or	r24, r25
    1480:	69 f7       	brne	.-38     	; 0x145c <LCD_displayStringRowColumn+0xb8>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <LCD_displayStringRowColumn+0x108>
    1484:	6e 81       	ldd	r22, Y+6	; 0x06
    1486:	7f 81       	ldd	r23, Y+7	; 0x07
    1488:	88 85       	ldd	r24, Y+8	; 0x08
    148a:	99 85       	ldd	r25, Y+9	; 0x09
    148c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9b 87       	std	Y+11, r25	; 0x0b
    1496:	8a 87       	std	Y+10, r24	; 0x0a
    1498:	8a 85       	ldd	r24, Y+10	; 0x0a
    149a:	9b 85       	ldd	r25, Y+11	; 0x0b
    149c:	9f 87       	std	Y+15, r25	; 0x0f
    149e:	8e 87       	std	Y+14, r24	; 0x0e
    14a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <LCD_displayStringRowColumn+0x100>
    14a8:	9f 87       	std	Y+15, r25	; 0x0f
    14aa:	8e 87       	std	Y+14, r24	; 0x0e
    14ac:	19 82       	std	Y+1, r1	; 0x01
    14ae:	0e c0       	rjmp	.+28     	; 0x14cc <LCD_displayStringRowColumn+0x128>
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	28 89       	ldd	r18, Y+16	; 0x10
    14b8:	39 89       	ldd	r19, Y+17	; 0x11
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	fc 01       	movw	r30, r24
    14c0:	80 81       	ld	r24, Z
    14c2:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	8f 5f       	subi	r24, 0xFF	; 255
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	28 89       	ldd	r18, Y+16	; 0x10
    14d4:	39 89       	ldd	r19, Y+17	; 0x11
    14d6:	82 0f       	add	r24, r18
    14d8:	93 1f       	adc	r25, r19
    14da:	fc 01       	movw	r30, r24
    14dc:	80 81       	ld	r24, Z
    14de:	88 23       	and	r24, r24
    14e0:	39 f7       	brne	.-50     	; 0x14b0 <LCD_displayStringRowColumn+0x10c>
    14e2:	00 00       	nop
    14e4:	63 96       	adiw	r28, 0x13	; 19
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <emoji_sad_init>:


void emoji_sad_init(void)
{    
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	6c 97       	sbiw	r28, 0x1c	; 28
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
	 
	/* Drawing Sad emoji in LCD*/
		LCD_sendCommand(FIRST_CHAR_LOC);
    150a:	80 e4       	ldi	r24, 0x40	; 64
    150c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		LCD_displayChar(D0);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D8);
    1516:	88 e0       	ldi	r24, 0x08	; 8
    1518:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D3);
    1528:	83 e0       	ldi	r24, 0x03	; 3
    152a:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D4);
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D8);
    1534:	88 e0       	ldi	r24, 0x08	; 8
    1536:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 ea       	ldi	r26, 0xA0	; 160
    1546:	b0 e4       	ldi	r27, 0x40	; 64
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	ab 83       	std	Y+3, r26	; 0x03
    154e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4a e7       	ldi	r20, 0x7A	; 122
    1556:	55 e4       	ldi	r21, 0x45	; 69
    1558:	69 81       	ldd	r22, Y+1	; 0x01
    155a:	7a 81       	ldd	r23, Y+2	; 0x02
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	8b 8b       	std	Y+19, r24	; 0x13
    156a:	9c 8b       	std	Y+20, r25	; 0x14
    156c:	ad 8b       	std	Y+21, r26	; 0x15
    156e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	6b 89       	ldd	r22, Y+19	; 0x13
    157a:	7c 89       	ldd	r23, Y+20	; 0x14
    157c:	8d 89       	ldd	r24, Y+21	; 0x15
    157e:	9e 89       	ldd	r25, Y+22	; 0x16
    1580:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    1584:	88 23       	and	r24, r24
    1586:	2c f4       	brge	.+10     	; 0x1592 <emoji_sad_init+0x9c>
		__ticks = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	98 8f       	std	Y+24, r25	; 0x18
    158e:	8f 8b       	std	Y+23, r24	; 0x17
    1590:	3f c0       	rjmp	.+126    	; 0x1610 <emoji_sad_init+0x11a>
	else if (__tmp > 65535)
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	4f e7       	ldi	r20, 0x7F	; 127
    1598:	57 e4       	ldi	r21, 0x47	; 71
    159a:	6b 89       	ldd	r22, Y+19	; 0x13
    159c:	7c 89       	ldd	r23, Y+20	; 0x14
    159e:	8d 89       	ldd	r24, Y+21	; 0x15
    15a0:	9e 89       	ldd	r25, Y+22	; 0x16
    15a2:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	4c f5       	brge	.+82     	; 0x15fc <emoji_sad_init+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e2       	ldi	r20, 0x20	; 32
    15b0:	51 e4       	ldi	r21, 0x41	; 65
    15b2:	69 81       	ldd	r22, Y+1	; 0x01
    15b4:	7a 81       	ldd	r23, Y+2	; 0x02
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	98 8f       	std	Y+24, r25	; 0x18
    15d0:	8f 8b       	std	Y+23, r24	; 0x17
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <emoji_sad_init+0xfc>
    15d4:	80 e9       	ldi	r24, 0x90	; 144
    15d6:	91 e0       	ldi	r25, 0x01	; 1
    15d8:	9a 8f       	std	Y+26, r25	; 0x1a
    15da:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15dc:	89 8d       	ldd	r24, Y+25	; 0x19
    15de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <emoji_sad_init+0xea>
    15e4:	9a 8f       	std	Y+26, r25	; 0x1a
    15e6:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	98 8f       	std	Y+24, r25	; 0x18
    15f0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	98 8d       	ldd	r25, Y+24	; 0x18
    15f6:	89 2b       	or	r24, r25
    15f8:	69 f7       	brne	.-38     	; 0x15d4 <emoji_sad_init+0xde>
    15fa:	14 c0       	rjmp	.+40     	; 0x1624 <emoji_sad_init+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fc:	6b 89       	ldd	r22, Y+19	; 0x13
    15fe:	7c 89       	ldd	r23, Y+20	; 0x14
    1600:	8d 89       	ldd	r24, Y+21	; 0x15
    1602:	9e 89       	ldd	r25, Y+22	; 0x16
    1604:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	98 8f       	std	Y+24, r25	; 0x18
    160e:	8f 8b       	std	Y+23, r24	; 0x17
    1610:	8f 89       	ldd	r24, Y+23	; 0x17
    1612:	98 8d       	ldd	r25, Y+24	; 0x18
    1614:	9c 8f       	std	Y+28, r25	; 0x1c
    1616:	8b 8f       	std	Y+27, r24	; 0x1b
    1618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <emoji_sad_init+0x126>
    1620:	9c 8f       	std	Y+28, r25	; 0x1c
    1622:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(FIVE_MS);
		LCD_sendCommand(SECOND_CHAR_LOC);
    1624:	88 e4       	ldi	r24, 0x48	; 72
    1626:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		LCD_displayChar(D0);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D2);
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D24);
    1642:	88 e1       	ldi	r24, 0x18	; 24
    1644:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D4);
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D2);
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e2       	ldi	r26, 0x20	; 32
    1660:	b1 e4       	ldi	r27, 0x41	; 65
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	af 83       	std	Y+7, r26	; 0x07
    1668:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	4a e7       	ldi	r20, 0x7A	; 122
    1670:	55 e4       	ldi	r21, 0x45	; 69
    1672:	6d 81       	ldd	r22, Y+5	; 0x05
    1674:	7e 81       	ldd	r23, Y+6	; 0x06
    1676:	8f 81       	ldd	r24, Y+7	; 0x07
    1678:	98 85       	ldd	r25, Y+8	; 0x08
    167a:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	89 87       	std	Y+9, r24	; 0x09
    1684:	9a 87       	std	Y+10, r25	; 0x0a
    1686:	ab 87       	std	Y+11, r26	; 0x0b
    1688:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e8       	ldi	r20, 0x80	; 128
    1690:	5f e3       	ldi	r21, 0x3F	; 63
    1692:	69 85       	ldd	r22, Y+9	; 0x09
    1694:	7a 85       	ldd	r23, Y+10	; 0x0a
    1696:	8b 85       	ldd	r24, Y+11	; 0x0b
    1698:	9c 85       	ldd	r25, Y+12	; 0x0c
    169a:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <emoji_sad_init+0x1b6>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9e 87       	std	Y+14, r25	; 0x0e
    16a8:	8d 87       	std	Y+13, r24	; 0x0d
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <emoji_sad_init+0x234>
	else if (__tmp > 65535)
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	3f ef       	ldi	r19, 0xFF	; 255
    16b0:	4f e7       	ldi	r20, 0x7F	; 127
    16b2:	57 e4       	ldi	r21, 0x47	; 71
    16b4:	69 85       	ldd	r22, Y+9	; 0x09
    16b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    16b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    16bc:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <emoji_sad_init+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e2       	ldi	r20, 0x20	; 32
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	6d 81       	ldd	r22, Y+5	; 0x05
    16ce:	7e 81       	ldd	r23, Y+6	; 0x06
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
    16d2:	98 85       	ldd	r25, Y+8	; 0x08
    16d4:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9e 87       	std	Y+14, r25	; 0x0e
    16ea:	8d 87       	std	Y+13, r24	; 0x0d
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <emoji_sad_init+0x216>
    16ee:	80 e9       	ldi	r24, 0x90	; 144
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	98 8b       	std	Y+16, r25	; 0x10
    16f4:	8f 87       	std	Y+15, r24	; 0x0f
    16f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f8:	98 89       	ldd	r25, Y+16	; 0x10
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <emoji_sad_init+0x204>
    16fe:	98 8b       	std	Y+16, r25	; 0x10
    1700:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	8d 85       	ldd	r24, Y+13	; 0x0d
    1704:	9e 85       	ldd	r25, Y+14	; 0x0e
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9e 87       	std	Y+14, r25	; 0x0e
    170a:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	89 2b       	or	r24, r25
    1712:	69 f7       	brne	.-38     	; 0x16ee <emoji_sad_init+0x1f8>
		
	
	
		_delay_ms(10);
}
    1714:	14 c0       	rjmp	.+40     	; 0x173e <emoji_sad_init+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	69 85       	ldd	r22, Y+9	; 0x09
    1718:	7a 85       	ldd	r23, Y+10	; 0x0a
    171a:	8b 85       	ldd	r24, Y+11	; 0x0b
    171c:	9c 85       	ldd	r25, Y+12	; 0x0c
    171e:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9e 87       	std	Y+14, r25	; 0x0e
    1728:	8d 87       	std	Y+13, r24	; 0x0d
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	9a 8b       	std	Y+18, r25	; 0x12
    1730:	89 8b       	std	Y+17, r24	; 0x11
    1732:	89 89       	ldd	r24, Y+17	; 0x11
    1734:	9a 89       	ldd	r25, Y+18	; 0x12
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <emoji_sad_init+0x240>
    173a:	9a 8b       	std	Y+18, r25	; 0x12
    173c:	89 8b       	std	Y+17, r24	; 0x11
    173e:	00 00       	nop
    1740:	6c 96       	adiw	r28, 0x1c	; 28
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <emoji_happy_init>:

void emoji_happy_init(void)
{    /* Drawing happy emoji in LCD */
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	6c 97       	sbiw	r28, 0x1c	; 28
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e0       	ldi	r26, 0x00	; 0
    176c:	b0 e4       	ldi	r27, 0x40	; 64
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	ab 83       	std	Y+3, r26	; 0x03
    1774:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a e7       	ldi	r20, 0x7A	; 122
    177c:	55 e4       	ldi	r21, 0x45	; 69
    177e:	69 81       	ldd	r22, Y+1	; 0x01
    1780:	7a 81       	ldd	r23, Y+2	; 0x02
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8b 8b       	std	Y+19, r24	; 0x13
    1790:	9c 8b       	std	Y+20, r25	; 0x14
    1792:	ad 8b       	std	Y+21, r26	; 0x15
    1794:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	6b 89       	ldd	r22, Y+19	; 0x13
    17a0:	7c 89       	ldd	r23, Y+20	; 0x14
    17a2:	8d 89       	ldd	r24, Y+21	; 0x15
    17a4:	9e 89       	ldd	r25, Y+22	; 0x16
    17a6:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <emoji_happy_init+0x66>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	98 8f       	std	Y+24, r25	; 0x18
    17b4:	8f 8b       	std	Y+23, r24	; 0x17
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <emoji_happy_init+0xe4>
	else if (__tmp > 65535)
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	6b 89       	ldd	r22, Y+19	; 0x13
    17c2:	7c 89       	ldd	r23, Y+20	; 0x14
    17c4:	8d 89       	ldd	r24, Y+21	; 0x15
    17c6:	9e 89       	ldd	r25, Y+22	; 0x16
    17c8:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <emoji_happy_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	69 81       	ldd	r22, Y+1	; 0x01
    17da:	7a 81       	ldd	r23, Y+2	; 0x02
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	98 8f       	std	Y+24, r25	; 0x18
    17f6:	8f 8b       	std	Y+23, r24	; 0x17
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <emoji_happy_init+0xc6>
    17fa:	80 e9       	ldi	r24, 0x90	; 144
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1800:	89 8f       	std	Y+25, r24	; 0x19
    1802:	89 8d       	ldd	r24, Y+25	; 0x19
    1804:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <emoji_happy_init+0xb4>
    180a:	9a 8f       	std	Y+26, r25	; 0x1a
    180c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	8f 89       	ldd	r24, Y+23	; 0x17
    1810:	98 8d       	ldd	r25, Y+24	; 0x18
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	98 8f       	std	Y+24, r25	; 0x18
    1816:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	8f 89       	ldd	r24, Y+23	; 0x17
    181a:	98 8d       	ldd	r25, Y+24	; 0x18
    181c:	89 2b       	or	r24, r25
    181e:	69 f7       	brne	.-38     	; 0x17fa <emoji_happy_init+0xa8>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <emoji_happy_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	6b 89       	ldd	r22, Y+19	; 0x13
    1824:	7c 89       	ldd	r23, Y+20	; 0x14
    1826:	8d 89       	ldd	r24, Y+21	; 0x15
    1828:	9e 89       	ldd	r25, Y+22	; 0x16
    182a:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	98 8f       	std	Y+24, r25	; 0x18
    1834:	8f 8b       	std	Y+23, r24	; 0x17
    1836:	8f 89       	ldd	r24, Y+23	; 0x17
    1838:	98 8d       	ldd	r25, Y+24	; 0x18
    183a:	9c 8f       	std	Y+28, r25	; 0x1c
    183c:	8b 8f       	std	Y+27, r24	; 0x1b
    183e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1840:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <emoji_happy_init+0xf0>
    1846:	9c 8f       	std	Y+28, r25	; 0x1c
    1848:	8b 8f       	std	Y+27, r24	; 0x1b
		Delay(TWO_MS);
		LCD_sendCommand(FIRST_CHAR_LOC);
    184a:	80 e4       	ldi	r24, 0x40	; 64
    184c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		LCD_displayChar(D0);
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D4);
    1856:	84 e0       	ldi	r24, 0x04	; 4
    1858:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D8);
    1868:	88 e0       	ldi	r24, 0x08	; 8
    186a:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D4);
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D3);
    1874:	83 e0       	ldi	r24, 0x03	; 3
    1876:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 ea       	ldi	r26, 0xA0	; 160
    1886:	b0 e4       	ldi	r27, 0x40	; 64
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	af 83       	std	Y+7, r26	; 0x07
    188e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a e7       	ldi	r20, 0x7A	; 122
    1896:	55 e4       	ldi	r21, 0x45	; 69
    1898:	6d 81       	ldd	r22, Y+5	; 0x05
    189a:	7e 81       	ldd	r23, Y+6	; 0x06
    189c:	8f 81       	ldd	r24, Y+7	; 0x07
    189e:	98 85       	ldd	r25, Y+8	; 0x08
    18a0:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	89 87       	std	Y+9, r24	; 0x09
    18aa:	9a 87       	std	Y+10, r25	; 0x0a
    18ac:	ab 87       	std	Y+11, r26	; 0x0b
    18ae:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e8       	ldi	r20, 0x80	; 128
    18b6:	5f e3       	ldi	r21, 0x3F	; 63
    18b8:	69 85       	ldd	r22, Y+9	; 0x09
    18ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    18bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    18be:	9c 85       	ldd	r25, Y+12	; 0x0c
    18c0:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <emoji_happy_init+0x180>
		__ticks = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9e 87       	std	Y+14, r25	; 0x0e
    18ce:	8d 87       	std	Y+13, r24	; 0x0d
    18d0:	3f c0       	rjmp	.+126    	; 0x1950 <emoji_happy_init+0x1fe>
	else if (__tmp > 65535)
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	3f ef       	ldi	r19, 0xFF	; 255
    18d6:	4f e7       	ldi	r20, 0x7F	; 127
    18d8:	57 e4       	ldi	r21, 0x47	; 71
    18da:	69 85       	ldd	r22, Y+9	; 0x09
    18dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    18de:	8b 85       	ldd	r24, Y+11	; 0x0b
    18e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    18e2:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	4c f5       	brge	.+82     	; 0x193c <emoji_happy_init+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	6d 81       	ldd	r22, Y+5	; 0x05
    18f4:	7e 81       	ldd	r23, Y+6	; 0x06
    18f6:	8f 81       	ldd	r24, Y+7	; 0x07
    18f8:	98 85       	ldd	r25, Y+8	; 0x08
    18fa:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9e 87       	std	Y+14, r25	; 0x0e
    1910:	8d 87       	std	Y+13, r24	; 0x0d
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <emoji_happy_init+0x1e0>
    1914:	80 e9       	ldi	r24, 0x90	; 144
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	98 8b       	std	Y+16, r25	; 0x10
    191a:	8f 87       	std	Y+15, r24	; 0x0f
    191c:	8f 85       	ldd	r24, Y+15	; 0x0f
    191e:	98 89       	ldd	r25, Y+16	; 0x10
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <emoji_happy_init+0x1ce>
    1924:	98 8b       	std	Y+16, r25	; 0x10
    1926:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1928:	8d 85       	ldd	r24, Y+13	; 0x0d
    192a:	9e 85       	ldd	r25, Y+14	; 0x0e
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	9e 87       	std	Y+14, r25	; 0x0e
    1930:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1932:	8d 85       	ldd	r24, Y+13	; 0x0d
    1934:	9e 85       	ldd	r25, Y+14	; 0x0e
    1936:	89 2b       	or	r24, r25
    1938:	69 f7       	brne	.-38     	; 0x1914 <emoji_happy_init+0x1c2>
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <emoji_happy_init+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193c:	69 85       	ldd	r22, Y+9	; 0x09
    193e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1940:	8b 85       	ldd	r24, Y+11	; 0x0b
    1942:	9c 85       	ldd	r25, Y+12	; 0x0c
    1944:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9e 87       	std	Y+14, r25	; 0x0e
    194e:	8d 87       	std	Y+13, r24	; 0x0d
    1950:	8d 85       	ldd	r24, Y+13	; 0x0d
    1952:	9e 85       	ldd	r25, Y+14	; 0x0e
    1954:	9a 8b       	std	Y+18, r25	; 0x12
    1956:	89 8b       	std	Y+17, r24	; 0x11
    1958:	89 89       	ldd	r24, Y+17	; 0x11
    195a:	9a 89       	ldd	r25, Y+18	; 0x12
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <emoji_happy_init+0x20a>
    1960:	9a 8b       	std	Y+18, r25	; 0x12
    1962:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(FIVE_MS);
		LCD_sendCommand(SECOND_CHAR_LOC);
    1964:	88 e4       	ldi	r24, 0x48	; 72
    1966:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		LCD_displayChar(D0);
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D4);
    1970:	84 e0       	ldi	r24, 0x04	; 4
    1972:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D2);
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D4);
    1988:	84 e0       	ldi	r24, 0x04	; 4
    198a:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D24);
    198e:	88 e1       	ldi	r24, 0x18	; 24
    1990:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		LCD_displayChar(D0);
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		
}
    199a:	00 00       	nop
    199c:	6c 96       	adiw	r28, 0x1c	; 28
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <LCD_General_Question>:

void LCD_General_Question(void)
{   uint8 count_right = LOW;    /* init counter for right answers with zero */ 
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	c6 53       	subi	r28, 0x36	; 54
    19bc:	d1 40       	sbci	r29, 0x01	; 1
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	19 82       	std	Y+1, r1	; 0x01
	uint8 count_wronge = LOW;   /* init counter for wrong answers with zero */
    19ca:	1a 82       	std	Y+2, r1	; 0x02
	/* first Question */
	LCD_displayStringRowColumn("7asn mzakr 8051",LOW,LOW);  /* 1st line in LCD */
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	80 e6       	ldi	r24, 0x60	; 96
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("men mazidi?",HIGH,LOW);    /* 2nd line in LCD */
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	80 e7       	ldi	r24, 0x70	; 112
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
    19e4:	9e 01       	movw	r18, r28
    19e6:	29 5a       	subi	r18, 0xA9	; 169
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	aa ef       	ldi	r26, 0xFA	; 250
    19f0:	b4 e4       	ldi	r27, 0x44	; 68
    19f2:	f9 01       	movw	r30, r18
    19f4:	80 83       	st	Z, r24
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	a2 83       	std	Z+2, r26	; 0x02
    19fa:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	8e 01       	movw	r16, r28
    19fe:	05 5a       	subi	r16, 0xA5	; 165
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	ce 01       	movw	r24, r28
    1a04:	89 5a       	subi	r24, 0xA9	; 169
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a e7       	ldi	r20, 0x7A	; 122
    1a0e:	55 e4       	ldi	r21, 0x45	; 69
    1a10:	fc 01       	movw	r30, r24
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	f8 01       	movw	r30, r16
    1a24:	80 83       	st	Z, r24
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	a2 83       	std	Z+2, r26	; 0x02
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	85 5a       	subi	r24, 0xA5	; 165
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    1a48:	88 23       	and	r24, r24
    1a4a:	4c f4       	brge	.+18     	; 0x1a5e <LCD_General_Question+0xb0>
		__ticks = 1;
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	81 5a       	subi	r24, 0xA1	; 161
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	21 e0       	ldi	r18, 0x01	; 1
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	fc 01       	movw	r30, r24
    1a58:	31 83       	std	Z+1, r19	; 0x01
    1a5a:	20 83       	st	Z, r18
    1a5c:	6d c0       	rjmp	.+218    	; 0x1b38 <LCD_General_Question+0x18a>
	else if (__tmp > 65535)
    1a5e:	ce 01       	movw	r24, r28
    1a60:	85 5a       	subi	r24, 0xA5	; 165
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	57 e4       	ldi	r21, 0x47	; 71
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	0c f0       	brlt	.+2      	; 0x1a80 <LCD_General_Question+0xd2>
    1a7e:	4a c0       	rjmp	.+148    	; 0x1b14 <LCD_General_Question+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	ce 01       	movw	r24, r28
    1a82:	89 5a       	subi	r24, 0xA9	; 169
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e2       	ldi	r20, 0x20	; 32
    1a8c:	51 e4       	ldi	r21, 0x41	; 65
    1a8e:	fc 01       	movw	r30, r24
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	01 5a       	subi	r16, 0xA1	; 161
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	24 c0       	rjmp	.+72     	; 0x1b02 <LCD_General_Question+0x154>
    1aba:	ce 01       	movw	r24, r28
    1abc:	8f 59       	subi	r24, 0x9F	; 159
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	20 e9       	ldi	r18, 0x90	; 144
    1ac2:	31 e0       	ldi	r19, 0x01	; 1
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	31 83       	std	Z+1, r19	; 0x01
    1ac8:	20 83       	st	Z, r18
    1aca:	ce 01       	movw	r24, r28
    1acc:	8f 59       	subi	r24, 0x9F	; 159
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_General_Question+0x128>
    1ada:	9e 01       	movw	r18, r28
    1adc:	2f 59       	subi	r18, 0x9F	; 159
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	81 5a       	subi	r24, 0xA1	; 161
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	9e 01       	movw	r18, r28
    1aee:	21 5a       	subi	r18, 0xA1	; 161
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	f9 01       	movw	r30, r18
    1af4:	20 81       	ld	r18, Z
    1af6:	31 81       	ldd	r19, Z+1	; 0x01
    1af8:	21 50       	subi	r18, 0x01	; 1
    1afa:	31 09       	sbc	r19, r1
    1afc:	fc 01       	movw	r30, r24
    1afe:	31 83       	std	Z+1, r19	; 0x01
    1b00:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	ce 01       	movw	r24, r28
    1b04:	81 5a       	subi	r24, 0xA1	; 161
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	fc 01       	movw	r30, r24
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	89 2b       	or	r24, r25
    1b10:	a1 f6       	brne	.-88     	; 0x1aba <LCD_General_Question+0x10c>
    1b12:	2c c0       	rjmp	.+88     	; 0x1b6c <LCD_General_Question+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	8e 01       	movw	r16, r28
    1b16:	01 5a       	subi	r16, 0xA1	; 161
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	85 5a       	subi	r24, 0xA5	; 165
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	fc 01       	movw	r30, r24
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	f8 01       	movw	r30, r16
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	ce 01       	movw	r24, r28
    1b3a:	8d 59       	subi	r24, 0x9D	; 157
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	9e 01       	movw	r18, r28
    1b40:	21 5a       	subi	r18, 0xA1	; 161
    1b42:	3f 4f       	sbci	r19, 0xFF	; 255
    1b44:	f9 01       	movw	r30, r18
    1b46:	20 81       	ld	r18, Z
    1b48:	31 81       	ldd	r19, Z+1	; 0x01
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	31 83       	std	Z+1, r19	; 0x01
    1b4e:	20 83       	st	Z, r18
    1b50:	ce 01       	movw	r24, r28
    1b52:	8d 59       	subi	r24, 0x9D	; 157
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	fc 01       	movw	r30, r24
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_General_Question+0x1ae>
    1b60:	9e 01       	movw	r18, r28
    1b62:	2d 59       	subi	r18, 0x9D	; 157
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	f9 01       	movw	r30, r18
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
	Delay(TWO_THOUSAND_MS);
	while(!(DIO_ReadPin(BUTTON0)) && !(DIO_ReadPin(BUTTON1)) );  /* pulling two buttons until one pressed */
    1b6c:	00 00       	nop
    1b6e:	8a e0       	ldi	r24, 0x0A	; 10
    1b70:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    1b74:	88 23       	and	r24, r24
    1b76:	29 f4       	brne	.+10     	; 0x1b82 <LCD_General_Question+0x1d4>
    1b78:	84 e1       	ldi	r24, 0x14	; 20
    1b7a:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    1b7e:	88 23       	and	r24, r24
    1b80:	b1 f3       	breq	.-20     	; 0x1b6e <LCD_General_Question+0x1c0>
	if(!(DIO_ReadPin(BUTTON0))) { /* if answer is wrong show sad emoji */
    1b82:	8a e0       	ldi	r24, 0x0A	; 10
    1b84:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    1b88:	88 23       	and	r24, r24
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <LCD_General_Question+0x1e0>
    1b8c:	ca c0       	rjmp	.+404    	; 0x1d22 <LCD_General_Question+0x374>
                                LCD_sendCommand(CLEAR_SCREEN);
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
								emoji_sad_init();
    1b94:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <emoji_sad_init>
								LCD_sendCommand(FIRST_LINE);
    1b98:	80 e8       	ldi	r24, 0x80	; 128
    1b9a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
								LCD_displayChar(LOW);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
								LCD_displayChar(HIGH);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e8       	ldi	r25, 0x80	; 128
    1bae:	ab e3       	ldi	r26, 0x3B	; 59
    1bb0:	b5 e4       	ldi	r27, 0x45	; 69
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	ad 83       	std	Y+5, r26	; 0x05
    1bb8:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bba:	8e 01       	movw	r16, r28
    1bbc:	0b 59       	subi	r16, 0x9B	; 155
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a e7       	ldi	r20, 0x7A	; 122
    1bc6:	55 e4       	ldi	r21, 0x45	; 69
    1bc8:	6b 81       	ldd	r22, Y+3	; 0x03
    1bca:	7c 81       	ldd	r23, Y+4	; 0x04
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	f8 01       	movw	r30, r16
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be2:	ce 01       	movw	r24, r28
    1be4:	8b 59       	subi	r24, 0x9B	; 155
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e8       	ldi	r20, 0x80	; 128
    1bee:	5f e3       	ldi	r21, 0x3F	; 63
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	4c f4       	brge	.+18     	; 0x1c14 <LCD_General_Question+0x266>
		__ticks = 1;
    1c02:	ce 01       	movw	r24, r28
    1c04:	87 59       	subi	r24, 0x97	; 151
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	21 e0       	ldi	r18, 0x01	; 1
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	31 83       	std	Z+1, r19	; 0x01
    1c10:	20 83       	st	Z, r18
    1c12:	69 c0       	rjmp	.+210    	; 0x1ce6 <LCD_General_Question+0x338>
	else if (__tmp > 65535)
    1c14:	ce 01       	movw	r24, r28
    1c16:	8b 59       	subi	r24, 0x9B	; 155
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	fc 01       	movw	r30, r24
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	0c f0       	brlt	.+2      	; 0x1c36 <LCD_General_Question+0x288>
    1c34:	46 c0       	rjmp	.+140    	; 0x1cc2 <LCD_General_Question+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e2       	ldi	r20, 0x20	; 32
    1c3c:	51 e4       	ldi	r21, 0x41	; 65
    1c3e:	6b 81       	ldd	r22, Y+3	; 0x03
    1c40:	7c 81       	ldd	r23, Y+4	; 0x04
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	9e 81       	ldd	r25, Y+6	; 0x06
    1c46:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8e 01       	movw	r16, r28
    1c50:	07 59       	subi	r16, 0x97	; 151
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	f8 01       	movw	r30, r16
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
    1c66:	24 c0       	rjmp	.+72     	; 0x1cb0 <LCD_General_Question+0x302>
    1c68:	ce 01       	movw	r24, r28
    1c6a:	85 59       	subi	r24, 0x95	; 149
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	20 e9       	ldi	r18, 0x90	; 144
    1c70:	31 e0       	ldi	r19, 0x01	; 1
    1c72:	fc 01       	movw	r30, r24
    1c74:	31 83       	std	Z+1, r19	; 0x01
    1c76:	20 83       	st	Z, r18
    1c78:	ce 01       	movw	r24, r28
    1c7a:	85 59       	subi	r24, 0x95	; 149
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	fc 01       	movw	r30, r24
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_General_Question+0x2d6>
    1c88:	9e 01       	movw	r18, r28
    1c8a:	25 59       	subi	r18, 0x95	; 149
    1c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8e:	f9 01       	movw	r30, r18
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	ce 01       	movw	r24, r28
    1c96:	87 59       	subi	r24, 0x97	; 151
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	9e 01       	movw	r18, r28
    1c9c:	27 59       	subi	r18, 0x97	; 151
    1c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca0:	f9 01       	movw	r30, r18
    1ca2:	20 81       	ld	r18, Z
    1ca4:	31 81       	ldd	r19, Z+1	; 0x01
    1ca6:	21 50       	subi	r18, 0x01	; 1
    1ca8:	31 09       	sbc	r19, r1
    1caa:	fc 01       	movw	r30, r24
    1cac:	31 83       	std	Z+1, r19	; 0x01
    1cae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	87 59       	subi	r24, 0x97	; 151
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	89 2b       	or	r24, r25
    1cbe:	a1 f6       	brne	.-88     	; 0x1c68 <LCD_General_Question+0x2ba>
    1cc0:	2c c0       	rjmp	.+88     	; 0x1d1a <LCD_General_Question+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc2:	8e 01       	movw	r16, r28
    1cc4:	07 59       	subi	r16, 0x97	; 151
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	ce 01       	movw	r24, r28
    1cca:	8b 59       	subi	r24, 0x9B	; 155
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	fc 01       	movw	r30, r24
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	83 59       	subi	r24, 0x93	; 147
    1cea:	9f 4f       	sbci	r25, 0xFF	; 255
    1cec:	9e 01       	movw	r18, r28
    1cee:	27 59       	subi	r18, 0x97	; 151
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	f9 01       	movw	r30, r18
    1cf4:	20 81       	ld	r18, Z
    1cf6:	31 81       	ldd	r19, Z+1	; 0x01
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	31 83       	std	Z+1, r19	; 0x01
    1cfc:	20 83       	st	Z, r18
    1cfe:	ce 01       	movw	r24, r28
    1d00:	83 59       	subi	r24, 0x93	; 147
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	fc 01       	movw	r30, r24
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_General_Question+0x35c>
    1d0e:	9e 01       	movw	r18, r28
    1d10:	23 59       	subi	r18, 0x93	; 147
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	f9 01       	movw	r30, r18
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	80 83       	st	Z, r24
								Delay(THREE_THOUSAND_MS);
								count_wronge++;  /* increment counter of wrong answers */
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
    1d20:	c9 c0       	rjmp	.+402    	; 0x1eb4 <LCD_General_Question+0x506>
						}
  else {  LCD_sendCommand(CLEAR_SCREEN);  /*if answer is right show happy emoji */
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		  emoji_happy_init();
    1d28:	0e 94 a9 0b 	call	0x1752	; 0x1752 <emoji_happy_init>
	      LCD_sendCommand(FIRST_LINE);
    1d2c:	80 e8       	ldi	r24, 0x80	; 128
    1d2e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	      LCD_displayChar(LOW);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
	      LCD_displayChar(HIGH);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e8       	ldi	r25, 0x80	; 128
    1d42:	ab e3       	ldi	r26, 0x3B	; 59
    1d44:	b5 e4       	ldi	r27, 0x45	; 69
    1d46:	8f 83       	std	Y+7, r24	; 0x07
    1d48:	98 87       	std	Y+8, r25	; 0x08
    1d4a:	a9 87       	std	Y+9, r26	; 0x09
    1d4c:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	8e 01       	movw	r16, r28
    1d50:	01 59       	subi	r16, 0x91	; 145
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a e7       	ldi	r20, 0x7A	; 122
    1d5a:	55 e4       	ldi	r21, 0x45	; 69
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d76:	ce 01       	movw	r24, r28
    1d78:	81 59       	subi	r24, 0x91	; 145
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	fc 01       	movw	r30, r24
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	4c f4       	brge	.+18     	; 0x1da8 <LCD_General_Question+0x3fa>
		__ticks = 1;
    1d96:	ce 01       	movw	r24, r28
    1d98:	8d 58       	subi	r24, 0x8D	; 141
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	21 e0       	ldi	r18, 0x01	; 1
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	fc 01       	movw	r30, r24
    1da2:	31 83       	std	Z+1, r19	; 0x01
    1da4:	20 83       	st	Z, r18
    1da6:	69 c0       	rjmp	.+210    	; 0x1e7a <LCD_General_Question+0x4cc>
	else if (__tmp > 65535)
    1da8:	ce 01       	movw	r24, r28
    1daa:	81 59       	subi	r24, 0x91	; 145
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	fc 01       	movw	r30, r24
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    1dc4:	18 16       	cp	r1, r24
    1dc6:	0c f0       	brlt	.+2      	; 0x1dca <LCD_General_Question+0x41c>
    1dc8:	46 c0       	rjmp	.+140    	; 0x1e56 <LCD_General_Question+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8e 01       	movw	r16, r28
    1de4:	0d 58       	subi	r16, 0x8D	; 141
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	f8 01       	movw	r30, r16
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
    1dfa:	24 c0       	rjmp	.+72     	; 0x1e44 <LCD_General_Question+0x496>
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	8b 58       	subi	r24, 0x8B	; 139
    1e00:	9f 4f       	sbci	r25, 0xFF	; 255
    1e02:	20 e9       	ldi	r18, 0x90	; 144
    1e04:	31 e0       	ldi	r19, 0x01	; 1
    1e06:	fc 01       	movw	r30, r24
    1e08:	31 83       	std	Z+1, r19	; 0x01
    1e0a:	20 83       	st	Z, r18
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	8b 58       	subi	r24, 0x8B	; 139
    1e10:	9f 4f       	sbci	r25, 0xFF	; 255
    1e12:	fc 01       	movw	r30, r24
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_General_Question+0x46a>
    1e1c:	9e 01       	movw	r18, r28
    1e1e:	2b 58       	subi	r18, 0x8B	; 139
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	f9 01       	movw	r30, r18
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	ce 01       	movw	r24, r28
    1e2a:	8d 58       	subi	r24, 0x8D	; 141
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	9e 01       	movw	r18, r28
    1e30:	2d 58       	subi	r18, 0x8D	; 141
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	f9 01       	movw	r30, r18
    1e36:	20 81       	ld	r18, Z
    1e38:	31 81       	ldd	r19, Z+1	; 0x01
    1e3a:	21 50       	subi	r18, 0x01	; 1
    1e3c:	31 09       	sbc	r19, r1
    1e3e:	fc 01       	movw	r30, r24
    1e40:	31 83       	std	Z+1, r19	; 0x01
    1e42:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	ce 01       	movw	r24, r28
    1e46:	8d 58       	subi	r24, 0x8D	; 141
    1e48:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	89 2b       	or	r24, r25
    1e52:	a1 f6       	brne	.-88     	; 0x1dfc <LCD_General_Question+0x44e>
    1e54:	2c c0       	rjmp	.+88     	; 0x1eae <LCD_General_Question+0x500>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	8e 01       	movw	r16, r28
    1e58:	0d 58       	subi	r16, 0x8D	; 141
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	81 59       	subi	r24, 0x91	; 145
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	fc 01       	movw	r30, r24
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	f8 01       	movw	r30, r16
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	89 58       	subi	r24, 0x89	; 137
    1e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e80:	9e 01       	movw	r18, r28
    1e82:	2d 58       	subi	r18, 0x8D	; 141
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	f9 01       	movw	r30, r18
    1e88:	20 81       	ld	r18, Z
    1e8a:	31 81       	ldd	r19, Z+1	; 0x01
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	31 83       	std	Z+1, r19	; 0x01
    1e90:	20 83       	st	Z, r18
    1e92:	ce 01       	movw	r24, r28
    1e94:	89 58       	subi	r24, 0x89	; 137
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	fc 01       	movw	r30, r24
    1e9a:	80 81       	ld	r24, Z
    1e9c:	91 81       	ldd	r25, Z+1	; 0x01
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LCD_General_Question+0x4f0>
    1ea2:	9e 01       	movw	r18, r28
    1ea4:	29 58       	subi	r18, 0x89	; 137
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	f9 01       	movw	r30, r18
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
	      Delay(THREE_THOUSAND_MS);
		  count_right++;  /*increment counter of right answers */
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	   }
/* second Question */
   LCD_sendCommand(CLEAR_SCREEN);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	aa e7       	ldi	r26, 0x7A	; 122
    1ec0:	b4 e4       	ldi	r27, 0x44	; 68
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	9c 8b       	std	Y+20, r25	; 0x14
    1ec6:	ad 8b       	std	Y+21, r26	; 0x15
    1ec8:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	8e 01       	movw	r16, r28
    1ecc:	0d 57       	subi	r16, 0x7D	; 125
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a e7       	ldi	r20, 0x7A	; 122
    1ed6:	55 e4       	ldi	r21, 0x45	; 69
    1ed8:	6b 89       	ldd	r22, Y+19	; 0x13
    1eda:	7c 89       	ldd	r23, Y+20	; 0x14
    1edc:	8d 89       	ldd	r24, Y+21	; 0x15
    1ede:	9e 89       	ldd	r25, Y+22	; 0x16
    1ee0:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	f8 01       	movw	r30, r16
    1eea:	80 83       	st	Z, r24
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	a2 83       	std	Z+2, r26	; 0x02
    1ef0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	8d 57       	subi	r24, 0x7D	; 125
    1ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	fc 01       	movw	r30, r24
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    1f0e:	88 23       	and	r24, r24
    1f10:	4c f4       	brge	.+18     	; 0x1f24 <LCD_General_Question+0x576>
		__ticks = 1;
    1f12:	ce 01       	movw	r24, r28
    1f14:	89 57       	subi	r24, 0x79	; 121
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	21 e0       	ldi	r18, 0x01	; 1
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	31 83       	std	Z+1, r19	; 0x01
    1f20:	20 83       	st	Z, r18
    1f22:	69 c0       	rjmp	.+210    	; 0x1ff6 <LCD_General_Question+0x648>
	else if (__tmp > 65535)
    1f24:	ce 01       	movw	r24, r28
    1f26:	8d 57       	subi	r24, 0x7D	; 125
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	fc 01       	movw	r30, r24
    1f34:	60 81       	ld	r22, Z
    1f36:	71 81       	ldd	r23, Z+1	; 0x01
    1f38:	82 81       	ldd	r24, Z+2	; 0x02
    1f3a:	93 81       	ldd	r25, Z+3	; 0x03
    1f3c:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	0c f0       	brlt	.+2      	; 0x1f46 <LCD_General_Question+0x598>
    1f44:	46 c0       	rjmp	.+140    	; 0x1fd2 <LCD_General_Question+0x624>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	6b 89       	ldd	r22, Y+19	; 0x13
    1f50:	7c 89       	ldd	r23, Y+20	; 0x14
    1f52:	8d 89       	ldd	r24, Y+21	; 0x15
    1f54:	9e 89       	ldd	r25, Y+22	; 0x16
    1f56:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	8e 01       	movw	r16, r28
    1f60:	09 57       	subi	r16, 0x79	; 121
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	f8 01       	movw	r30, r16
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	24 c0       	rjmp	.+72     	; 0x1fc0 <LCD_General_Question+0x612>
    1f78:	ce 01       	movw	r24, r28
    1f7a:	87 57       	subi	r24, 0x77	; 119
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	20 e9       	ldi	r18, 0x90	; 144
    1f80:	31 e0       	ldi	r19, 0x01	; 1
    1f82:	fc 01       	movw	r30, r24
    1f84:	31 83       	std	Z+1, r19	; 0x01
    1f86:	20 83       	st	Z, r18
    1f88:	ce 01       	movw	r24, r28
    1f8a:	87 57       	subi	r24, 0x77	; 119
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	fc 01       	movw	r30, r24
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_General_Question+0x5e6>
    1f98:	9e 01       	movw	r18, r28
    1f9a:	27 57       	subi	r18, 0x77	; 119
    1f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9e:	f9 01       	movw	r30, r18
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	89 57       	subi	r24, 0x79	; 121
    1fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1faa:	9e 01       	movw	r18, r28
    1fac:	29 57       	subi	r18, 0x79	; 121
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	20 81       	ld	r18, Z
    1fb4:	31 81       	ldd	r19, Z+1	; 0x01
    1fb6:	21 50       	subi	r18, 0x01	; 1
    1fb8:	31 09       	sbc	r19, r1
    1fba:	fc 01       	movw	r30, r24
    1fbc:	31 83       	std	Z+1, r19	; 0x01
    1fbe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	89 57       	subi	r24, 0x79	; 121
    1fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	89 2b       	or	r24, r25
    1fce:	a1 f6       	brne	.-88     	; 0x1f78 <LCD_General_Question+0x5ca>
    1fd0:	2c c0       	rjmp	.+88     	; 0x202a <LCD_General_Question+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	8e 01       	movw	r16, r28
    1fd4:	09 57       	subi	r16, 0x79	; 121
    1fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd8:	ce 01       	movw	r24, r28
    1fda:	8d 57       	subi	r24, 0x7D	; 125
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	fc 01       	movw	r30, r24
    1fe0:	60 81       	ld	r22, Z
    1fe2:	71 81       	ldd	r23, Z+1	; 0x01
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	85 57       	subi	r24, 0x75	; 117
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	9e 01       	movw	r18, r28
    1ffe:	29 57       	subi	r18, 0x79	; 121
    2000:	3f 4f       	sbci	r19, 0xFF	; 255
    2002:	f9 01       	movw	r30, r18
    2004:	20 81       	ld	r18, Z
    2006:	31 81       	ldd	r19, Z+1	; 0x01
    2008:	fc 01       	movw	r30, r24
    200a:	31 83       	std	Z+1, r19	; 0x01
    200c:	20 83       	st	Z, r18
    200e:	ce 01       	movw	r24, r28
    2010:	85 57       	subi	r24, 0x75	; 117
    2012:	9f 4f       	sbci	r25, 0xFF	; 255
    2014:	fc 01       	movw	r30, r24
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_General_Question+0x66c>
    201e:	9e 01       	movw	r18, r28
    2020:	25 57       	subi	r18, 0x75	; 117
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	f9 01       	movw	r30, r18
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
   Delay(ONE_THOUSAND_MS);
   	LCD_displayStringRowColumn("HONGKONG is",LOW,LOW);           /* 1st line in LCD */
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	8c e7       	ldi	r24, 0x7C	; 124
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
   	LCD_displayStringRowColumn("Capital of China?",HIGH,LOW);   /* 2nd line in LCD */  /*beijing*/
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	88 e8       	ldi	r24, 0x88	; 136
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	aa ef       	ldi	r26, 0xFA	; 250
    2048:	b4 e4       	ldi	r27, 0x44	; 68
    204a:	8b 87       	std	Y+11, r24	; 0x0b
    204c:	9c 87       	std	Y+12, r25	; 0x0c
    204e:	ad 87       	std	Y+13, r26	; 0x0d
    2050:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2052:	8e 01       	movw	r16, r28
    2054:	07 58       	subi	r16, 0x87	; 135
    2056:	1f 4f       	sbci	r17, 0xFF	; 255
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a e7       	ldi	r20, 0x7A	; 122
    205e:	55 e4       	ldi	r21, 0x45	; 69
    2060:	6b 85       	ldd	r22, Y+11	; 0x0b
    2062:	7c 85       	ldd	r23, Y+12	; 0x0c
    2064:	8d 85       	ldd	r24, Y+13	; 0x0d
    2066:	9e 85       	ldd	r25, Y+14	; 0x0e
    2068:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	80 83       	st	Z, r24
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	a2 83       	std	Z+2, r26	; 0x02
    2078:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    207a:	ce 01       	movw	r24, r28
    207c:	87 58       	subi	r24, 0x87	; 135
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e8       	ldi	r20, 0x80	; 128
    2086:	5f e3       	ldi	r21, 0x3F	; 63
    2088:	fc 01       	movw	r30, r24
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    2096:	88 23       	and	r24, r24
    2098:	4c f4       	brge	.+18     	; 0x20ac <LCD_General_Question+0x6fe>
		__ticks = 1;
    209a:	ce 01       	movw	r24, r28
    209c:	83 58       	subi	r24, 0x83	; 131
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	21 e0       	ldi	r18, 0x01	; 1
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	fc 01       	movw	r30, r24
    20a6:	31 83       	std	Z+1, r19	; 0x01
    20a8:	20 83       	st	Z, r18
    20aa:	69 c0       	rjmp	.+210    	; 0x217e <LCD_General_Question+0x7d0>
	else if (__tmp > 65535)
    20ac:	ce 01       	movw	r24, r28
    20ae:	87 58       	subi	r24, 0x87	; 135
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	fc 01       	movw	r30, r24
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	82 81       	ldd	r24, Z+2	; 0x02
    20c2:	93 81       	ldd	r25, Z+3	; 0x03
    20c4:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    20c8:	18 16       	cp	r1, r24
    20ca:	0c f0       	brlt	.+2      	; 0x20ce <LCD_General_Question+0x720>
    20cc:	46 c0       	rjmp	.+140    	; 0x215a <LCD_General_Question+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20de:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8e 01       	movw	r16, r28
    20e8:	03 58       	subi	r16, 0x83	; 131
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	f8 01       	movw	r30, r16
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
    20fe:	24 c0       	rjmp	.+72     	; 0x2148 <LCD_General_Question+0x79a>
    2100:	ce 01       	movw	r24, r28
    2102:	81 58       	subi	r24, 0x81	; 129
    2104:	9f 4f       	sbci	r25, 0xFF	; 255
    2106:	20 e9       	ldi	r18, 0x90	; 144
    2108:	31 e0       	ldi	r19, 0x01	; 1
    210a:	fc 01       	movw	r30, r24
    210c:	31 83       	std	Z+1, r19	; 0x01
    210e:	20 83       	st	Z, r18
    2110:	ce 01       	movw	r24, r28
    2112:	81 58       	subi	r24, 0x81	; 129
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	fc 01       	movw	r30, r24
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_General_Question+0x76e>
    2120:	9e 01       	movw	r18, r28
    2122:	21 58       	subi	r18, 0x81	; 129
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	f9 01       	movw	r30, r18
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	ce 01       	movw	r24, r28
    212e:	83 58       	subi	r24, 0x83	; 131
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	9e 01       	movw	r18, r28
    2134:	23 58       	subi	r18, 0x83	; 131
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	f9 01       	movw	r30, r18
    213a:	20 81       	ld	r18, Z
    213c:	31 81       	ldd	r19, Z+1	; 0x01
    213e:	21 50       	subi	r18, 0x01	; 1
    2140:	31 09       	sbc	r19, r1
    2142:	fc 01       	movw	r30, r24
    2144:	31 83       	std	Z+1, r19	; 0x01
    2146:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	ce 01       	movw	r24, r28
    214a:	83 58       	subi	r24, 0x83	; 131
    214c:	9f 4f       	sbci	r25, 0xFF	; 255
    214e:	fc 01       	movw	r30, r24
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	89 2b       	or	r24, r25
    2156:	a1 f6       	brne	.-88     	; 0x2100 <LCD_General_Question+0x752>
    2158:	2c c0       	rjmp	.+88     	; 0x21b2 <LCD_General_Question+0x804>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215a:	8e 01       	movw	r16, r28
    215c:	03 58       	subi	r16, 0x83	; 131
    215e:	1f 4f       	sbci	r17, 0xFF	; 255
    2160:	ce 01       	movw	r24, r28
    2162:	87 58       	subi	r24, 0x87	; 135
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	fc 01       	movw	r30, r24
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	f8 01       	movw	r30, r16
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
    217e:	ce 01       	movw	r24, r28
    2180:	8f 57       	subi	r24, 0x7F	; 127
    2182:	9f 4f       	sbci	r25, 0xFF	; 255
    2184:	9e 01       	movw	r18, r28
    2186:	23 58       	subi	r18, 0x83	; 131
    2188:	3f 4f       	sbci	r19, 0xFF	; 255
    218a:	f9 01       	movw	r30, r18
    218c:	20 81       	ld	r18, Z
    218e:	31 81       	ldd	r19, Z+1	; 0x01
    2190:	fc 01       	movw	r30, r24
    2192:	31 83       	std	Z+1, r19	; 0x01
    2194:	20 83       	st	Z, r18
    2196:	ce 01       	movw	r24, r28
    2198:	8f 57       	subi	r24, 0x7F	; 127
    219a:	9f 4f       	sbci	r25, 0xFF	; 255
    219c:	fc 01       	movw	r30, r24
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_General_Question+0x7f4>
    21a6:	9e 01       	movw	r18, r28
    21a8:	2f 57       	subi	r18, 0x7F	; 127
    21aa:	3f 4f       	sbci	r19, 0xFF	; 255
    21ac:	f9 01       	movw	r30, r18
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
   	Delay(TWO_THOUSAND_MS);
   	while(!(DIO_ReadPin(BUTTON0)) && !(DIO_ReadPin(BUTTON1)) ); /* pulling two buttons until one pressed */
    21b2:	00 00       	nop
    21b4:	8a e0       	ldi	r24, 0x0A	; 10
    21b6:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    21ba:	88 23       	and	r24, r24
    21bc:	29 f4       	brne	.+10     	; 0x21c8 <LCD_General_Question+0x81a>
    21be:	84 e1       	ldi	r24, 0x14	; 20
    21c0:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    21c4:	88 23       	and	r24, r24
    21c6:	b1 f3       	breq	.-20     	; 0x21b4 <LCD_General_Question+0x806>
   	if(!(DIO_ReadPin(BUTTON0))) { /* if answer is wrong show sad emoji */
    21c8:	8a e0       	ldi	r24, 0x0A	; 10
    21ca:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    21ce:	88 23       	and	r24, r24
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <LCD_General_Question+0x826>
    21d2:	ca c0       	rjmp	.+404    	; 0x2368 <LCD_General_Question+0x9ba>
	   	LCD_sendCommand(CLEAR_SCREEN);
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	   	emoji_sad_init();
    21da:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <emoji_sad_init>
	   	LCD_sendCommand(FIRST_LINE);
    21de:	80 e8       	ldi	r24, 0x80	; 128
    21e0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	   	LCD_displayChar(LOW); /*display first char created  */
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
	   	LCD_displayChar(HIGH); /*display second char created */
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e8       	ldi	r25, 0x80	; 128
    21f4:	ab e3       	ldi	r26, 0x3B	; 59
    21f6:	b5 e4       	ldi	r27, 0x45	; 69
    21f8:	8f 87       	std	Y+15, r24	; 0x0f
    21fa:	98 8b       	std	Y+16, r25	; 0x10
    21fc:	a9 8b       	std	Y+17, r26	; 0x11
    21fe:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2200:	8e 01       	movw	r16, r28
    2202:	03 57       	subi	r16, 0x73	; 115
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a e7       	ldi	r20, 0x7A	; 122
    220c:	55 e4       	ldi	r21, 0x45	; 69
    220e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2210:	78 89       	ldd	r23, Y+16	; 0x10
    2212:	89 89       	ldd	r24, Y+17	; 0x11
    2214:	9a 89       	ldd	r25, Y+18	; 0x12
    2216:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	f8 01       	movw	r30, r16
    2220:	80 83       	st	Z, r24
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	a2 83       	std	Z+2, r26	; 0x02
    2226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2228:	ce 01       	movw	r24, r28
    222a:	83 57       	subi	r24, 0x73	; 115
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e8       	ldi	r20, 0x80	; 128
    2234:	5f e3       	ldi	r21, 0x3F	; 63
    2236:	fc 01       	movw	r30, r24
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    2244:	88 23       	and	r24, r24
    2246:	4c f4       	brge	.+18     	; 0x225a <LCD_General_Question+0x8ac>
		__ticks = 1;
    2248:	ce 01       	movw	r24, r28
    224a:	8f 56       	subi	r24, 0x6F	; 111
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	21 e0       	ldi	r18, 0x01	; 1
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	fc 01       	movw	r30, r24
    2254:	31 83       	std	Z+1, r19	; 0x01
    2256:	20 83       	st	Z, r18
    2258:	69 c0       	rjmp	.+210    	; 0x232c <LCD_General_Question+0x97e>
	else if (__tmp > 65535)
    225a:	ce 01       	movw	r24, r28
    225c:	83 57       	subi	r24, 0x73	; 115
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	fc 01       	movw	r30, r24
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    2276:	18 16       	cp	r1, r24
    2278:	0c f0       	brlt	.+2      	; 0x227c <LCD_General_Question+0x8ce>
    227a:	46 c0       	rjmp	.+140    	; 0x2308 <LCD_General_Question+0x95a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e2       	ldi	r20, 0x20	; 32
    2282:	51 e4       	ldi	r21, 0x41	; 65
    2284:	6f 85       	ldd	r22, Y+15	; 0x0f
    2286:	78 89       	ldd	r23, Y+16	; 0x10
    2288:	89 89       	ldd	r24, Y+17	; 0x11
    228a:	9a 89       	ldd	r25, Y+18	; 0x12
    228c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8e 01       	movw	r16, r28
    2296:	0f 56       	subi	r16, 0x6F	; 111
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	f8 01       	movw	r30, r16
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
    22ac:	24 c0       	rjmp	.+72     	; 0x22f6 <LCD_General_Question+0x948>
    22ae:	ce 01       	movw	r24, r28
    22b0:	8d 56       	subi	r24, 0x6D	; 109
    22b2:	9f 4f       	sbci	r25, 0xFF	; 255
    22b4:	20 e9       	ldi	r18, 0x90	; 144
    22b6:	31 e0       	ldi	r19, 0x01	; 1
    22b8:	fc 01       	movw	r30, r24
    22ba:	31 83       	std	Z+1, r19	; 0x01
    22bc:	20 83       	st	Z, r18
    22be:	ce 01       	movw	r24, r28
    22c0:	8d 56       	subi	r24, 0x6D	; 109
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	fc 01       	movw	r30, r24
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_General_Question+0x91c>
    22ce:	9e 01       	movw	r18, r28
    22d0:	2d 56       	subi	r18, 0x6D	; 109
    22d2:	3f 4f       	sbci	r19, 0xFF	; 255
    22d4:	f9 01       	movw	r30, r18
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22da:	ce 01       	movw	r24, r28
    22dc:	8f 56       	subi	r24, 0x6F	; 111
    22de:	9f 4f       	sbci	r25, 0xFF	; 255
    22e0:	9e 01       	movw	r18, r28
    22e2:	2f 56       	subi	r18, 0x6F	; 111
    22e4:	3f 4f       	sbci	r19, 0xFF	; 255
    22e6:	f9 01       	movw	r30, r18
    22e8:	20 81       	ld	r18, Z
    22ea:	31 81       	ldd	r19, Z+1	; 0x01
    22ec:	21 50       	subi	r18, 0x01	; 1
    22ee:	31 09       	sbc	r19, r1
    22f0:	fc 01       	movw	r30, r24
    22f2:	31 83       	std	Z+1, r19	; 0x01
    22f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	ce 01       	movw	r24, r28
    22f8:	8f 56       	subi	r24, 0x6F	; 111
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	fc 01       	movw	r30, r24
    22fe:	80 81       	ld	r24, Z
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	89 2b       	or	r24, r25
    2304:	a1 f6       	brne	.-88     	; 0x22ae <LCD_General_Question+0x900>
    2306:	2c c0       	rjmp	.+88     	; 0x2360 <LCD_General_Question+0x9b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2308:	8e 01       	movw	r16, r28
    230a:	0f 56       	subi	r16, 0x6F	; 111
    230c:	1f 4f       	sbci	r17, 0xFF	; 255
    230e:	ce 01       	movw	r24, r28
    2310:	83 57       	subi	r24, 0x73	; 115
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	fc 01       	movw	r30, r24
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	ce 01       	movw	r24, r28
    232e:	8b 56       	subi	r24, 0x6B	; 107
    2330:	9f 4f       	sbci	r25, 0xFF	; 255
    2332:	9e 01       	movw	r18, r28
    2334:	2f 56       	subi	r18, 0x6F	; 111
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	f9 01       	movw	r30, r18
    233a:	20 81       	ld	r18, Z
    233c:	31 81       	ldd	r19, Z+1	; 0x01
    233e:	fc 01       	movw	r30, r24
    2340:	31 83       	std	Z+1, r19	; 0x01
    2342:	20 83       	st	Z, r18
    2344:	ce 01       	movw	r24, r28
    2346:	8b 56       	subi	r24, 0x6B	; 107
    2348:	9f 4f       	sbci	r25, 0xFF	; 255
    234a:	fc 01       	movw	r30, r24
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_General_Question+0x9a2>
    2354:	9e 01       	movw	r18, r28
    2356:	2b 56       	subi	r18, 0x6B	; 107
    2358:	3f 4f       	sbci	r19, 0xFF	; 255
    235a:	f9 01       	movw	r30, r18
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
	   	Delay(THREE_THOUSAND_MS);
	   	count_wronge++;  /* increment counter of wrong answers */
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	c9 c0       	rjmp	.+402    	; 0x24fa <LCD_General_Question+0xb4c>
   	}
   	else {  LCD_sendCommand(CLEAR_SCREEN);   /*if answer is right show happy emoji */
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	   	emoji_happy_init();
    236e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <emoji_happy_init>
	   	LCD_sendCommand(FIRST_LINE);
    2372:	80 e8       	ldi	r24, 0x80	; 128
    2374:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	   	LCD_displayChar(LOW);      /*display first char created  */
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
	   	LCD_displayChar(HIGH);     /*display second char created */
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e8       	ldi	r25, 0x80	; 128
    2388:	ab e3       	ldi	r26, 0x3B	; 59
    238a:	b5 e4       	ldi	r27, 0x45	; 69
    238c:	8f 8b       	std	Y+23, r24	; 0x17
    238e:	98 8f       	std	Y+24, r25	; 0x18
    2390:	a9 8f       	std	Y+25, r26	; 0x19
    2392:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2394:	8e 01       	movw	r16, r28
    2396:	09 56       	subi	r16, 0x69	; 105
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a e7       	ldi	r20, 0x7A	; 122
    23a0:	55 e4       	ldi	r21, 0x45	; 69
    23a2:	6f 89       	ldd	r22, Y+23	; 0x17
    23a4:	78 8d       	ldd	r23, Y+24	; 0x18
    23a6:	89 8d       	ldd	r24, Y+25	; 0x19
    23a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23aa:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	f8 01       	movw	r30, r16
    23b4:	80 83       	st	Z, r24
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	a2 83       	std	Z+2, r26	; 0x02
    23ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23bc:	ce 01       	movw	r24, r28
    23be:	89 56       	subi	r24, 0x69	; 105
    23c0:	9f 4f       	sbci	r25, 0xFF	; 255
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	fc 01       	movw	r30, r24
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    23d8:	88 23       	and	r24, r24
    23da:	4c f4       	brge	.+18     	; 0x23ee <LCD_General_Question+0xa40>
		__ticks = 1;
    23dc:	ce 01       	movw	r24, r28
    23de:	85 56       	subi	r24, 0x65	; 101
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	21 e0       	ldi	r18, 0x01	; 1
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	fc 01       	movw	r30, r24
    23e8:	31 83       	std	Z+1, r19	; 0x01
    23ea:	20 83       	st	Z, r18
    23ec:	69 c0       	rjmp	.+210    	; 0x24c0 <LCD_General_Question+0xb12>
	else if (__tmp > 65535)
    23ee:	ce 01       	movw	r24, r28
    23f0:	89 56       	subi	r24, 0x69	; 105
    23f2:	9f 4f       	sbci	r25, 0xFF	; 255
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	fc 01       	movw	r30, r24
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    240a:	18 16       	cp	r1, r24
    240c:	0c f0       	brlt	.+2      	; 0x2410 <LCD_General_Question+0xa62>
    240e:	46 c0       	rjmp	.+140    	; 0x249c <LCD_General_Question+0xaee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e2       	ldi	r20, 0x20	; 32
    2416:	51 e4       	ldi	r21, 0x41	; 65
    2418:	6f 89       	ldd	r22, Y+23	; 0x17
    241a:	78 8d       	ldd	r23, Y+24	; 0x18
    241c:	89 8d       	ldd	r24, Y+25	; 0x19
    241e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2420:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8e 01       	movw	r16, r28
    242a:	05 56       	subi	r16, 0x65	; 101
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	f8 01       	movw	r30, r16
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	80 83       	st	Z, r24
    2440:	24 c0       	rjmp	.+72     	; 0x248a <LCD_General_Question+0xadc>
    2442:	ce 01       	movw	r24, r28
    2444:	83 56       	subi	r24, 0x63	; 99
    2446:	9f 4f       	sbci	r25, 0xFF	; 255
    2448:	20 e9       	ldi	r18, 0x90	; 144
    244a:	31 e0       	ldi	r19, 0x01	; 1
    244c:	fc 01       	movw	r30, r24
    244e:	31 83       	std	Z+1, r19	; 0x01
    2450:	20 83       	st	Z, r18
    2452:	ce 01       	movw	r24, r28
    2454:	83 56       	subi	r24, 0x63	; 99
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	fc 01       	movw	r30, r24
    245a:	80 81       	ld	r24, Z
    245c:	91 81       	ldd	r25, Z+1	; 0x01
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_General_Question+0xab0>
    2462:	9e 01       	movw	r18, r28
    2464:	23 56       	subi	r18, 0x63	; 99
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
    2468:	f9 01       	movw	r30, r18
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246e:	ce 01       	movw	r24, r28
    2470:	85 56       	subi	r24, 0x65	; 101
    2472:	9f 4f       	sbci	r25, 0xFF	; 255
    2474:	9e 01       	movw	r18, r28
    2476:	25 56       	subi	r18, 0x65	; 101
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	f9 01       	movw	r30, r18
    247c:	20 81       	ld	r18, Z
    247e:	31 81       	ldd	r19, Z+1	; 0x01
    2480:	21 50       	subi	r18, 0x01	; 1
    2482:	31 09       	sbc	r19, r1
    2484:	fc 01       	movw	r30, r24
    2486:	31 83       	std	Z+1, r19	; 0x01
    2488:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248a:	ce 01       	movw	r24, r28
    248c:	85 56       	subi	r24, 0x65	; 101
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	fc 01       	movw	r30, r24
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	89 2b       	or	r24, r25
    2498:	a1 f6       	brne	.-88     	; 0x2442 <LCD_General_Question+0xa94>
    249a:	2c c0       	rjmp	.+88     	; 0x24f4 <LCD_General_Question+0xb46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	8e 01       	movw	r16, r28
    249e:	05 56       	subi	r16, 0x65	; 101
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	ce 01       	movw	r24, r28
    24a4:	89 56       	subi	r24, 0x69	; 105
    24a6:	9f 4f       	sbci	r25, 0xFF	; 255
    24a8:	fc 01       	movw	r30, r24
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	f8 01       	movw	r30, r16
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
    24c0:	ce 01       	movw	r24, r28
    24c2:	81 56       	subi	r24, 0x61	; 97
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	9e 01       	movw	r18, r28
    24c8:	25 56       	subi	r18, 0x65	; 101
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	f9 01       	movw	r30, r18
    24ce:	20 81       	ld	r18, Z
    24d0:	31 81       	ldd	r19, Z+1	; 0x01
    24d2:	fc 01       	movw	r30, r24
    24d4:	31 83       	std	Z+1, r19	; 0x01
    24d6:	20 83       	st	Z, r18
    24d8:	ce 01       	movw	r24, r28
    24da:	81 56       	subi	r24, 0x61	; 97
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	fc 01       	movw	r30, r24
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_General_Question+0xb36>
    24e8:	9e 01       	movw	r18, r28
    24ea:	21 56       	subi	r18, 0x61	; 97
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	f9 01       	movw	r30, r18
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
	   	Delay(THREE_THOUSAND_MS); 
	   	count_right++;                     /* increment counter of right answers */
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	89 83       	std	Y+1, r24	; 0x01
   	}
/* Third Question */
   LCD_sendCommand(CLEAR_SCREEN);  
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	aa e7       	ldi	r26, 0x7A	; 122
    2506:	b4 e4       	ldi	r27, 0x44	; 68
    2508:	8b a3       	std	Y+35, r24	; 0x23
    250a:	9c a3       	std	Y+36, r25	; 0x24
    250c:	ad a3       	std	Y+37, r26	; 0x25
    250e:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2510:	8e 01       	movw	r16, r28
    2512:	05 55       	subi	r16, 0x55	; 85
    2514:	1f 4f       	sbci	r17, 0xFF	; 255
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a e7       	ldi	r20, 0x7A	; 122
    251c:	55 e4       	ldi	r21, 0x45	; 69
    251e:	6b a1       	ldd	r22, Y+35	; 0x23
    2520:	7c a1       	ldd	r23, Y+36	; 0x24
    2522:	8d a1       	ldd	r24, Y+37	; 0x25
    2524:	9e a1       	ldd	r25, Y+38	; 0x26
    2526:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	f8 01       	movw	r30, r16
    2530:	80 83       	st	Z, r24
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	a2 83       	std	Z+2, r26	; 0x02
    2536:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2538:	ce 01       	movw	r24, r28
    253a:	85 55       	subi	r24, 0x55	; 85
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	fc 01       	movw	r30, r24
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    2554:	88 23       	and	r24, r24
    2556:	4c f4       	brge	.+18     	; 0x256a <LCD_General_Question+0xbbc>
		__ticks = 1;
    2558:	ce 01       	movw	r24, r28
    255a:	81 55       	subi	r24, 0x51	; 81
    255c:	9f 4f       	sbci	r25, 0xFF	; 255
    255e:	21 e0       	ldi	r18, 0x01	; 1
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	fc 01       	movw	r30, r24
    2564:	31 83       	std	Z+1, r19	; 0x01
    2566:	20 83       	st	Z, r18
    2568:	69 c0       	rjmp	.+210    	; 0x263c <LCD_General_Question+0xc8e>
	else if (__tmp > 65535)
    256a:	ce 01       	movw	r24, r28
    256c:	85 55       	subi	r24, 0x55	; 85
    256e:	9f 4f       	sbci	r25, 0xFF	; 255
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	fc 01       	movw	r30, r24
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    2586:	18 16       	cp	r1, r24
    2588:	0c f0       	brlt	.+2      	; 0x258c <LCD_General_Question+0xbde>
    258a:	46 c0       	rjmp	.+140    	; 0x2618 <LCD_General_Question+0xc6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	6b a1       	ldd	r22, Y+35	; 0x23
    2596:	7c a1       	ldd	r23, Y+36	; 0x24
    2598:	8d a1       	ldd	r24, Y+37	; 0x25
    259a:	9e a1       	ldd	r25, Y+38	; 0x26
    259c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	8e 01       	movw	r16, r28
    25a6:	01 55       	subi	r16, 0x51	; 81
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	f8 01       	movw	r30, r16
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
    25bc:	24 c0       	rjmp	.+72     	; 0x2606 <LCD_General_Question+0xc58>
    25be:	ce 01       	movw	r24, r28
    25c0:	8f 54       	subi	r24, 0x4F	; 79
    25c2:	9f 4f       	sbci	r25, 0xFF	; 255
    25c4:	20 e9       	ldi	r18, 0x90	; 144
    25c6:	31 e0       	ldi	r19, 0x01	; 1
    25c8:	fc 01       	movw	r30, r24
    25ca:	31 83       	std	Z+1, r19	; 0x01
    25cc:	20 83       	st	Z, r18
    25ce:	ce 01       	movw	r24, r28
    25d0:	8f 54       	subi	r24, 0x4F	; 79
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	fc 01       	movw	r30, r24
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <LCD_General_Question+0xc2c>
    25de:	9e 01       	movw	r18, r28
    25e0:	2f 54       	subi	r18, 0x4F	; 79
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	f9 01       	movw	r30, r18
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ea:	ce 01       	movw	r24, r28
    25ec:	81 55       	subi	r24, 0x51	; 81
    25ee:	9f 4f       	sbci	r25, 0xFF	; 255
    25f0:	9e 01       	movw	r18, r28
    25f2:	21 55       	subi	r18, 0x51	; 81
    25f4:	3f 4f       	sbci	r19, 0xFF	; 255
    25f6:	f9 01       	movw	r30, r18
    25f8:	20 81       	ld	r18, Z
    25fa:	31 81       	ldd	r19, Z+1	; 0x01
    25fc:	21 50       	subi	r18, 0x01	; 1
    25fe:	31 09       	sbc	r19, r1
    2600:	fc 01       	movw	r30, r24
    2602:	31 83       	std	Z+1, r19	; 0x01
    2604:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	ce 01       	movw	r24, r28
    2608:	81 55       	subi	r24, 0x51	; 81
    260a:	9f 4f       	sbci	r25, 0xFF	; 255
    260c:	fc 01       	movw	r30, r24
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	89 2b       	or	r24, r25
    2614:	a1 f6       	brne	.-88     	; 0x25be <LCD_General_Question+0xc10>
    2616:	2c c0       	rjmp	.+88     	; 0x2670 <LCD_General_Question+0xcc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	8e 01       	movw	r16, r28
    261a:	01 55       	subi	r16, 0x51	; 81
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	ce 01       	movw	r24, r28
    2620:	85 55       	subi	r24, 0x55	; 85
    2622:	9f 4f       	sbci	r25, 0xFF	; 255
    2624:	fc 01       	movw	r30, r24
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	f8 01       	movw	r30, r16
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	80 83       	st	Z, r24
    263c:	ce 01       	movw	r24, r28
    263e:	8d 54       	subi	r24, 0x4D	; 77
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    2642:	9e 01       	movw	r18, r28
    2644:	21 55       	subi	r18, 0x51	; 81
    2646:	3f 4f       	sbci	r19, 0xFF	; 255
    2648:	f9 01       	movw	r30, r18
    264a:	20 81       	ld	r18, Z
    264c:	31 81       	ldd	r19, Z+1	; 0x01
    264e:	fc 01       	movw	r30, r24
    2650:	31 83       	std	Z+1, r19	; 0x01
    2652:	20 83       	st	Z, r18
    2654:	ce 01       	movw	r24, r28
    2656:	8d 54       	subi	r24, 0x4D	; 77
    2658:	9f 4f       	sbci	r25, 0xFF	; 255
    265a:	fc 01       	movw	r30, r24
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_General_Question+0xcb2>
    2664:	9e 01       	movw	r18, r28
    2666:	2d 54       	subi	r18, 0x4D	; 77
    2668:	3f 4f       	sbci	r19, 0xFF	; 255
    266a:	f9 01       	movw	r30, r18
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
   Delay(ONE_THOUSAND_MS);
   LCD_displayStringRowColumn("Currency of",LOW,LOW);       /* 1st line in LCD */
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	8a e9       	ldi	r24, 0x9A	; 154
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
   LCD_displayStringRowColumn("Chile is Rubee?",HIGH,LOW);  /* Peso */  /*2nd line in LCD */
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	61 e0       	ldi	r22, 0x01	; 1
    2680:	86 ea       	ldi	r24, 0xA6	; 166
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	aa ef       	ldi	r26, 0xFA	; 250
    268e:	b4 e4       	ldi	r27, 0x44	; 68
    2690:	8b 8f       	std	Y+27, r24	; 0x1b
    2692:	9c 8f       	std	Y+28, r25	; 0x1c
    2694:	ad 8f       	std	Y+29, r26	; 0x1d
    2696:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2698:	8e 01       	movw	r16, r28
    269a:	0f 55       	subi	r16, 0x5F	; 95
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	55 e4       	ldi	r21, 0x45	; 69
    26a6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    26a8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    26aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ae:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	f8 01       	movw	r30, r16
    26b8:	80 83       	st	Z, r24
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	a2 83       	std	Z+2, r26	; 0x02
    26be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c0:	ce 01       	movw	r24, r28
    26c2:	8f 55       	subi	r24, 0x5F	; 95
    26c4:	9f 4f       	sbci	r25, 0xFF	; 255
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	fc 01       	movw	r30, r24
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    26dc:	88 23       	and	r24, r24
    26de:	4c f4       	brge	.+18     	; 0x26f2 <LCD_General_Question+0xd44>
		__ticks = 1;
    26e0:	ce 01       	movw	r24, r28
    26e2:	8b 55       	subi	r24, 0x5B	; 91
    26e4:	9f 4f       	sbci	r25, 0xFF	; 255
    26e6:	21 e0       	ldi	r18, 0x01	; 1
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	fc 01       	movw	r30, r24
    26ec:	31 83       	std	Z+1, r19	; 0x01
    26ee:	20 83       	st	Z, r18
    26f0:	69 c0       	rjmp	.+210    	; 0x27c4 <LCD_General_Question+0xe16>
	else if (__tmp > 65535)
    26f2:	ce 01       	movw	r24, r28
    26f4:	8f 55       	subi	r24, 0x5F	; 95
    26f6:	9f 4f       	sbci	r25, 0xFF	; 255
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	fc 01       	movw	r30, r24
    2702:	60 81       	ld	r22, Z
    2704:	71 81       	ldd	r23, Z+1	; 0x01
    2706:	82 81       	ldd	r24, Z+2	; 0x02
    2708:	93 81       	ldd	r25, Z+3	; 0x03
    270a:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    270e:	18 16       	cp	r1, r24
    2710:	0c f0       	brlt	.+2      	; 0x2714 <LCD_General_Question+0xd66>
    2712:	46 c0       	rjmp	.+140    	; 0x27a0 <LCD_General_Question+0xdf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e2       	ldi	r20, 0x20	; 32
    271a:	51 e4       	ldi	r21, 0x41	; 65
    271c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    271e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2720:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2722:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2724:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8e 01       	movw	r16, r28
    272e:	0b 55       	subi	r16, 0x5B	; 91
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	f8 01       	movw	r30, r16
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
    2744:	24 c0       	rjmp	.+72     	; 0x278e <LCD_General_Question+0xde0>
    2746:	ce 01       	movw	r24, r28
    2748:	89 55       	subi	r24, 0x59	; 89
    274a:	9f 4f       	sbci	r25, 0xFF	; 255
    274c:	20 e9       	ldi	r18, 0x90	; 144
    274e:	31 e0       	ldi	r19, 0x01	; 1
    2750:	fc 01       	movw	r30, r24
    2752:	31 83       	std	Z+1, r19	; 0x01
    2754:	20 83       	st	Z, r18
    2756:	ce 01       	movw	r24, r28
    2758:	89 55       	subi	r24, 0x59	; 89
    275a:	9f 4f       	sbci	r25, 0xFF	; 255
    275c:	fc 01       	movw	r30, r24
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_General_Question+0xdb4>
    2766:	9e 01       	movw	r18, r28
    2768:	29 55       	subi	r18, 0x59	; 89
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	f9 01       	movw	r30, r18
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2772:	ce 01       	movw	r24, r28
    2774:	8b 55       	subi	r24, 0x5B	; 91
    2776:	9f 4f       	sbci	r25, 0xFF	; 255
    2778:	9e 01       	movw	r18, r28
    277a:	2b 55       	subi	r18, 0x5B	; 91
    277c:	3f 4f       	sbci	r19, 0xFF	; 255
    277e:	f9 01       	movw	r30, r18
    2780:	20 81       	ld	r18, Z
    2782:	31 81       	ldd	r19, Z+1	; 0x01
    2784:	21 50       	subi	r18, 0x01	; 1
    2786:	31 09       	sbc	r19, r1
    2788:	fc 01       	movw	r30, r24
    278a:	31 83       	std	Z+1, r19	; 0x01
    278c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	ce 01       	movw	r24, r28
    2790:	8b 55       	subi	r24, 0x5B	; 91
    2792:	9f 4f       	sbci	r25, 0xFF	; 255
    2794:	fc 01       	movw	r30, r24
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	89 2b       	or	r24, r25
    279c:	a1 f6       	brne	.-88     	; 0x2746 <LCD_General_Question+0xd98>
    279e:	2c c0       	rjmp	.+88     	; 0x27f8 <LCD_General_Question+0xe4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	8e 01       	movw	r16, r28
    27a2:	0b 55       	subi	r16, 0x5B	; 91
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	ce 01       	movw	r24, r28
    27a8:	8f 55       	subi	r24, 0x5F	; 95
    27aa:	9f 4f       	sbci	r25, 0xFF	; 255
    27ac:	fc 01       	movw	r30, r24
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	f8 01       	movw	r30, r16
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
    27c4:	ce 01       	movw	r24, r28
    27c6:	87 55       	subi	r24, 0x57	; 87
    27c8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ca:	9e 01       	movw	r18, r28
    27cc:	2b 55       	subi	r18, 0x5B	; 91
    27ce:	3f 4f       	sbci	r19, 0xFF	; 255
    27d0:	f9 01       	movw	r30, r18
    27d2:	20 81       	ld	r18, Z
    27d4:	31 81       	ldd	r19, Z+1	; 0x01
    27d6:	fc 01       	movw	r30, r24
    27d8:	31 83       	std	Z+1, r19	; 0x01
    27da:	20 83       	st	Z, r18
    27dc:	ce 01       	movw	r24, r28
    27de:	87 55       	subi	r24, 0x57	; 87
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	fc 01       	movw	r30, r24
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_General_Question+0xe3a>
    27ec:	9e 01       	movw	r18, r28
    27ee:	27 55       	subi	r18, 0x57	; 87
    27f0:	3f 4f       	sbci	r19, 0xFF	; 255
    27f2:	f9 01       	movw	r30, r18
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	80 83       	st	Z, r24
   Delay(TWO_THOUSAND_MS);
   while(!(DIO_ReadPin(BUTTON0)) && !(DIO_ReadPin(BUTTON1)) );   /* pulling two buttons until one pressed */
    27f8:	00 00       	nop
    27fa:	8a e0       	ldi	r24, 0x0A	; 10
    27fc:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    2800:	88 23       	and	r24, r24
    2802:	29 f4       	brne	.+10     	; 0x280e <LCD_General_Question+0xe60>
    2804:	84 e1       	ldi	r24, 0x14	; 20
    2806:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    280a:	88 23       	and	r24, r24
    280c:	b1 f3       	breq	.-20     	; 0x27fa <LCD_General_Question+0xe4c>
   if(!(DIO_ReadPin(BUTTON0))) {                                 /* if answer is wrong show sad emoji */
    280e:	8a e0       	ldi	r24, 0x0A	; 10
    2810:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    2814:	88 23       	and	r24, r24
    2816:	09 f0       	breq	.+2      	; 0x281a <LCD_General_Question+0xe6c>
    2818:	ca c0       	rjmp	.+404    	; 0x29ae <LCD_General_Question+0x1000>
	   LCD_sendCommand(CLEAR_SCREEN);                            /*if answer is right show happy emoji */
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	   emoji_sad_init();
    2820:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <emoji_sad_init>
	   LCD_sendCommand(FIRST_LINE); 
    2824:	80 e8       	ldi	r24, 0x80	; 128
    2826:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	   LCD_displayChar(LOW);                                     /*display first char created  */
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
	   LCD_displayChar(HIGH);                                    /*display second char created */
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e8       	ldi	r25, 0x80	; 128
    283a:	ab e3       	ldi	r26, 0x3B	; 59
    283c:	b5 e4       	ldi	r27, 0x45	; 69
    283e:	8f 8f       	std	Y+31, r24	; 0x1f
    2840:	98 a3       	std	Y+32, r25	; 0x20
    2842:	a9 a3       	std	Y+33, r26	; 0x21
    2844:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2846:	8e 01       	movw	r16, r28
    2848:	0b 54       	subi	r16, 0x4B	; 75
    284a:	1f 4f       	sbci	r17, 0xFF	; 255
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a e7       	ldi	r20, 0x7A	; 122
    2852:	55 e4       	ldi	r21, 0x45	; 69
    2854:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2856:	78 a1       	ldd	r23, Y+32	; 0x20
    2858:	89 a1       	ldd	r24, Y+33	; 0x21
    285a:	9a a1       	ldd	r25, Y+34	; 0x22
    285c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	f8 01       	movw	r30, r16
    2866:	80 83       	st	Z, r24
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	a2 83       	std	Z+2, r26	; 0x02
    286c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    286e:	ce 01       	movw	r24, r28
    2870:	8b 54       	subi	r24, 0x4B	; 75
    2872:	9f 4f       	sbci	r25, 0xFF	; 255
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	fc 01       	movw	r30, r24
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    288a:	88 23       	and	r24, r24
    288c:	4c f4       	brge	.+18     	; 0x28a0 <LCD_General_Question+0xef2>
		__ticks = 1;
    288e:	ce 01       	movw	r24, r28
    2890:	87 54       	subi	r24, 0x47	; 71
    2892:	9f 4f       	sbci	r25, 0xFF	; 255
    2894:	21 e0       	ldi	r18, 0x01	; 1
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	fc 01       	movw	r30, r24
    289a:	31 83       	std	Z+1, r19	; 0x01
    289c:	20 83       	st	Z, r18
    289e:	69 c0       	rjmp	.+210    	; 0x2972 <LCD_General_Question+0xfc4>
	else if (__tmp > 65535)
    28a0:	ce 01       	movw	r24, r28
    28a2:	8b 54       	subi	r24, 0x4B	; 75
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	fc 01       	movw	r30, r24
    28b0:	60 81       	ld	r22, Z
    28b2:	71 81       	ldd	r23, Z+1	; 0x01
    28b4:	82 81       	ldd	r24, Z+2	; 0x02
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    28bc:	18 16       	cp	r1, r24
    28be:	0c f0       	brlt	.+2      	; 0x28c2 <LCD_General_Question+0xf14>
    28c0:	46 c0       	rjmp	.+140    	; 0x294e <LCD_General_Question+0xfa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e2       	ldi	r20, 0x20	; 32
    28c8:	51 e4       	ldi	r21, 0x41	; 65
    28ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28cc:	78 a1       	ldd	r23, Y+32	; 0x20
    28ce:	89 a1       	ldd	r24, Y+33	; 0x21
    28d0:	9a a1       	ldd	r25, Y+34	; 0x22
    28d2:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8e 01       	movw	r16, r28
    28dc:	07 54       	subi	r16, 0x47	; 71
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	f8 01       	movw	r30, r16
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	80 83       	st	Z, r24
    28f2:	24 c0       	rjmp	.+72     	; 0x293c <LCD_General_Question+0xf8e>
    28f4:	ce 01       	movw	r24, r28
    28f6:	85 54       	subi	r24, 0x45	; 69
    28f8:	9f 4f       	sbci	r25, 0xFF	; 255
    28fa:	20 e9       	ldi	r18, 0x90	; 144
    28fc:	31 e0       	ldi	r19, 0x01	; 1
    28fe:	fc 01       	movw	r30, r24
    2900:	31 83       	std	Z+1, r19	; 0x01
    2902:	20 83       	st	Z, r18
    2904:	ce 01       	movw	r24, r28
    2906:	85 54       	subi	r24, 0x45	; 69
    2908:	9f 4f       	sbci	r25, 0xFF	; 255
    290a:	fc 01       	movw	r30, r24
    290c:	80 81       	ld	r24, Z
    290e:	91 81       	ldd	r25, Z+1	; 0x01
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_General_Question+0xf62>
    2914:	9e 01       	movw	r18, r28
    2916:	25 54       	subi	r18, 0x45	; 69
    2918:	3f 4f       	sbci	r19, 0xFF	; 255
    291a:	f9 01       	movw	r30, r18
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	ce 01       	movw	r24, r28
    2922:	87 54       	subi	r24, 0x47	; 71
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	9e 01       	movw	r18, r28
    2928:	27 54       	subi	r18, 0x47	; 71
    292a:	3f 4f       	sbci	r19, 0xFF	; 255
    292c:	f9 01       	movw	r30, r18
    292e:	20 81       	ld	r18, Z
    2930:	31 81       	ldd	r19, Z+1	; 0x01
    2932:	21 50       	subi	r18, 0x01	; 1
    2934:	31 09       	sbc	r19, r1
    2936:	fc 01       	movw	r30, r24
    2938:	31 83       	std	Z+1, r19	; 0x01
    293a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293c:	ce 01       	movw	r24, r28
    293e:	87 54       	subi	r24, 0x47	; 71
    2940:	9f 4f       	sbci	r25, 0xFF	; 255
    2942:	fc 01       	movw	r30, r24
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	89 2b       	or	r24, r25
    294a:	a1 f6       	brne	.-88     	; 0x28f4 <LCD_General_Question+0xf46>
    294c:	2c c0       	rjmp	.+88     	; 0x29a6 <LCD_General_Question+0xff8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294e:	8e 01       	movw	r16, r28
    2950:	07 54       	subi	r16, 0x47	; 71
    2952:	1f 4f       	sbci	r17, 0xFF	; 255
    2954:	ce 01       	movw	r24, r28
    2956:	8b 54       	subi	r24, 0x4B	; 75
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	fc 01       	movw	r30, r24
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	f8 01       	movw	r30, r16
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    2972:	ce 01       	movw	r24, r28
    2974:	83 54       	subi	r24, 0x43	; 67
    2976:	9f 4f       	sbci	r25, 0xFF	; 255
    2978:	9e 01       	movw	r18, r28
    297a:	27 54       	subi	r18, 0x47	; 71
    297c:	3f 4f       	sbci	r19, 0xFF	; 255
    297e:	f9 01       	movw	r30, r18
    2980:	20 81       	ld	r18, Z
    2982:	31 81       	ldd	r19, Z+1	; 0x01
    2984:	fc 01       	movw	r30, r24
    2986:	31 83       	std	Z+1, r19	; 0x01
    2988:	20 83       	st	Z, r18
    298a:	ce 01       	movw	r24, r28
    298c:	83 54       	subi	r24, 0x43	; 67
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	fc 01       	movw	r30, r24
    2992:	80 81       	ld	r24, Z
    2994:	91 81       	ldd	r25, Z+1	; 0x01
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <LCD_General_Question+0xfe8>
    299a:	9e 01       	movw	r18, r28
    299c:	23 54       	subi	r18, 0x43	; 67
    299e:	3f 4f       	sbci	r19, 0xFF	; 255
    29a0:	f9 01       	movw	r30, r18
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
	   Delay(THREE_THOUSAND_MS);
	   count_wronge++;                                           /* increment counter of wrong answers */
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	8f 5f       	subi	r24, 0xFF	; 255
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	c9 c0       	rjmp	.+402    	; 0x2b40 <LCD_General_Question+0x1192>
   }
   else {  LCD_sendCommand(CLEAR_SCREEN);                        /*if answer is right show happy emoji */
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	   emoji_happy_init();
    29b4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <emoji_happy_init>
	   LCD_sendCommand(FIRST_LINE);
    29b8:	80 e8       	ldi	r24, 0x80	; 128
    29ba:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	   LCD_displayChar(LOW);                                     /*display first char created  */
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
	   LCD_displayChar(HIGH);									 /*display second char created */
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e8       	ldi	r25, 0x80	; 128
    29ce:	ab e3       	ldi	r26, 0x3B	; 59
    29d0:	b5 e4       	ldi	r27, 0x45	; 69
    29d2:	8f a3       	std	Y+39, r24	; 0x27
    29d4:	98 a7       	std	Y+40, r25	; 0x28
    29d6:	a9 a7       	std	Y+41, r26	; 0x29
    29d8:	ba a7       	std	Y+42, r27	; 0x2a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    29da:	8e 01       	movw	r16, r28
    29dc:	01 54       	subi	r16, 0x41	; 65
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	4a e7       	ldi	r20, 0x7A	; 122
    29e6:	55 e4       	ldi	r21, 0x45	; 69
    29e8:	6f a1       	ldd	r22, Y+39	; 0x27
    29ea:	78 a5       	ldd	r23, Y+40	; 0x28
    29ec:	89 a5       	ldd	r24, Y+41	; 0x29
    29ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f0:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	f8 01       	movw	r30, r16
    29fa:	80 83       	st	Z, r24
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	a2 83       	std	Z+2, r26	; 0x02
    2a00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a02:	ce 01       	movw	r24, r28
    2a04:	81 54       	subi	r24, 0x41	; 65
    2a06:	9f 4f       	sbci	r25, 0xFF	; 255
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e8       	ldi	r20, 0x80	; 128
    2a0e:	5f e3       	ldi	r21, 0x3F	; 63
    2a10:	fc 01       	movw	r30, r24
    2a12:	60 81       	ld	r22, Z
    2a14:	71 81       	ldd	r23, Z+1	; 0x01
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    2a1e:	88 23       	and	r24, r24
    2a20:	4c f4       	brge	.+18     	; 0x2a34 <LCD_General_Question+0x1086>
		__ticks = 1;
    2a22:	ce 01       	movw	r24, r28
    2a24:	8d 53       	subi	r24, 0x3D	; 61
    2a26:	9f 4f       	sbci	r25, 0xFF	; 255
    2a28:	21 e0       	ldi	r18, 0x01	; 1
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	31 83       	std	Z+1, r19	; 0x01
    2a30:	20 83       	st	Z, r18
    2a32:	69 c0       	rjmp	.+210    	; 0x2b06 <LCD_General_Question+0x1158>
	else if (__tmp > 65535)
    2a34:	ce 01       	movw	r24, r28
    2a36:	81 54       	subi	r24, 0x41	; 65
    2a38:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	fc 01       	movw	r30, r24
    2a44:	60 81       	ld	r22, Z
    2a46:	71 81       	ldd	r23, Z+1	; 0x01
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    2a50:	18 16       	cp	r1, r24
    2a52:	0c f0       	brlt	.+2      	; 0x2a56 <LCD_General_Question+0x10a8>
    2a54:	46 c0       	rjmp	.+140    	; 0x2ae2 <LCD_General_Question+0x1134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e2       	ldi	r20, 0x20	; 32
    2a5c:	51 e4       	ldi	r21, 0x41	; 65
    2a5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a60:	78 a5       	ldd	r23, Y+40	; 0x28
    2a62:	89 a5       	ldd	r24, Y+41	; 0x29
    2a64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a66:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	8e 01       	movw	r16, r28
    2a70:	0d 53       	subi	r16, 0x3D	; 61
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	f8 01       	movw	r30, r16
    2a82:	91 83       	std	Z+1, r25	; 0x01
    2a84:	80 83       	st	Z, r24
    2a86:	24 c0       	rjmp	.+72     	; 0x2ad0 <LCD_General_Question+0x1122>
    2a88:	ce 01       	movw	r24, r28
    2a8a:	8b 53       	subi	r24, 0x3B	; 59
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	20 e9       	ldi	r18, 0x90	; 144
    2a90:	31 e0       	ldi	r19, 0x01	; 1
    2a92:	fc 01       	movw	r30, r24
    2a94:	31 83       	std	Z+1, r19	; 0x01
    2a96:	20 83       	st	Z, r18
    2a98:	ce 01       	movw	r24, r28
    2a9a:	8b 53       	subi	r24, 0x3B	; 59
    2a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	80 81       	ld	r24, Z
    2aa2:	91 81       	ldd	r25, Z+1	; 0x01
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <LCD_General_Question+0x10f6>
    2aa8:	9e 01       	movw	r18, r28
    2aaa:	2b 53       	subi	r18, 0x3B	; 59
    2aac:	3f 4f       	sbci	r19, 0xFF	; 255
    2aae:	f9 01       	movw	r30, r18
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	8d 53       	subi	r24, 0x3D	; 61
    2ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aba:	9e 01       	movw	r18, r28
    2abc:	2d 53       	subi	r18, 0x3D	; 61
    2abe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	20 81       	ld	r18, Z
    2ac4:	31 81       	ldd	r19, Z+1	; 0x01
    2ac6:	21 50       	subi	r18, 0x01	; 1
    2ac8:	31 09       	sbc	r19, r1
    2aca:	fc 01       	movw	r30, r24
    2acc:	31 83       	std	Z+1, r19	; 0x01
    2ace:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	8d 53       	subi	r24, 0x3D	; 61
    2ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	89 2b       	or	r24, r25
    2ade:	a1 f6       	brne	.-88     	; 0x2a88 <LCD_General_Question+0x10da>
    2ae0:	2c c0       	rjmp	.+88     	; 0x2b3a <LCD_General_Question+0x118c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	0d 53       	subi	r16, 0x3D	; 61
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	ce 01       	movw	r24, r28
    2aea:	81 54       	subi	r24, 0x41	; 65
    2aec:	9f 4f       	sbci	r25, 0xFF	; 255
    2aee:	fc 01       	movw	r30, r24
    2af0:	60 81       	ld	r22, Z
    2af2:	71 81       	ldd	r23, Z+1	; 0x01
    2af4:	82 81       	ldd	r24, Z+2	; 0x02
    2af6:	93 81       	ldd	r25, Z+3	; 0x03
    2af8:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	f8 01       	movw	r30, r16
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	80 83       	st	Z, r24
    2b06:	ce 01       	movw	r24, r28
    2b08:	89 53       	subi	r24, 0x39	; 57
    2b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0c:	9e 01       	movw	r18, r28
    2b0e:	2d 53       	subi	r18, 0x3D	; 61
    2b10:	3f 4f       	sbci	r19, 0xFF	; 255
    2b12:	f9 01       	movw	r30, r18
    2b14:	20 81       	ld	r18, Z
    2b16:	31 81       	ldd	r19, Z+1	; 0x01
    2b18:	fc 01       	movw	r30, r24
    2b1a:	31 83       	std	Z+1, r19	; 0x01
    2b1c:	20 83       	st	Z, r18
    2b1e:	ce 01       	movw	r24, r28
    2b20:	89 53       	subi	r24, 0x39	; 57
    2b22:	9f 4f       	sbci	r25, 0xFF	; 255
    2b24:	fc 01       	movw	r30, r24
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_General_Question+0x117c>
    2b2e:	9e 01       	movw	r18, r28
    2b30:	29 53       	subi	r18, 0x39	; 57
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	f9 01       	movw	r30, r18
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
	   Delay(THREE_THOUSAND_MS);
	   count_right++;										     /* increment counter of right answers */
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	8f 5f       	subi	r24, 0xFF	; 255
    2b3e:	89 83       	std	Y+1, r24	; 0x01
   }
  /* fourth Question */
  LCD_sendCommand(CLEAR_SCREEN);
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	aa e7       	ldi	r26, 0x7A	; 122
    2b4c:	b4 e4       	ldi	r27, 0x44	; 68
    2b4e:	8b ab       	std	Y+51, r24	; 0x33
    2b50:	9c ab       	std	Y+52, r25	; 0x34
    2b52:	ad ab       	std	Y+53, r26	; 0x35
    2b54:	be ab       	std	Y+54, r27	; 0x36

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	8e 01       	movw	r16, r28
    2b58:	0d 52       	subi	r16, 0x2D	; 45
    2b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a e7       	ldi	r20, 0x7A	; 122
    2b62:	55 e4       	ldi	r21, 0x45	; 69
    2b64:	6b a9       	ldd	r22, Y+51	; 0x33
    2b66:	7c a9       	ldd	r23, Y+52	; 0x34
    2b68:	8d a9       	ldd	r24, Y+53	; 0x35
    2b6a:	9e a9       	ldd	r25, Y+54	; 0x36
    2b6c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	f8 01       	movw	r30, r16
    2b76:	80 83       	st	Z, r24
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	a2 83       	std	Z+2, r26	; 0x02
    2b7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b7e:	ce 01       	movw	r24, r28
    2b80:	8d 52       	subi	r24, 0x2D	; 45
    2b82:	9f 4f       	sbci	r25, 0xFF	; 255
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	60 81       	ld	r22, Z
    2b90:	71 81       	ldd	r23, Z+1	; 0x01
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    2b9a:	88 23       	and	r24, r24
    2b9c:	4c f4       	brge	.+18     	; 0x2bb0 <LCD_General_Question+0x1202>
		__ticks = 1;
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	89 52       	subi	r24, 0x29	; 41
    2ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba4:	21 e0       	ldi	r18, 0x01	; 1
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	fc 01       	movw	r30, r24
    2baa:	31 83       	std	Z+1, r19	; 0x01
    2bac:	20 83       	st	Z, r18
    2bae:	69 c0       	rjmp	.+210    	; 0x2c82 <LCD_General_Question+0x12d4>
	else if (__tmp > 65535)
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	8d 52       	subi	r24, 0x2D	; 45
    2bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	60 81       	ld	r22, Z
    2bc2:	71 81       	ldd	r23, Z+1	; 0x01
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	0c f0       	brlt	.+2      	; 0x2bd2 <LCD_General_Question+0x1224>
    2bd0:	46 c0       	rjmp	.+140    	; 0x2c5e <LCD_General_Question+0x12b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e2       	ldi	r20, 0x20	; 32
    2bd8:	51 e4       	ldi	r21, 0x41	; 65
    2bda:	6b a9       	ldd	r22, Y+51	; 0x33
    2bdc:	7c a9       	ldd	r23, Y+52	; 0x34
    2bde:	8d a9       	ldd	r24, Y+53	; 0x35
    2be0:	9e a9       	ldd	r25, Y+54	; 0x36
    2be2:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	8e 01       	movw	r16, r28
    2bec:	09 52       	subi	r16, 0x29	; 41
    2bee:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	f8 01       	movw	r30, r16
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	80 83       	st	Z, r24
    2c02:	24 c0       	rjmp	.+72     	; 0x2c4c <LCD_General_Question+0x129e>
    2c04:	ce 01       	movw	r24, r28
    2c06:	87 52       	subi	r24, 0x27	; 39
    2c08:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0a:	20 e9       	ldi	r18, 0x90	; 144
    2c0c:	31 e0       	ldi	r19, 0x01	; 1
    2c0e:	fc 01       	movw	r30, r24
    2c10:	31 83       	std	Z+1, r19	; 0x01
    2c12:	20 83       	st	Z, r18
    2c14:	ce 01       	movw	r24, r28
    2c16:	87 52       	subi	r24, 0x27	; 39
    2c18:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	80 81       	ld	r24, Z
    2c1e:	91 81       	ldd	r25, Z+1	; 0x01
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <LCD_General_Question+0x1272>
    2c24:	9e 01       	movw	r18, r28
    2c26:	27 52       	subi	r18, 0x27	; 39
    2c28:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2a:	f9 01       	movw	r30, r18
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c30:	ce 01       	movw	r24, r28
    2c32:	89 52       	subi	r24, 0x29	; 41
    2c34:	9f 4f       	sbci	r25, 0xFF	; 255
    2c36:	9e 01       	movw	r18, r28
    2c38:	29 52       	subi	r18, 0x29	; 41
    2c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3c:	f9 01       	movw	r30, r18
    2c3e:	20 81       	ld	r18, Z
    2c40:	31 81       	ldd	r19, Z+1	; 0x01
    2c42:	21 50       	subi	r18, 0x01	; 1
    2c44:	31 09       	sbc	r19, r1
    2c46:	fc 01       	movw	r30, r24
    2c48:	31 83       	std	Z+1, r19	; 0x01
    2c4a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4c:	ce 01       	movw	r24, r28
    2c4e:	89 52       	subi	r24, 0x29	; 41
    2c50:	9f 4f       	sbci	r25, 0xFF	; 255
    2c52:	fc 01       	movw	r30, r24
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	89 2b       	or	r24, r25
    2c5a:	a1 f6       	brne	.-88     	; 0x2c04 <LCD_General_Question+0x1256>
    2c5c:	2c c0       	rjmp	.+88     	; 0x2cb6 <LCD_General_Question+0x1308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	8e 01       	movw	r16, r28
    2c60:	09 52       	subi	r16, 0x29	; 41
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	ce 01       	movw	r24, r28
    2c66:	8d 52       	subi	r24, 0x2D	; 45
    2c68:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	91 83       	std	Z+1, r25	; 0x01
    2c80:	80 83       	st	Z, r24
    2c82:	ce 01       	movw	r24, r28
    2c84:	85 52       	subi	r24, 0x25	; 37
    2c86:	9f 4f       	sbci	r25, 0xFF	; 255
    2c88:	9e 01       	movw	r18, r28
    2c8a:	29 52       	subi	r18, 0x29	; 41
    2c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8e:	f9 01       	movw	r30, r18
    2c90:	20 81       	ld	r18, Z
    2c92:	31 81       	ldd	r19, Z+1	; 0x01
    2c94:	fc 01       	movw	r30, r24
    2c96:	31 83       	std	Z+1, r19	; 0x01
    2c98:	20 83       	st	Z, r18
    2c9a:	ce 01       	movw	r24, r28
    2c9c:	85 52       	subi	r24, 0x25	; 37
    2c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <LCD_General_Question+0x12f8>
    2caa:	9e 01       	movw	r18, r28
    2cac:	25 52       	subi	r18, 0x25	; 37
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	f9 01       	movw	r30, r18
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
  Delay(ONE_THOUSAND_MS);  
  LCD_displayStringRowColumn("CapitalOf Chile",LOW,LOW);       /* 1st line in LCD */        
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	86 eb       	ldi	r24, 0xB6	; 182
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
  LCD_displayStringRowColumn("is Maipu ?",HIGH,LOW);  /*santiago */ /* 2nd line in LCD */
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	61 e0       	ldi	r22, 0x01	; 1
    2cc6:	86 ec       	ldi	r24, 0xC6	; 198
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	aa ef       	ldi	r26, 0xFA	; 250
    2cd4:	b4 e4       	ldi	r27, 0x44	; 68
    2cd6:	8b a7       	std	Y+43, r24	; 0x2b
    2cd8:	9c a7       	std	Y+44, r25	; 0x2c
    2cda:	ad a7       	std	Y+45, r26	; 0x2d
    2cdc:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	8e 01       	movw	r16, r28
    2ce0:	07 53       	subi	r16, 0x37	; 55
    2ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	4a e7       	ldi	r20, 0x7A	; 122
    2cea:	55 e4       	ldi	r21, 0x45	; 69
    2cec:	6b a5       	ldd	r22, Y+43	; 0x2b
    2cee:	7c a5       	ldd	r23, Y+44	; 0x2c
    2cf0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cf2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cf4:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	80 83       	st	Z, r24
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	a2 83       	std	Z+2, r26	; 0x02
    2d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d06:	ce 01       	movw	r24, r28
    2d08:	87 53       	subi	r24, 0x37	; 55
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	fc 01       	movw	r30, r24
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	4c f4       	brge	.+18     	; 0x2d38 <LCD_General_Question+0x138a>
		__ticks = 1;
    2d26:	ce 01       	movw	r24, r28
    2d28:	83 53       	subi	r24, 0x33	; 51
    2d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2c:	21 e0       	ldi	r18, 0x01	; 1
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	fc 01       	movw	r30, r24
    2d32:	31 83       	std	Z+1, r19	; 0x01
    2d34:	20 83       	st	Z, r18
    2d36:	69 c0       	rjmp	.+210    	; 0x2e0a <LCD_General_Question+0x145c>
	else if (__tmp > 65535)
    2d38:	ce 01       	movw	r24, r28
    2d3a:	87 53       	subi	r24, 0x37	; 55
    2d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	3f ef       	ldi	r19, 0xFF	; 255
    2d42:	4f e7       	ldi	r20, 0x7F	; 127
    2d44:	57 e4       	ldi	r21, 0x47	; 71
    2d46:	fc 01       	movw	r30, r24
    2d48:	60 81       	ld	r22, Z
    2d4a:	71 81       	ldd	r23, Z+1	; 0x01
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    2d54:	18 16       	cp	r1, r24
    2d56:	0c f0       	brlt	.+2      	; 0x2d5a <LCD_General_Question+0x13ac>
    2d58:	46 c0       	rjmp	.+140    	; 0x2de6 <LCD_General_Question+0x1438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e2       	ldi	r20, 0x20	; 32
    2d60:	51 e4       	ldi	r21, 0x41	; 65
    2d62:	6b a5       	ldd	r22, Y+43	; 0x2b
    2d64:	7c a5       	ldd	r23, Y+44	; 0x2c
    2d66:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d68:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d6a:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8e 01       	movw	r16, r28
    2d74:	03 53       	subi	r16, 0x33	; 51
    2d76:	1f 4f       	sbci	r17, 0xFF	; 255
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	f8 01       	movw	r30, r16
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	80 83       	st	Z, r24
    2d8a:	24 c0       	rjmp	.+72     	; 0x2dd4 <LCD_General_Question+0x1426>
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	81 53       	subi	r24, 0x31	; 49
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	20 e9       	ldi	r18, 0x90	; 144
    2d94:	31 e0       	ldi	r19, 0x01	; 1
    2d96:	fc 01       	movw	r30, r24
    2d98:	31 83       	std	Z+1, r19	; 0x01
    2d9a:	20 83       	st	Z, r18
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	81 53       	subi	r24, 0x31	; 49
    2da0:	9f 4f       	sbci	r25, 0xFF	; 255
    2da2:	fc 01       	movw	r30, r24
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <LCD_General_Question+0x13fa>
    2dac:	9e 01       	movw	r18, r28
    2dae:	21 53       	subi	r18, 0x31	; 49
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    2db2:	f9 01       	movw	r30, r18
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db8:	ce 01       	movw	r24, r28
    2dba:	83 53       	subi	r24, 0x33	; 51
    2dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbe:	9e 01       	movw	r18, r28
    2dc0:	23 53       	subi	r18, 0x33	; 51
    2dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc4:	f9 01       	movw	r30, r18
    2dc6:	20 81       	ld	r18, Z
    2dc8:	31 81       	ldd	r19, Z+1	; 0x01
    2dca:	21 50       	subi	r18, 0x01	; 1
    2dcc:	31 09       	sbc	r19, r1
    2dce:	fc 01       	movw	r30, r24
    2dd0:	31 83       	std	Z+1, r19	; 0x01
    2dd2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	83 53       	subi	r24, 0x33	; 51
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	fc 01       	movw	r30, r24
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	89 2b       	or	r24, r25
    2de2:	a1 f6       	brne	.-88     	; 0x2d8c <LCD_General_Question+0x13de>
    2de4:	2c c0       	rjmp	.+88     	; 0x2e3e <LCD_General_Question+0x1490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de6:	8e 01       	movw	r16, r28
    2de8:	03 53       	subi	r16, 0x33	; 51
    2dea:	1f 4f       	sbci	r17, 0xFF	; 255
    2dec:	ce 01       	movw	r24, r28
    2dee:	87 53       	subi	r24, 0x37	; 55
    2df0:	9f 4f       	sbci	r25, 0xFF	; 255
    2df2:	fc 01       	movw	r30, r24
    2df4:	60 81       	ld	r22, Z
    2df6:	71 81       	ldd	r23, Z+1	; 0x01
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	f8 01       	movw	r30, r16
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	80 83       	st	Z, r24
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	8f 52       	subi	r24, 0x2F	; 47
    2e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e10:	9e 01       	movw	r18, r28
    2e12:	23 53       	subi	r18, 0x33	; 51
    2e14:	3f 4f       	sbci	r19, 0xFF	; 255
    2e16:	f9 01       	movw	r30, r18
    2e18:	20 81       	ld	r18, Z
    2e1a:	31 81       	ldd	r19, Z+1	; 0x01
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	31 83       	std	Z+1, r19	; 0x01
    2e20:	20 83       	st	Z, r18
    2e22:	ce 01       	movw	r24, r28
    2e24:	8f 52       	subi	r24, 0x2F	; 47
    2e26:	9f 4f       	sbci	r25, 0xFF	; 255
    2e28:	fc 01       	movw	r30, r24
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <LCD_General_Question+0x1480>
    2e32:	9e 01       	movw	r18, r28
    2e34:	2f 52       	subi	r18, 0x2F	; 47
    2e36:	3f 4f       	sbci	r19, 0xFF	; 255
    2e38:	f9 01       	movw	r30, r18
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	80 83       	st	Z, r24
  Delay(TWO_THOUSAND_MS);
  while(!(DIO_ReadPin(BUTTON0)) && !(DIO_ReadPin(BUTTON1)) );    /* pulling two buttons until one pressed */
    2e3e:	00 00       	nop
    2e40:	8a e0       	ldi	r24, 0x0A	; 10
    2e42:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    2e46:	88 23       	and	r24, r24
    2e48:	29 f4       	brne	.+10     	; 0x2e54 <LCD_General_Question+0x14a6>
    2e4a:	84 e1       	ldi	r24, 0x14	; 20
    2e4c:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    2e50:	88 23       	and	r24, r24
    2e52:	b1 f3       	breq	.-20     	; 0x2e40 <LCD_General_Question+0x1492>
  if(!(DIO_ReadPin(BUTTON0))) {                                  /* if answer is wrong show sad emoji */
    2e54:	8a e0       	ldi	r24, 0x0A	; 10
    2e56:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    2e5a:	88 23       	and	r24, r24
    2e5c:	09 f0       	breq	.+2      	; 0x2e60 <LCD_General_Question+0x14b2>
    2e5e:	ca c0       	rjmp	.+404    	; 0x2ff4 <LCD_General_Question+0x1646>
	  LCD_sendCommand(CLEAR_SCREEN);                    
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	  emoji_sad_init();
    2e66:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <emoji_sad_init>
	  LCD_sendCommand(FIRST_LINE);
    2e6a:	80 e8       	ldi	r24, 0x80	; 128
    2e6c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	  LCD_displayChar(LOW);                                      /*display first char created  */
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
	  LCD_displayChar(HIGH);                                     /*display second char created */
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e8       	ldi	r25, 0x80	; 128
    2e80:	ab e3       	ldi	r26, 0x3B	; 59
    2e82:	b5 e4       	ldi	r27, 0x45	; 69
    2e84:	8f a7       	std	Y+47, r24	; 0x2f
    2e86:	98 ab       	std	Y+48, r25	; 0x30
    2e88:	a9 ab       	std	Y+49, r26	; 0x31
    2e8a:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e8c:	8e 01       	movw	r16, r28
    2e8e:	03 52       	subi	r16, 0x23	; 35
    2e90:	1f 4f       	sbci	r17, 0xFF	; 255
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a e7       	ldi	r20, 0x7A	; 122
    2e98:	55 e4       	ldi	r21, 0x45	; 69
    2e9a:	6f a5       	ldd	r22, Y+47	; 0x2f
    2e9c:	78 a9       	ldd	r23, Y+48	; 0x30
    2e9e:	89 a9       	ldd	r24, Y+49	; 0x31
    2ea0:	9a a9       	ldd	r25, Y+50	; 0x32
    2ea2:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	f8 01       	movw	r30, r16
    2eac:	80 83       	st	Z, r24
    2eae:	91 83       	std	Z+1, r25	; 0x01
    2eb0:	a2 83       	std	Z+2, r26	; 0x02
    2eb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eb4:	ce 01       	movw	r24, r28
    2eb6:	83 52       	subi	r24, 0x23	; 35
    2eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    2ed0:	88 23       	and	r24, r24
    2ed2:	4c f4       	brge	.+18     	; 0x2ee6 <LCD_General_Question+0x1538>
		__ticks = 1;
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	8f 51       	subi	r24, 0x1F	; 31
    2ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eda:	21 e0       	ldi	r18, 0x01	; 1
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	fc 01       	movw	r30, r24
    2ee0:	31 83       	std	Z+1, r19	; 0x01
    2ee2:	20 83       	st	Z, r18
    2ee4:	69 c0       	rjmp	.+210    	; 0x2fb8 <LCD_General_Question+0x160a>
	else if (__tmp > 65535)
    2ee6:	ce 01       	movw	r24, r28
    2ee8:	83 52       	subi	r24, 0x23	; 35
    2eea:	9f 4f       	sbci	r25, 0xFF	; 255
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	3f ef       	ldi	r19, 0xFF	; 255
    2ef0:	4f e7       	ldi	r20, 0x7F	; 127
    2ef2:	57 e4       	ldi	r21, 0x47	; 71
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	60 81       	ld	r22, Z
    2ef8:	71 81       	ldd	r23, Z+1	; 0x01
    2efa:	82 81       	ldd	r24, Z+2	; 0x02
    2efc:	93 81       	ldd	r25, Z+3	; 0x03
    2efe:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    2f02:	18 16       	cp	r1, r24
    2f04:	0c f0       	brlt	.+2      	; 0x2f08 <LCD_General_Question+0x155a>
    2f06:	46 c0       	rjmp	.+140    	; 0x2f94 <LCD_General_Question+0x15e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e2       	ldi	r20, 0x20	; 32
    2f0e:	51 e4       	ldi	r21, 0x41	; 65
    2f10:	6f a5       	ldd	r22, Y+47	; 0x2f
    2f12:	78 a9       	ldd	r23, Y+48	; 0x30
    2f14:	89 a9       	ldd	r24, Y+49	; 0x31
    2f16:	9a a9       	ldd	r25, Y+50	; 0x32
    2f18:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	8e 01       	movw	r16, r28
    2f22:	0f 51       	subi	r16, 0x1F	; 31
    2f24:	1f 4f       	sbci	r17, 0xFF	; 255
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	f8 01       	movw	r30, r16
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	80 83       	st	Z, r24
    2f38:	24 c0       	rjmp	.+72     	; 0x2f82 <LCD_General_Question+0x15d4>
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	8d 51       	subi	r24, 0x1D	; 29
    2f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f40:	20 e9       	ldi	r18, 0x90	; 144
    2f42:	31 e0       	ldi	r19, 0x01	; 1
    2f44:	fc 01       	movw	r30, r24
    2f46:	31 83       	std	Z+1, r19	; 0x01
    2f48:	20 83       	st	Z, r18
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	8d 51       	subi	r24, 0x1D	; 29
    2f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f50:	fc 01       	movw	r30, r24
    2f52:	80 81       	ld	r24, Z
    2f54:	91 81       	ldd	r25, Z+1	; 0x01
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_General_Question+0x15a8>
    2f5a:	9e 01       	movw	r18, r28
    2f5c:	2d 51       	subi	r18, 0x1D	; 29
    2f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f60:	f9 01       	movw	r30, r18
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f66:	ce 01       	movw	r24, r28
    2f68:	8f 51       	subi	r24, 0x1F	; 31
    2f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6c:	9e 01       	movw	r18, r28
    2f6e:	2f 51       	subi	r18, 0x1F	; 31
    2f70:	3f 4f       	sbci	r19, 0xFF	; 255
    2f72:	f9 01       	movw	r30, r18
    2f74:	20 81       	ld	r18, Z
    2f76:	31 81       	ldd	r19, Z+1	; 0x01
    2f78:	21 50       	subi	r18, 0x01	; 1
    2f7a:	31 09       	sbc	r19, r1
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	31 83       	std	Z+1, r19	; 0x01
    2f80:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	ce 01       	movw	r24, r28
    2f84:	8f 51       	subi	r24, 0x1F	; 31
    2f86:	9f 4f       	sbci	r25, 0xFF	; 255
    2f88:	fc 01       	movw	r30, r24
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	89 2b       	or	r24, r25
    2f90:	a1 f6       	brne	.-88     	; 0x2f3a <LCD_General_Question+0x158c>
    2f92:	2c c0       	rjmp	.+88     	; 0x2fec <LCD_General_Question+0x163e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f94:	8e 01       	movw	r16, r28
    2f96:	0f 51       	subi	r16, 0x1F	; 31
    2f98:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	83 52       	subi	r24, 0x23	; 35
    2f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	f8 01       	movw	r30, r16
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	80 83       	st	Z, r24
    2fb8:	ce 01       	movw	r24, r28
    2fba:	8b 51       	subi	r24, 0x1B	; 27
    2fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fbe:	9e 01       	movw	r18, r28
    2fc0:	2f 51       	subi	r18, 0x1F	; 31
    2fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc4:	f9 01       	movw	r30, r18
    2fc6:	20 81       	ld	r18, Z
    2fc8:	31 81       	ldd	r19, Z+1	; 0x01
    2fca:	fc 01       	movw	r30, r24
    2fcc:	31 83       	std	Z+1, r19	; 0x01
    2fce:	20 83       	st	Z, r18
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	8b 51       	subi	r24, 0x1B	; 27
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	80 81       	ld	r24, Z
    2fda:	91 81       	ldd	r25, Z+1	; 0x01
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <LCD_General_Question+0x162e>
    2fe0:	9e 01       	movw	r18, r28
    2fe2:	2b 51       	subi	r18, 0x1B	; 27
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	f9 01       	movw	r30, r18
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
	  Delay(THREE_THOUSAND_MS);
	  count_wronge++;											 /* increment counter of wrong answers */
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	8f 5f       	subi	r24, 0xFF	; 255
    2ff0:	8a 83       	std	Y+2, r24	; 0x02
    2ff2:	c9 c0       	rjmp	.+402    	; 0x3186 <LCD_General_Question+0x17d8>
  } 
  else {  LCD_sendCommand(CLEAR_SCREEN);                          /*if answer is right show happy emoji */
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	  emoji_happy_init(); 
    2ffa:	0e 94 a9 0b 	call	0x1752	; 0x1752 <emoji_happy_init>
	  LCD_sendCommand(FIRST_LINE);
    2ffe:	80 e8       	ldi	r24, 0x80	; 128
    3000:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	  LCD_displayChar(LOW);										 /*display first char created  */
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
	  LCD_displayChar(HIGH);									 /*display second char created */
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e8       	ldi	r25, 0x80	; 128
    3014:	ab e3       	ldi	r26, 0x3B	; 59
    3016:	b5 e4       	ldi	r27, 0x45	; 69
    3018:	8f ab       	std	Y+55, r24	; 0x37
    301a:	98 af       	std	Y+56, r25	; 0x38
    301c:	a9 af       	std	Y+57, r26	; 0x39
    301e:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3020:	8e 01       	movw	r16, r28
    3022:	09 51       	subi	r16, 0x19	; 25
    3024:	1f 4f       	sbci	r17, 0xFF	; 255
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a e7       	ldi	r20, 0x7A	; 122
    302c:	55 e4       	ldi	r21, 0x45	; 69
    302e:	6f a9       	ldd	r22, Y+55	; 0x37
    3030:	78 ad       	ldd	r23, Y+56	; 0x38
    3032:	89 ad       	ldd	r24, Y+57	; 0x39
    3034:	9a ad       	ldd	r25, Y+58	; 0x3a
    3036:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	f8 01       	movw	r30, r16
    3040:	80 83       	st	Z, r24
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	a2 83       	std	Z+2, r26	; 0x02
    3046:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3048:	ce 01       	movw	r24, r28
    304a:	89 51       	subi	r24, 0x19	; 25
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e8       	ldi	r20, 0x80	; 128
    3054:	5f e3       	ldi	r21, 0x3F	; 63
    3056:	fc 01       	movw	r30, r24
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    3064:	88 23       	and	r24, r24
    3066:	4c f4       	brge	.+18     	; 0x307a <LCD_General_Question+0x16cc>
		__ticks = 1;
    3068:	ce 01       	movw	r24, r28
    306a:	85 51       	subi	r24, 0x15	; 21
    306c:	9f 4f       	sbci	r25, 0xFF	; 255
    306e:	21 e0       	ldi	r18, 0x01	; 1
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	fc 01       	movw	r30, r24
    3074:	31 83       	std	Z+1, r19	; 0x01
    3076:	20 83       	st	Z, r18
    3078:	69 c0       	rjmp	.+210    	; 0x314c <LCD_General_Question+0x179e>
	else if (__tmp > 65535)
    307a:	ce 01       	movw	r24, r28
    307c:	89 51       	subi	r24, 0x19	; 25
    307e:	9f 4f       	sbci	r25, 0xFF	; 255
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	fc 01       	movw	r30, r24
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	93 81       	ldd	r25, Z+3	; 0x03
    3092:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    3096:	18 16       	cp	r1, r24
    3098:	0c f0       	brlt	.+2      	; 0x309c <LCD_General_Question+0x16ee>
    309a:	46 c0       	rjmp	.+140    	; 0x3128 <LCD_General_Question+0x177a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e2       	ldi	r20, 0x20	; 32
    30a2:	51 e4       	ldi	r21, 0x41	; 65
    30a4:	6f a9       	ldd	r22, Y+55	; 0x37
    30a6:	78 ad       	ldd	r23, Y+56	; 0x38
    30a8:	89 ad       	ldd	r24, Y+57	; 0x39
    30aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    30ac:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	8e 01       	movw	r16, r28
    30b6:	05 51       	subi	r16, 0x15	; 21
    30b8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	f8 01       	movw	r30, r16
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
    30cc:	24 c0       	rjmp	.+72     	; 0x3116 <LCD_General_Question+0x1768>
    30ce:	ce 01       	movw	r24, r28
    30d0:	83 51       	subi	r24, 0x13	; 19
    30d2:	9f 4f       	sbci	r25, 0xFF	; 255
    30d4:	20 e9       	ldi	r18, 0x90	; 144
    30d6:	31 e0       	ldi	r19, 0x01	; 1
    30d8:	fc 01       	movw	r30, r24
    30da:	31 83       	std	Z+1, r19	; 0x01
    30dc:	20 83       	st	Z, r18
    30de:	ce 01       	movw	r24, r28
    30e0:	83 51       	subi	r24, 0x13	; 19
    30e2:	9f 4f       	sbci	r25, 0xFF	; 255
    30e4:	fc 01       	movw	r30, r24
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_General_Question+0x173c>
    30ee:	9e 01       	movw	r18, r28
    30f0:	23 51       	subi	r18, 0x13	; 19
    30f2:	3f 4f       	sbci	r19, 0xFF	; 255
    30f4:	f9 01       	movw	r30, r18
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fa:	ce 01       	movw	r24, r28
    30fc:	85 51       	subi	r24, 0x15	; 21
    30fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3100:	9e 01       	movw	r18, r28
    3102:	25 51       	subi	r18, 0x15	; 21
    3104:	3f 4f       	sbci	r19, 0xFF	; 255
    3106:	f9 01       	movw	r30, r18
    3108:	20 81       	ld	r18, Z
    310a:	31 81       	ldd	r19, Z+1	; 0x01
    310c:	21 50       	subi	r18, 0x01	; 1
    310e:	31 09       	sbc	r19, r1
    3110:	fc 01       	movw	r30, r24
    3112:	31 83       	std	Z+1, r19	; 0x01
    3114:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3116:	ce 01       	movw	r24, r28
    3118:	85 51       	subi	r24, 0x15	; 21
    311a:	9f 4f       	sbci	r25, 0xFF	; 255
    311c:	fc 01       	movw	r30, r24
    311e:	80 81       	ld	r24, Z
    3120:	91 81       	ldd	r25, Z+1	; 0x01
    3122:	89 2b       	or	r24, r25
    3124:	a1 f6       	brne	.-88     	; 0x30ce <LCD_General_Question+0x1720>
    3126:	2c c0       	rjmp	.+88     	; 0x3180 <LCD_General_Question+0x17d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3128:	8e 01       	movw	r16, r28
    312a:	05 51       	subi	r16, 0x15	; 21
    312c:	1f 4f       	sbci	r17, 0xFF	; 255
    312e:	ce 01       	movw	r24, r28
    3130:	89 51       	subi	r24, 0x19	; 25
    3132:	9f 4f       	sbci	r25, 0xFF	; 255
    3134:	fc 01       	movw	r30, r24
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	f8 01       	movw	r30, r16
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	80 83       	st	Z, r24
    314c:	ce 01       	movw	r24, r28
    314e:	81 51       	subi	r24, 0x11	; 17
    3150:	9f 4f       	sbci	r25, 0xFF	; 255
    3152:	9e 01       	movw	r18, r28
    3154:	25 51       	subi	r18, 0x15	; 21
    3156:	3f 4f       	sbci	r19, 0xFF	; 255
    3158:	f9 01       	movw	r30, r18
    315a:	20 81       	ld	r18, Z
    315c:	31 81       	ldd	r19, Z+1	; 0x01
    315e:	fc 01       	movw	r30, r24
    3160:	31 83       	std	Z+1, r19	; 0x01
    3162:	20 83       	st	Z, r18
    3164:	ce 01       	movw	r24, r28
    3166:	81 51       	subi	r24, 0x11	; 17
    3168:	9f 4f       	sbci	r25, 0xFF	; 255
    316a:	fc 01       	movw	r30, r24
    316c:	80 81       	ld	r24, Z
    316e:	91 81       	ldd	r25, Z+1	; 0x01
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <LCD_General_Question+0x17c2>
    3174:	9e 01       	movw	r18, r28
    3176:	21 51       	subi	r18, 0x11	; 17
    3178:	3f 4f       	sbci	r19, 0xFF	; 255
    317a:	f9 01       	movw	r30, r18
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	80 83       	st	Z, r24
	  Delay(THREE_THOUSAND_MS);  
	  count_right++;                                             /* increment counter of right answers */
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	8f 5f       	subi	r24, 0xFF	; 255
    3184:	89 83       	std	Y+1, r24	; 0x01
  } 
	/* fifth Question */
	  LCD_sendCommand(CLEAR_SCREEN);
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
    318c:	9e 01       	movw	r18, r28
    318e:	2d 5b       	subi	r18, 0xBD	; 189
    3190:	3f 4f       	sbci	r19, 0xFF	; 255
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	aa e7       	ldi	r26, 0x7A	; 122
    3198:	b4 e4       	ldi	r27, 0x44	; 68
    319a:	f9 01       	movw	r30, r18
    319c:	80 83       	st	Z, r24
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	a2 83       	std	Z+2, r26	; 0x02
    31a2:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    31a4:	8e 01       	movw	r16, r28
    31a6:	05 50       	subi	r16, 0x05	; 5
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	ce 01       	movw	r24, r28
    31ac:	8d 5b       	subi	r24, 0xBD	; 189
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	4a e7       	ldi	r20, 0x7A	; 122
    31b6:	55 e4       	ldi	r21, 0x45	; 69
    31b8:	fc 01       	movw	r30, r24
    31ba:	60 81       	ld	r22, Z
    31bc:	71 81       	ldd	r23, Z+1	; 0x01
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
    31c2:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	f8 01       	movw	r30, r16
    31cc:	80 83       	st	Z, r24
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	a2 83       	std	Z+2, r26	; 0x02
    31d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d4:	ce 01       	movw	r24, r28
    31d6:	85 50       	subi	r24, 0x05	; 5
    31d8:	9f 4f       	sbci	r25, 0xFF	; 255
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e8       	ldi	r20, 0x80	; 128
    31e0:	5f e3       	ldi	r21, 0x3F	; 63
    31e2:	fc 01       	movw	r30, r24
    31e4:	60 81       	ld	r22, Z
    31e6:	71 81       	ldd	r23, Z+1	; 0x01
    31e8:	82 81       	ldd	r24, Z+2	; 0x02
    31ea:	93 81       	ldd	r25, Z+3	; 0x03
    31ec:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    31f0:	88 23       	and	r24, r24
    31f2:	4c f4       	brge	.+18     	; 0x3206 <LCD_General_Question+0x1858>
		__ticks = 1;
    31f4:	ce 01       	movw	r24, r28
    31f6:	81 50       	subi	r24, 0x01	; 1
    31f8:	9f 4f       	sbci	r25, 0xFF	; 255
    31fa:	21 e0       	ldi	r18, 0x01	; 1
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	fc 01       	movw	r30, r24
    3200:	31 83       	std	Z+1, r19	; 0x01
    3202:	20 83       	st	Z, r18
    3204:	6d c0       	rjmp	.+218    	; 0x32e0 <LCD_General_Question+0x1932>
	else if (__tmp > 65535)
    3206:	ce 01       	movw	r24, r28
    3208:	85 50       	subi	r24, 0x05	; 5
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	3f ef       	ldi	r19, 0xFF	; 255
    3210:	4f e7       	ldi	r20, 0x7F	; 127
    3212:	57 e4       	ldi	r21, 0x47	; 71
    3214:	fc 01       	movw	r30, r24
    3216:	60 81       	ld	r22, Z
    3218:	71 81       	ldd	r23, Z+1	; 0x01
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	93 81       	ldd	r25, Z+3	; 0x03
    321e:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    3222:	18 16       	cp	r1, r24
    3224:	0c f0       	brlt	.+2      	; 0x3228 <LCD_General_Question+0x187a>
    3226:	4a c0       	rjmp	.+148    	; 0x32bc <LCD_General_Question+0x190e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3228:	ce 01       	movw	r24, r28
    322a:	8d 5b       	subi	r24, 0xBD	; 189
    322c:	9f 4f       	sbci	r25, 0xFF	; 255
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	fc 01       	movw	r30, r24
    3238:	60 81       	ld	r22, Z
    323a:	71 81       	ldd	r23, Z+1	; 0x01
    323c:	82 81       	ldd	r24, Z+2	; 0x02
    323e:	93 81       	ldd	r25, Z+3	; 0x03
    3240:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	8e 01       	movw	r16, r28
    324a:	01 50       	subi	r16, 0x01	; 1
    324c:	1f 4f       	sbci	r17, 0xFF	; 255
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	f8 01       	movw	r30, r16
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	24 c0       	rjmp	.+72     	; 0x32aa <LCD_General_Question+0x18fc>
    3262:	ce 01       	movw	r24, r28
    3264:	8f 5f       	subi	r24, 0xFF	; 255
    3266:	9e 4f       	sbci	r25, 0xFE	; 254
    3268:	20 e9       	ldi	r18, 0x90	; 144
    326a:	31 e0       	ldi	r19, 0x01	; 1
    326c:	fc 01       	movw	r30, r24
    326e:	31 83       	std	Z+1, r19	; 0x01
    3270:	20 83       	st	Z, r18
    3272:	ce 01       	movw	r24, r28
    3274:	8f 5f       	subi	r24, 0xFF	; 255
    3276:	9e 4f       	sbci	r25, 0xFE	; 254
    3278:	fc 01       	movw	r30, r24
    327a:	80 81       	ld	r24, Z
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	f1 f7       	brne	.-4      	; 0x327e <LCD_General_Question+0x18d0>
    3282:	9e 01       	movw	r18, r28
    3284:	2f 5f       	subi	r18, 0xFF	; 255
    3286:	3e 4f       	sbci	r19, 0xFE	; 254
    3288:	f9 01       	movw	r30, r18
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328e:	ce 01       	movw	r24, r28
    3290:	81 50       	subi	r24, 0x01	; 1
    3292:	9f 4f       	sbci	r25, 0xFF	; 255
    3294:	9e 01       	movw	r18, r28
    3296:	21 50       	subi	r18, 0x01	; 1
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
    329a:	f9 01       	movw	r30, r18
    329c:	20 81       	ld	r18, Z
    329e:	31 81       	ldd	r19, Z+1	; 0x01
    32a0:	21 50       	subi	r18, 0x01	; 1
    32a2:	31 09       	sbc	r19, r1
    32a4:	fc 01       	movw	r30, r24
    32a6:	31 83       	std	Z+1, r19	; 0x01
    32a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32aa:	ce 01       	movw	r24, r28
    32ac:	81 50       	subi	r24, 0x01	; 1
    32ae:	9f 4f       	sbci	r25, 0xFF	; 255
    32b0:	fc 01       	movw	r30, r24
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	89 2b       	or	r24, r25
    32b8:	a1 f6       	brne	.-88     	; 0x3262 <LCD_General_Question+0x18b4>
    32ba:	2c c0       	rjmp	.+88     	; 0x3314 <LCD_General_Question+0x1966>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32bc:	8e 01       	movw	r16, r28
    32be:	01 50       	subi	r16, 0x01	; 1
    32c0:	1f 4f       	sbci	r17, 0xFF	; 255
    32c2:	ce 01       	movw	r24, r28
    32c4:	85 50       	subi	r24, 0x05	; 5
    32c6:	9f 4f       	sbci	r25, 0xFF	; 255
    32c8:	fc 01       	movw	r30, r24
    32ca:	60 81       	ld	r22, Z
    32cc:	71 81       	ldd	r23, Z+1	; 0x01
    32ce:	82 81       	ldd	r24, Z+2	; 0x02
    32d0:	93 81       	ldd	r25, Z+3	; 0x03
    32d2:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	f8 01       	movw	r30, r16
    32dc:	91 83       	std	Z+1, r25	; 0x01
    32de:	80 83       	st	Z, r24
    32e0:	ce 01       	movw	r24, r28
    32e2:	8d 5f       	subi	r24, 0xFD	; 253
    32e4:	9e 4f       	sbci	r25, 0xFE	; 254
    32e6:	9e 01       	movw	r18, r28
    32e8:	21 50       	subi	r18, 0x01	; 1
    32ea:	3f 4f       	sbci	r19, 0xFF	; 255
    32ec:	f9 01       	movw	r30, r18
    32ee:	20 81       	ld	r18, Z
    32f0:	31 81       	ldd	r19, Z+1	; 0x01
    32f2:	fc 01       	movw	r30, r24
    32f4:	31 83       	std	Z+1, r19	; 0x01
    32f6:	20 83       	st	Z, r18
    32f8:	ce 01       	movw	r24, r28
    32fa:	8d 5f       	subi	r24, 0xFD	; 253
    32fc:	9e 4f       	sbci	r25, 0xFE	; 254
    32fe:	fc 01       	movw	r30, r24
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <LCD_General_Question+0x1956>
    3308:	9e 01       	movw	r18, r28
    330a:	2d 5f       	subi	r18, 0xFD	; 253
    330c:	3e 4f       	sbci	r19, 0xFE	; 254
    330e:	f9 01       	movw	r30, r18
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
	  Delay(ONE_THOUSAND_MS);
	  LCD_displayStringRowColumn("end of worldwar",LOW,LOW);           /* 1st line in LCD */   
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	81 ed       	ldi	r24, 0xD1	; 209
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
	  LCD_displayStringRowColumn("two is 1944 ?",HIGH,LOW);  /*1945 */ /* 2nd line in LCD */   
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	61 e0       	ldi	r22, 0x01	; 1
    3324:	81 ee       	ldi	r24, 0xE1	; 225
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	aa ef       	ldi	r26, 0xFA	; 250
    3332:	b4 e4       	ldi	r27, 0x44	; 68
    3334:	8b af       	std	Y+59, r24	; 0x3b
    3336:	9c af       	std	Y+60, r25	; 0x3c
    3338:	ad af       	std	Y+61, r26	; 0x3d
    333a:	be af       	std	Y+62, r27	; 0x3e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    333c:	8e 01       	movw	r16, r28
    333e:	0f 50       	subi	r16, 0x0F	; 15
    3340:	1f 4f       	sbci	r17, 0xFF	; 255
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4a e7       	ldi	r20, 0x7A	; 122
    3348:	55 e4       	ldi	r21, 0x45	; 69
    334a:	6b ad       	ldd	r22, Y+59	; 0x3b
    334c:	7c ad       	ldd	r23, Y+60	; 0x3c
    334e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3350:	9e ad       	ldd	r25, Y+62	; 0x3e
    3352:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	f8 01       	movw	r30, r16
    335c:	80 83       	st	Z, r24
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	a2 83       	std	Z+2, r26	; 0x02
    3362:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3364:	ce 01       	movw	r24, r28
    3366:	8f 50       	subi	r24, 0x0F	; 15
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e8       	ldi	r20, 0x80	; 128
    3370:	5f e3       	ldi	r21, 0x3F	; 63
    3372:	fc 01       	movw	r30, r24
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	93 81       	ldd	r25, Z+3	; 0x03
    337c:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    3380:	88 23       	and	r24, r24
    3382:	4c f4       	brge	.+18     	; 0x3396 <LCD_General_Question+0x19e8>
		__ticks = 1;
    3384:	ce 01       	movw	r24, r28
    3386:	8b 50       	subi	r24, 0x0B	; 11
    3388:	9f 4f       	sbci	r25, 0xFF	; 255
    338a:	21 e0       	ldi	r18, 0x01	; 1
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	fc 01       	movw	r30, r24
    3390:	31 83       	std	Z+1, r19	; 0x01
    3392:	20 83       	st	Z, r18
    3394:	69 c0       	rjmp	.+210    	; 0x3468 <LCD_General_Question+0x1aba>
	else if (__tmp > 65535)
    3396:	ce 01       	movw	r24, r28
    3398:	8f 50       	subi	r24, 0x0F	; 15
    339a:	9f 4f       	sbci	r25, 0xFF	; 255
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	3f ef       	ldi	r19, 0xFF	; 255
    33a0:	4f e7       	ldi	r20, 0x7F	; 127
    33a2:	57 e4       	ldi	r21, 0x47	; 71
    33a4:	fc 01       	movw	r30, r24
    33a6:	60 81       	ld	r22, Z
    33a8:	71 81       	ldd	r23, Z+1	; 0x01
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    33b2:	18 16       	cp	r1, r24
    33b4:	0c f0       	brlt	.+2      	; 0x33b8 <LCD_General_Question+0x1a0a>
    33b6:	46 c0       	rjmp	.+140    	; 0x3444 <LCD_General_Question+0x1a96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e2       	ldi	r20, 0x20	; 32
    33be:	51 e4       	ldi	r21, 0x41	; 65
    33c0:	6b ad       	ldd	r22, Y+59	; 0x3b
    33c2:	7c ad       	ldd	r23, Y+60	; 0x3c
    33c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    33c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    33c8:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	8e 01       	movw	r16, r28
    33d2:	0b 50       	subi	r16, 0x0B	; 11
    33d4:	1f 4f       	sbci	r17, 0xFF	; 255
    33d6:	bc 01       	movw	r22, r24
    33d8:	cd 01       	movw	r24, r26
    33da:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	f8 01       	movw	r30, r16
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	80 83       	st	Z, r24
    33e8:	24 c0       	rjmp	.+72     	; 0x3432 <LCD_General_Question+0x1a84>
    33ea:	ce 01       	movw	r24, r28
    33ec:	89 50       	subi	r24, 0x09	; 9
    33ee:	9f 4f       	sbci	r25, 0xFF	; 255
    33f0:	20 e9       	ldi	r18, 0x90	; 144
    33f2:	31 e0       	ldi	r19, 0x01	; 1
    33f4:	fc 01       	movw	r30, r24
    33f6:	31 83       	std	Z+1, r19	; 0x01
    33f8:	20 83       	st	Z, r18
    33fa:	ce 01       	movw	r24, r28
    33fc:	89 50       	subi	r24, 0x09	; 9
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	fc 01       	movw	r30, r24
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <LCD_General_Question+0x1a58>
    340a:	9e 01       	movw	r18, r28
    340c:	29 50       	subi	r18, 0x09	; 9
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	f9 01       	movw	r30, r18
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3416:	ce 01       	movw	r24, r28
    3418:	8b 50       	subi	r24, 0x0B	; 11
    341a:	9f 4f       	sbci	r25, 0xFF	; 255
    341c:	9e 01       	movw	r18, r28
    341e:	2b 50       	subi	r18, 0x0B	; 11
    3420:	3f 4f       	sbci	r19, 0xFF	; 255
    3422:	f9 01       	movw	r30, r18
    3424:	20 81       	ld	r18, Z
    3426:	31 81       	ldd	r19, Z+1	; 0x01
    3428:	21 50       	subi	r18, 0x01	; 1
    342a:	31 09       	sbc	r19, r1
    342c:	fc 01       	movw	r30, r24
    342e:	31 83       	std	Z+1, r19	; 0x01
    3430:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3432:	ce 01       	movw	r24, r28
    3434:	8b 50       	subi	r24, 0x0B	; 11
    3436:	9f 4f       	sbci	r25, 0xFF	; 255
    3438:	fc 01       	movw	r30, r24
    343a:	80 81       	ld	r24, Z
    343c:	91 81       	ldd	r25, Z+1	; 0x01
    343e:	89 2b       	or	r24, r25
    3440:	a1 f6       	brne	.-88     	; 0x33ea <LCD_General_Question+0x1a3c>
    3442:	2c c0       	rjmp	.+88     	; 0x349c <LCD_General_Question+0x1aee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3444:	8e 01       	movw	r16, r28
    3446:	0b 50       	subi	r16, 0x0B	; 11
    3448:	1f 4f       	sbci	r17, 0xFF	; 255
    344a:	ce 01       	movw	r24, r28
    344c:	8f 50       	subi	r24, 0x0F	; 15
    344e:	9f 4f       	sbci	r25, 0xFF	; 255
    3450:	fc 01       	movw	r30, r24
    3452:	60 81       	ld	r22, Z
    3454:	71 81       	ldd	r23, Z+1	; 0x01
    3456:	82 81       	ldd	r24, Z+2	; 0x02
    3458:	93 81       	ldd	r25, Z+3	; 0x03
    345a:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	f8 01       	movw	r30, r16
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	80 83       	st	Z, r24
    3468:	ce 01       	movw	r24, r28
    346a:	87 50       	subi	r24, 0x07	; 7
    346c:	9f 4f       	sbci	r25, 0xFF	; 255
    346e:	9e 01       	movw	r18, r28
    3470:	2b 50       	subi	r18, 0x0B	; 11
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	f9 01       	movw	r30, r18
    3476:	20 81       	ld	r18, Z
    3478:	31 81       	ldd	r19, Z+1	; 0x01
    347a:	fc 01       	movw	r30, r24
    347c:	31 83       	std	Z+1, r19	; 0x01
    347e:	20 83       	st	Z, r18
    3480:	ce 01       	movw	r24, r28
    3482:	87 50       	subi	r24, 0x07	; 7
    3484:	9f 4f       	sbci	r25, 0xFF	; 255
    3486:	fc 01       	movw	r30, r24
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <LCD_General_Question+0x1ade>
    3490:	9e 01       	movw	r18, r28
    3492:	27 50       	subi	r18, 0x07	; 7
    3494:	3f 4f       	sbci	r19, 0xFF	; 255
    3496:	f9 01       	movw	r30, r18
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
	  Delay(TWO_THOUSAND_MS);
	  while(!(DIO_ReadPin(BUTTON0)) && !(DIO_ReadPin(BUTTON1)) );  /* pulling two buttons until one pressed */
    349c:	00 00       	nop
    349e:	8a e0       	ldi	r24, 0x0A	; 10
    34a0:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    34a4:	88 23       	and	r24, r24
    34a6:	29 f4       	brne	.+10     	; 0x34b2 <LCD_General_Question+0x1b04>
    34a8:	84 e1       	ldi	r24, 0x14	; 20
    34aa:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    34ae:	88 23       	and	r24, r24
    34b0:	b1 f3       	breq	.-20     	; 0x349e <LCD_General_Question+0x1af0>
	  if(!(DIO_ReadPin(BUTTON0))) {                                /* if answer is wrong show sad emoji */
    34b2:	8a e0       	ldi	r24, 0x0A	; 10
    34b4:	0e 94 29 01 	call	0x252	; 0x252 <DIO_ReadPin>
    34b8:	88 23       	and	r24, r24
    34ba:	09 f0       	breq	.+2      	; 0x34be <LCD_General_Question+0x1b10>
    34bc:	d4 c0       	rjmp	.+424    	; 0x3666 <LCD_General_Question+0x1cb8>
		  LCD_sendCommand(CLEAR_SCREEN);
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		  emoji_sad_init();
    34c4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <emoji_sad_init>
		  LCD_sendCommand(FIRST_LINE);
    34c8:	80 e8       	ldi	r24, 0x80	; 128
    34ca:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		  LCD_displayChar(LOW);                                    /*display first char created  */
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		  LCD_displayChar(HIGH);								   /*display second char created */
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    34da:	9e 01       	movw	r18, r28
    34dc:	21 5c       	subi	r18, 0xC1	; 193
    34de:	3f 4f       	sbci	r19, 0xFF	; 255
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e8       	ldi	r25, 0x80	; 128
    34e4:	ab e3       	ldi	r26, 0x3B	; 59
    34e6:	b5 e4       	ldi	r27, 0x45	; 69
    34e8:	f9 01       	movw	r30, r18
    34ea:	80 83       	st	Z, r24
    34ec:	91 83       	std	Z+1, r25	; 0x01
    34ee:	a2 83       	std	Z+2, r26	; 0x02
    34f0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    34f2:	8e 01       	movw	r16, r28
    34f4:	0b 5f       	subi	r16, 0xFB	; 251
    34f6:	1e 4f       	sbci	r17, 0xFE	; 254
    34f8:	ce 01       	movw	r24, r28
    34fa:	cf 96       	adiw	r24, 0x3f	; 63
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	4a e7       	ldi	r20, 0x7A	; 122
    3502:	55 e4       	ldi	r21, 0x45	; 69
    3504:	fc 01       	movw	r30, r24
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	f8 01       	movw	r30, r16
    3518:	80 83       	st	Z, r24
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	a2 83       	std	Z+2, r26	; 0x02
    351e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3520:	ce 01       	movw	r24, r28
    3522:	8b 5f       	subi	r24, 0xFB	; 251
    3524:	9e 4f       	sbci	r25, 0xFE	; 254
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e8       	ldi	r20, 0x80	; 128
    352c:	5f e3       	ldi	r21, 0x3F	; 63
    352e:	fc 01       	movw	r30, r24
    3530:	60 81       	ld	r22, Z
    3532:	71 81       	ldd	r23, Z+1	; 0x01
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    353c:	88 23       	and	r24, r24
    353e:	4c f4       	brge	.+18     	; 0x3552 <LCD_General_Question+0x1ba4>
		__ticks = 1;
    3540:	ce 01       	movw	r24, r28
    3542:	87 5f       	subi	r24, 0xF7	; 247
    3544:	9e 4f       	sbci	r25, 0xFE	; 254
    3546:	21 e0       	ldi	r18, 0x01	; 1
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	fc 01       	movw	r30, r24
    354c:	31 83       	std	Z+1, r19	; 0x01
    354e:	20 83       	st	Z, r18
    3550:	6c c0       	rjmp	.+216    	; 0x362a <LCD_General_Question+0x1c7c>
	else if (__tmp > 65535)
    3552:	ce 01       	movw	r24, r28
    3554:	8b 5f       	subi	r24, 0xFB	; 251
    3556:	9e 4f       	sbci	r25, 0xFE	; 254
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	fc 01       	movw	r30, r24
    3562:	60 81       	ld	r22, Z
    3564:	71 81       	ldd	r23, Z+1	; 0x01
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    356e:	18 16       	cp	r1, r24
    3570:	0c f0       	brlt	.+2      	; 0x3574 <LCD_General_Question+0x1bc6>
    3572:	49 c0       	rjmp	.+146    	; 0x3606 <LCD_General_Question+0x1c58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3574:	ce 01       	movw	r24, r28
    3576:	cf 96       	adiw	r24, 0x3f	; 63
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e2       	ldi	r20, 0x20	; 32
    357e:	51 e4       	ldi	r21, 0x41	; 65
    3580:	fc 01       	movw	r30, r24
    3582:	60 81       	ld	r22, Z
    3584:	71 81       	ldd	r23, Z+1	; 0x01
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	8e 01       	movw	r16, r28
    3594:	07 5f       	subi	r16, 0xF7	; 247
    3596:	1e 4f       	sbci	r17, 0xFE	; 254
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	f8 01       	movw	r30, r16
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
    35aa:	24 c0       	rjmp	.+72     	; 0x35f4 <LCD_General_Question+0x1c46>
    35ac:	ce 01       	movw	r24, r28
    35ae:	85 5f       	subi	r24, 0xF5	; 245
    35b0:	9e 4f       	sbci	r25, 0xFE	; 254
    35b2:	20 e9       	ldi	r18, 0x90	; 144
    35b4:	31 e0       	ldi	r19, 0x01	; 1
    35b6:	fc 01       	movw	r30, r24
    35b8:	31 83       	std	Z+1, r19	; 0x01
    35ba:	20 83       	st	Z, r18
    35bc:	ce 01       	movw	r24, r28
    35be:	85 5f       	subi	r24, 0xF5	; 245
    35c0:	9e 4f       	sbci	r25, 0xFE	; 254
    35c2:	fc 01       	movw	r30, r24
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <LCD_General_Question+0x1c1a>
    35cc:	9e 01       	movw	r18, r28
    35ce:	25 5f       	subi	r18, 0xF5	; 245
    35d0:	3e 4f       	sbci	r19, 0xFE	; 254
    35d2:	f9 01       	movw	r30, r18
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d8:	ce 01       	movw	r24, r28
    35da:	87 5f       	subi	r24, 0xF7	; 247
    35dc:	9e 4f       	sbci	r25, 0xFE	; 254
    35de:	9e 01       	movw	r18, r28
    35e0:	27 5f       	subi	r18, 0xF7	; 247
    35e2:	3e 4f       	sbci	r19, 0xFE	; 254
    35e4:	f9 01       	movw	r30, r18
    35e6:	20 81       	ld	r18, Z
    35e8:	31 81       	ldd	r19, Z+1	; 0x01
    35ea:	21 50       	subi	r18, 0x01	; 1
    35ec:	31 09       	sbc	r19, r1
    35ee:	fc 01       	movw	r30, r24
    35f0:	31 83       	std	Z+1, r19	; 0x01
    35f2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f4:	ce 01       	movw	r24, r28
    35f6:	87 5f       	subi	r24, 0xF7	; 247
    35f8:	9e 4f       	sbci	r25, 0xFE	; 254
    35fa:	fc 01       	movw	r30, r24
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	89 2b       	or	r24, r25
    3602:	a1 f6       	brne	.-88     	; 0x35ac <LCD_General_Question+0x1bfe>
    3604:	2c c0       	rjmp	.+88     	; 0x365e <LCD_General_Question+0x1cb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3606:	8e 01       	movw	r16, r28
    3608:	07 5f       	subi	r16, 0xF7	; 247
    360a:	1e 4f       	sbci	r17, 0xFE	; 254
    360c:	ce 01       	movw	r24, r28
    360e:	8b 5f       	subi	r24, 0xFB	; 251
    3610:	9e 4f       	sbci	r25, 0xFE	; 254
    3612:	fc 01       	movw	r30, r24
    3614:	60 81       	ld	r22, Z
    3616:	71 81       	ldd	r23, Z+1	; 0x01
    3618:	82 81       	ldd	r24, Z+2	; 0x02
    361a:	93 81       	ldd	r25, Z+3	; 0x03
    361c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	f8 01       	movw	r30, r16
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	80 83       	st	Z, r24
    362a:	ce 01       	movw	r24, r28
    362c:	83 5f       	subi	r24, 0xF3	; 243
    362e:	9e 4f       	sbci	r25, 0xFE	; 254
    3630:	9e 01       	movw	r18, r28
    3632:	27 5f       	subi	r18, 0xF7	; 247
    3634:	3e 4f       	sbci	r19, 0xFE	; 254
    3636:	f9 01       	movw	r30, r18
    3638:	20 81       	ld	r18, Z
    363a:	31 81       	ldd	r19, Z+1	; 0x01
    363c:	fc 01       	movw	r30, r24
    363e:	31 83       	std	Z+1, r19	; 0x01
    3640:	20 83       	st	Z, r18
    3642:	ce 01       	movw	r24, r28
    3644:	83 5f       	subi	r24, 0xF3	; 243
    3646:	9e 4f       	sbci	r25, 0xFE	; 254
    3648:	fc 01       	movw	r30, r24
    364a:	80 81       	ld	r24, Z
    364c:	91 81       	ldd	r25, Z+1	; 0x01
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <LCD_General_Question+0x1ca0>
    3652:	9e 01       	movw	r18, r28
    3654:	23 5f       	subi	r18, 0xF3	; 243
    3656:	3e 4f       	sbci	r19, 0xFE	; 254
    3658:	f9 01       	movw	r30, r18
    365a:	91 83       	std	Z+1, r25	; 0x01
    365c:	80 83       	st	Z, r24
		  Delay(THREE_THOUSAND_MS);
		  count_wronge++;										   /* increment counter of wrong answers */
    365e:	8a 81       	ldd	r24, Y+2	; 0x02
    3660:	8f 5f       	subi	r24, 0xFF	; 255
    3662:	8a 83       	std	Y+2, r24	; 0x02
    3664:	d5 c0       	rjmp	.+426    	; 0x3810 <LCD_General_Question+0x1e62>
	  }
	  else {  LCD_sendCommand(CLEAR_SCREEN);					/*if answer is right show happy emoji */
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		  emoji_happy_init();
    366c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <emoji_happy_init>
		  LCD_sendCommand(FIRST_LINE);
    3670:	80 e8       	ldi	r24, 0x80	; 128
    3672:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
		  LCD_displayChar(LOW);									/*display first char created  */
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
		  LCD_displayChar(HIGH);								/*display second char created */
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    3682:	9e 01       	movw	r18, r28
    3684:	29 5b       	subi	r18, 0xB9	; 185
    3686:	3f 4f       	sbci	r19, 0xFF	; 255
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e8       	ldi	r25, 0x80	; 128
    368c:	ab e3       	ldi	r26, 0x3B	; 59
    368e:	b5 e4       	ldi	r27, 0x45	; 69
    3690:	f9 01       	movw	r30, r18
    3692:	80 83       	st	Z, r24
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	a2 83       	std	Z+2, r26	; 0x02
    3698:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    369a:	8e 01       	movw	r16, r28
    369c:	01 5f       	subi	r16, 0xF1	; 241
    369e:	1e 4f       	sbci	r17, 0xFE	; 254
    36a0:	ce 01       	movw	r24, r28
    36a2:	89 5b       	subi	r24, 0xB9	; 185
    36a4:	9f 4f       	sbci	r25, 0xFF	; 255
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	4a e7       	ldi	r20, 0x7A	; 122
    36ac:	55 e4       	ldi	r21, 0x45	; 69
    36ae:	fc 01       	movw	r30, r24
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	f8 01       	movw	r30, r16
    36c2:	80 83       	st	Z, r24
    36c4:	91 83       	std	Z+1, r25	; 0x01
    36c6:	a2 83       	std	Z+2, r26	; 0x02
    36c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36ca:	ce 01       	movw	r24, r28
    36cc:	81 5f       	subi	r24, 0xF1	; 241
    36ce:	9e 4f       	sbci	r25, 0xFE	; 254
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	40 e8       	ldi	r20, 0x80	; 128
    36d6:	5f e3       	ldi	r21, 0x3F	; 63
    36d8:	fc 01       	movw	r30, r24
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    36e6:	88 23       	and	r24, r24
    36e8:	4c f4       	brge	.+18     	; 0x36fc <LCD_General_Question+0x1d4e>
		__ticks = 1;
    36ea:	ce 01       	movw	r24, r28
    36ec:	8d 5e       	subi	r24, 0xED	; 237
    36ee:	9e 4f       	sbci	r25, 0xFE	; 254
    36f0:	21 e0       	ldi	r18, 0x01	; 1
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	fc 01       	movw	r30, r24
    36f6:	31 83       	std	Z+1, r19	; 0x01
    36f8:	20 83       	st	Z, r18
    36fa:	6d c0       	rjmp	.+218    	; 0x37d6 <LCD_General_Question+0x1e28>
	else if (__tmp > 65535)
    36fc:	ce 01       	movw	r24, r28
    36fe:	81 5f       	subi	r24, 0xF1	; 241
    3700:	9e 4f       	sbci	r25, 0xFE	; 254
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	3f ef       	ldi	r19, 0xFF	; 255
    3706:	4f e7       	ldi	r20, 0x7F	; 127
    3708:	57 e4       	ldi	r21, 0x47	; 71
    370a:	fc 01       	movw	r30, r24
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    3718:	18 16       	cp	r1, r24
    371a:	0c f0       	brlt	.+2      	; 0x371e <LCD_General_Question+0x1d70>
    371c:	4a c0       	rjmp	.+148    	; 0x37b2 <LCD_General_Question+0x1e04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371e:	ce 01       	movw	r24, r28
    3720:	89 5b       	subi	r24, 0xB9	; 185
    3722:	9f 4f       	sbci	r25, 0xFF	; 255
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e2       	ldi	r20, 0x20	; 32
    372a:	51 e4       	ldi	r21, 0x41	; 65
    372c:	fc 01       	movw	r30, r24
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	8e 01       	movw	r16, r28
    3740:	0d 5e       	subi	r16, 0xED	; 237
    3742:	1e 4f       	sbci	r17, 0xFE	; 254
    3744:	bc 01       	movw	r22, r24
    3746:	cd 01       	movw	r24, r26
    3748:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	f8 01       	movw	r30, r16
    3752:	91 83       	std	Z+1, r25	; 0x01
    3754:	80 83       	st	Z, r24
    3756:	24 c0       	rjmp	.+72     	; 0x37a0 <LCD_General_Question+0x1df2>
    3758:	ce 01       	movw	r24, r28
    375a:	8b 5e       	subi	r24, 0xEB	; 235
    375c:	9e 4f       	sbci	r25, 0xFE	; 254
    375e:	20 e9       	ldi	r18, 0x90	; 144
    3760:	31 e0       	ldi	r19, 0x01	; 1
    3762:	fc 01       	movw	r30, r24
    3764:	31 83       	std	Z+1, r19	; 0x01
    3766:	20 83       	st	Z, r18
    3768:	ce 01       	movw	r24, r28
    376a:	8b 5e       	subi	r24, 0xEB	; 235
    376c:	9e 4f       	sbci	r25, 0xFE	; 254
    376e:	fc 01       	movw	r30, r24
    3770:	80 81       	ld	r24, Z
    3772:	91 81       	ldd	r25, Z+1	; 0x01
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	f1 f7       	brne	.-4      	; 0x3774 <LCD_General_Question+0x1dc6>
    3778:	9e 01       	movw	r18, r28
    377a:	2b 5e       	subi	r18, 0xEB	; 235
    377c:	3e 4f       	sbci	r19, 0xFE	; 254
    377e:	f9 01       	movw	r30, r18
    3780:	91 83       	std	Z+1, r25	; 0x01
    3782:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3784:	ce 01       	movw	r24, r28
    3786:	8d 5e       	subi	r24, 0xED	; 237
    3788:	9e 4f       	sbci	r25, 0xFE	; 254
    378a:	9e 01       	movw	r18, r28
    378c:	2d 5e       	subi	r18, 0xED	; 237
    378e:	3e 4f       	sbci	r19, 0xFE	; 254
    3790:	f9 01       	movw	r30, r18
    3792:	20 81       	ld	r18, Z
    3794:	31 81       	ldd	r19, Z+1	; 0x01
    3796:	21 50       	subi	r18, 0x01	; 1
    3798:	31 09       	sbc	r19, r1
    379a:	fc 01       	movw	r30, r24
    379c:	31 83       	std	Z+1, r19	; 0x01
    379e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a0:	ce 01       	movw	r24, r28
    37a2:	8d 5e       	subi	r24, 0xED	; 237
    37a4:	9e 4f       	sbci	r25, 0xFE	; 254
    37a6:	fc 01       	movw	r30, r24
    37a8:	80 81       	ld	r24, Z
    37aa:	91 81       	ldd	r25, Z+1	; 0x01
    37ac:	89 2b       	or	r24, r25
    37ae:	a1 f6       	brne	.-88     	; 0x3758 <LCD_General_Question+0x1daa>
    37b0:	2c c0       	rjmp	.+88     	; 0x380a <LCD_General_Question+0x1e5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b2:	8e 01       	movw	r16, r28
    37b4:	0d 5e       	subi	r16, 0xED	; 237
    37b6:	1e 4f       	sbci	r17, 0xFE	; 254
    37b8:	ce 01       	movw	r24, r28
    37ba:	81 5f       	subi	r24, 0xF1	; 241
    37bc:	9e 4f       	sbci	r25, 0xFE	; 254
    37be:	fc 01       	movw	r30, r24
    37c0:	60 81       	ld	r22, Z
    37c2:	71 81       	ldd	r23, Z+1	; 0x01
    37c4:	82 81       	ldd	r24, Z+2	; 0x02
    37c6:	93 81       	ldd	r25, Z+3	; 0x03
    37c8:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	f8 01       	movw	r30, r16
    37d2:	91 83       	std	Z+1, r25	; 0x01
    37d4:	80 83       	st	Z, r24
    37d6:	ce 01       	movw	r24, r28
    37d8:	89 5e       	subi	r24, 0xE9	; 233
    37da:	9e 4f       	sbci	r25, 0xFE	; 254
    37dc:	9e 01       	movw	r18, r28
    37de:	2d 5e       	subi	r18, 0xED	; 237
    37e0:	3e 4f       	sbci	r19, 0xFE	; 254
    37e2:	f9 01       	movw	r30, r18
    37e4:	20 81       	ld	r18, Z
    37e6:	31 81       	ldd	r19, Z+1	; 0x01
    37e8:	fc 01       	movw	r30, r24
    37ea:	31 83       	std	Z+1, r19	; 0x01
    37ec:	20 83       	st	Z, r18
    37ee:	ce 01       	movw	r24, r28
    37f0:	89 5e       	subi	r24, 0xE9	; 233
    37f2:	9e 4f       	sbci	r25, 0xFE	; 254
    37f4:	fc 01       	movw	r30, r24
    37f6:	80 81       	ld	r24, Z
    37f8:	91 81       	ldd	r25, Z+1	; 0x01
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <LCD_General_Question+0x1e4c>
    37fe:	9e 01       	movw	r18, r28
    3800:	29 5e       	subi	r18, 0xE9	; 233
    3802:	3e 4f       	sbci	r19, 0xFE	; 254
    3804:	f9 01       	movw	r30, r18
    3806:	91 83       	std	Z+1, r25	; 0x01
    3808:	80 83       	st	Z, r24
		  Delay(THREE_THOUSAND_MS);
		  count_right++;										/* increment counter of right answers */
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	8f 5f       	subi	r24, 0xFF	; 255
    380e:	89 83       	std	Y+1, r24	; 0x01
	  }
	  
	 /*Display Result */
	 LCD_sendCommand(CLEAR_SCREEN);
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
    3816:	9e 01       	movw	r18, r28
    3818:	21 5b       	subi	r18, 0xB1	; 177
    381a:	3f 4f       	sbci	r19, 0xFF	; 255
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	aa e7       	ldi	r26, 0x7A	; 122
    3822:	b4 e4       	ldi	r27, 0x44	; 68
    3824:	f9 01       	movw	r30, r18
    3826:	80 83       	st	Z, r24
    3828:	91 83       	std	Z+1, r25	; 0x01
    382a:	a2 83       	std	Z+2, r26	; 0x02
    382c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    382e:	8e 01       	movw	r16, r28
    3830:	03 5d       	subi	r16, 0xD3	; 211
    3832:	1e 4f       	sbci	r17, 0xFE	; 254
    3834:	ce 01       	movw	r24, r28
    3836:	81 5b       	subi	r24, 0xB1	; 177
    3838:	9f 4f       	sbci	r25, 0xFF	; 255
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	4a e7       	ldi	r20, 0x7A	; 122
    3840:	55 e4       	ldi	r21, 0x45	; 69
    3842:	fc 01       	movw	r30, r24
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	82 81       	ldd	r24, Z+2	; 0x02
    384a:	93 81       	ldd	r25, Z+3	; 0x03
    384c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	f8 01       	movw	r30, r16
    3856:	80 83       	st	Z, r24
    3858:	91 83       	std	Z+1, r25	; 0x01
    385a:	a2 83       	std	Z+2, r26	; 0x02
    385c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    385e:	ce 01       	movw	r24, r28
    3860:	83 5d       	subi	r24, 0xD3	; 211
    3862:	9e 4f       	sbci	r25, 0xFE	; 254
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e8       	ldi	r20, 0x80	; 128
    386a:	5f e3       	ldi	r21, 0x3F	; 63
    386c:	fc 01       	movw	r30, r24
    386e:	60 81       	ld	r22, Z
    3870:	71 81       	ldd	r23, Z+1	; 0x01
    3872:	82 81       	ldd	r24, Z+2	; 0x02
    3874:	93 81       	ldd	r25, Z+3	; 0x03
    3876:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    387a:	88 23       	and	r24, r24
    387c:	4c f4       	brge	.+18     	; 0x3890 <LCD_General_Question+0x1ee2>
		__ticks = 1;
    387e:	ce 01       	movw	r24, r28
    3880:	8f 5c       	subi	r24, 0xCF	; 207
    3882:	9e 4f       	sbci	r25, 0xFE	; 254
    3884:	21 e0       	ldi	r18, 0x01	; 1
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	fc 01       	movw	r30, r24
    388a:	31 83       	std	Z+1, r19	; 0x01
    388c:	20 83       	st	Z, r18
    388e:	6d c0       	rjmp	.+218    	; 0x396a <LCD_General_Question+0x1fbc>
	else if (__tmp > 65535)
    3890:	ce 01       	movw	r24, r28
    3892:	83 5d       	subi	r24, 0xD3	; 211
    3894:	9e 4f       	sbci	r25, 0xFE	; 254
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	3f ef       	ldi	r19, 0xFF	; 255
    389a:	4f e7       	ldi	r20, 0x7F	; 127
    389c:	57 e4       	ldi	r21, 0x47	; 71
    389e:	fc 01       	movw	r30, r24
    38a0:	60 81       	ld	r22, Z
    38a2:	71 81       	ldd	r23, Z+1	; 0x01
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    38ac:	18 16       	cp	r1, r24
    38ae:	0c f0       	brlt	.+2      	; 0x38b2 <LCD_General_Question+0x1f04>
    38b0:	4a c0       	rjmp	.+148    	; 0x3946 <LCD_General_Question+0x1f98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b2:	ce 01       	movw	r24, r28
    38b4:	81 5b       	subi	r24, 0xB1	; 177
    38b6:	9f 4f       	sbci	r25, 0xFF	; 255
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e2       	ldi	r20, 0x20	; 32
    38be:	51 e4       	ldi	r21, 0x41	; 65
    38c0:	fc 01       	movw	r30, r24
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	8e 01       	movw	r16, r28
    38d4:	0f 5c       	subi	r16, 0xCF	; 207
    38d6:	1e 4f       	sbci	r17, 0xFE	; 254
    38d8:	bc 01       	movw	r22, r24
    38da:	cd 01       	movw	r24, r26
    38dc:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	f8 01       	movw	r30, r16
    38e6:	91 83       	std	Z+1, r25	; 0x01
    38e8:	80 83       	st	Z, r24
    38ea:	24 c0       	rjmp	.+72     	; 0x3934 <LCD_General_Question+0x1f86>
    38ec:	ce 01       	movw	r24, r28
    38ee:	8d 5c       	subi	r24, 0xCD	; 205
    38f0:	9e 4f       	sbci	r25, 0xFE	; 254
    38f2:	20 e9       	ldi	r18, 0x90	; 144
    38f4:	31 e0       	ldi	r19, 0x01	; 1
    38f6:	fc 01       	movw	r30, r24
    38f8:	31 83       	std	Z+1, r19	; 0x01
    38fa:	20 83       	st	Z, r18
    38fc:	ce 01       	movw	r24, r28
    38fe:	8d 5c       	subi	r24, 0xCD	; 205
    3900:	9e 4f       	sbci	r25, 0xFE	; 254
    3902:	fc 01       	movw	r30, r24
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	f1 f7       	brne	.-4      	; 0x3908 <LCD_General_Question+0x1f5a>
    390c:	9e 01       	movw	r18, r28
    390e:	2d 5c       	subi	r18, 0xCD	; 205
    3910:	3e 4f       	sbci	r19, 0xFE	; 254
    3912:	f9 01       	movw	r30, r18
    3914:	91 83       	std	Z+1, r25	; 0x01
    3916:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3918:	ce 01       	movw	r24, r28
    391a:	8f 5c       	subi	r24, 0xCF	; 207
    391c:	9e 4f       	sbci	r25, 0xFE	; 254
    391e:	9e 01       	movw	r18, r28
    3920:	2f 5c       	subi	r18, 0xCF	; 207
    3922:	3e 4f       	sbci	r19, 0xFE	; 254
    3924:	f9 01       	movw	r30, r18
    3926:	20 81       	ld	r18, Z
    3928:	31 81       	ldd	r19, Z+1	; 0x01
    392a:	21 50       	subi	r18, 0x01	; 1
    392c:	31 09       	sbc	r19, r1
    392e:	fc 01       	movw	r30, r24
    3930:	31 83       	std	Z+1, r19	; 0x01
    3932:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3934:	ce 01       	movw	r24, r28
    3936:	8f 5c       	subi	r24, 0xCF	; 207
    3938:	9e 4f       	sbci	r25, 0xFE	; 254
    393a:	fc 01       	movw	r30, r24
    393c:	80 81       	ld	r24, Z
    393e:	91 81       	ldd	r25, Z+1	; 0x01
    3940:	89 2b       	or	r24, r25
    3942:	a1 f6       	brne	.-88     	; 0x38ec <LCD_General_Question+0x1f3e>
    3944:	2c c0       	rjmp	.+88     	; 0x399e <LCD_General_Question+0x1ff0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3946:	8e 01       	movw	r16, r28
    3948:	0f 5c       	subi	r16, 0xCF	; 207
    394a:	1e 4f       	sbci	r17, 0xFE	; 254
    394c:	ce 01       	movw	r24, r28
    394e:	83 5d       	subi	r24, 0xD3	; 211
    3950:	9e 4f       	sbci	r25, 0xFE	; 254
    3952:	fc 01       	movw	r30, r24
    3954:	60 81       	ld	r22, Z
    3956:	71 81       	ldd	r23, Z+1	; 0x01
    3958:	82 81       	ldd	r24, Z+2	; 0x02
    395a:	93 81       	ldd	r25, Z+3	; 0x03
    395c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	f8 01       	movw	r30, r16
    3966:	91 83       	std	Z+1, r25	; 0x01
    3968:	80 83       	st	Z, r24
    396a:	ce 01       	movw	r24, r28
    396c:	8b 5c       	subi	r24, 0xCB	; 203
    396e:	9e 4f       	sbci	r25, 0xFE	; 254
    3970:	9e 01       	movw	r18, r28
    3972:	2f 5c       	subi	r18, 0xCF	; 207
    3974:	3e 4f       	sbci	r19, 0xFE	; 254
    3976:	f9 01       	movw	r30, r18
    3978:	20 81       	ld	r18, Z
    397a:	31 81       	ldd	r19, Z+1	; 0x01
    397c:	fc 01       	movw	r30, r24
    397e:	31 83       	std	Z+1, r19	; 0x01
    3980:	20 83       	st	Z, r18
    3982:	ce 01       	movw	r24, r28
    3984:	8b 5c       	subi	r24, 0xCB	; 203
    3986:	9e 4f       	sbci	r25, 0xFE	; 254
    3988:	fc 01       	movw	r30, r24
    398a:	80 81       	ld	r24, Z
    398c:	91 81       	ldd	r25, Z+1	; 0x01
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	f1 f7       	brne	.-4      	; 0x398e <LCD_General_Question+0x1fe0>
    3992:	9e 01       	movw	r18, r28
    3994:	2b 5c       	subi	r18, 0xCB	; 203
    3996:	3e 4f       	sbci	r19, 0xFE	; 254
    3998:	f9 01       	movw	r30, r18
    399a:	91 83       	std	Z+1, r25	; 0x01
    399c:	80 83       	st	Z, r24
	 Delay(ONE_THOUSAND_MS);
	 LCD_displayStringRowColumn("Final Result" , LOW , LOW);
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	60 e0       	ldi	r22, 0x00	; 0
    39a2:	8f ee       	ldi	r24, 0xEF	; 239
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
    39aa:	9e 01       	movw	r18, r28
    39ac:	2d 5a       	subi	r18, 0xAD	; 173
    39ae:	3f 4f       	sbci	r19, 0xFF	; 255
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	aa e7       	ldi	r26, 0x7A	; 122
    39b6:	b4 e4       	ldi	r27, 0x44	; 68
    39b8:	f9 01       	movw	r30, r18
    39ba:	80 83       	st	Z, r24
    39bc:	91 83       	std	Z+1, r25	; 0x01
    39be:	a2 83       	std	Z+2, r26	; 0x02
    39c0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    39c2:	8e 01       	movw	r16, r28
    39c4:	0d 5d       	subi	r16, 0xDD	; 221
    39c6:	1e 4f       	sbci	r17, 0xFE	; 254
    39c8:	ce 01       	movw	r24, r28
    39ca:	8d 5a       	subi	r24, 0xAD	; 173
    39cc:	9f 4f       	sbci	r25, 0xFF	; 255
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	4a e7       	ldi	r20, 0x7A	; 122
    39d4:	55 e4       	ldi	r21, 0x45	; 69
    39d6:	fc 01       	movw	r30, r24
    39d8:	60 81       	ld	r22, Z
    39da:	71 81       	ldd	r23, Z+1	; 0x01
    39dc:	82 81       	ldd	r24, Z+2	; 0x02
    39de:	93 81       	ldd	r25, Z+3	; 0x03
    39e0:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	f8 01       	movw	r30, r16
    39ea:	80 83       	st	Z, r24
    39ec:	91 83       	std	Z+1, r25	; 0x01
    39ee:	a2 83       	std	Z+2, r26	; 0x02
    39f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f2:	ce 01       	movw	r24, r28
    39f4:	8d 5d       	subi	r24, 0xDD	; 221
    39f6:	9e 4f       	sbci	r25, 0xFE	; 254
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	40 e8       	ldi	r20, 0x80	; 128
    39fe:	5f e3       	ldi	r21, 0x3F	; 63
    3a00:	fc 01       	movw	r30, r24
    3a02:	60 81       	ld	r22, Z
    3a04:	71 81       	ldd	r23, Z+1	; 0x01
    3a06:	82 81       	ldd	r24, Z+2	; 0x02
    3a08:	93 81       	ldd	r25, Z+3	; 0x03
    3a0a:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    3a0e:	88 23       	and	r24, r24
    3a10:	4c f4       	brge	.+18     	; 0x3a24 <LCD_General_Question+0x2076>
		__ticks = 1;
    3a12:	ce 01       	movw	r24, r28
    3a14:	89 5d       	subi	r24, 0xD9	; 217
    3a16:	9e 4f       	sbci	r25, 0xFE	; 254
    3a18:	21 e0       	ldi	r18, 0x01	; 1
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	31 83       	std	Z+1, r19	; 0x01
    3a20:	20 83       	st	Z, r18
    3a22:	6d c0       	rjmp	.+218    	; 0x3afe <LCD_General_Question+0x2150>
	else if (__tmp > 65535)
    3a24:	ce 01       	movw	r24, r28
    3a26:	8d 5d       	subi	r24, 0xDD	; 221
    3a28:	9e 4f       	sbci	r25, 0xFE	; 254
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	3f ef       	ldi	r19, 0xFF	; 255
    3a2e:	4f e7       	ldi	r20, 0x7F	; 127
    3a30:	57 e4       	ldi	r21, 0x47	; 71
    3a32:	fc 01       	movw	r30, r24
    3a34:	60 81       	ld	r22, Z
    3a36:	71 81       	ldd	r23, Z+1	; 0x01
    3a38:	82 81       	ldd	r24, Z+2	; 0x02
    3a3a:	93 81       	ldd	r25, Z+3	; 0x03
    3a3c:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    3a40:	18 16       	cp	r1, r24
    3a42:	0c f0       	brlt	.+2      	; 0x3a46 <LCD_General_Question+0x2098>
    3a44:	4a c0       	rjmp	.+148    	; 0x3ada <LCD_General_Question+0x212c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a46:	ce 01       	movw	r24, r28
    3a48:	8d 5a       	subi	r24, 0xAD	; 173
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	51 e4       	ldi	r21, 0x41	; 65
    3a54:	fc 01       	movw	r30, r24
    3a56:	60 81       	ld	r22, Z
    3a58:	71 81       	ldd	r23, Z+1	; 0x01
    3a5a:	82 81       	ldd	r24, Z+2	; 0x02
    3a5c:	93 81       	ldd	r25, Z+3	; 0x03
    3a5e:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	8e 01       	movw	r16, r28
    3a68:	09 5d       	subi	r16, 0xD9	; 217
    3a6a:	1e 4f       	sbci	r17, 0xFE	; 254
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	f8 01       	movw	r30, r16
    3a7a:	91 83       	std	Z+1, r25	; 0x01
    3a7c:	80 83       	st	Z, r24
    3a7e:	24 c0       	rjmp	.+72     	; 0x3ac8 <LCD_General_Question+0x211a>
    3a80:	ce 01       	movw	r24, r28
    3a82:	87 5d       	subi	r24, 0xD7	; 215
    3a84:	9e 4f       	sbci	r25, 0xFE	; 254
    3a86:	20 e9       	ldi	r18, 0x90	; 144
    3a88:	31 e0       	ldi	r19, 0x01	; 1
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	31 83       	std	Z+1, r19	; 0x01
    3a8e:	20 83       	st	Z, r18
    3a90:	ce 01       	movw	r24, r28
    3a92:	87 5d       	subi	r24, 0xD7	; 215
    3a94:	9e 4f       	sbci	r25, 0xFE	; 254
    3a96:	fc 01       	movw	r30, r24
    3a98:	80 81       	ld	r24, Z
    3a9a:	91 81       	ldd	r25, Z+1	; 0x01
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <LCD_General_Question+0x20ee>
    3aa0:	9e 01       	movw	r18, r28
    3aa2:	27 5d       	subi	r18, 0xD7	; 215
    3aa4:	3e 4f       	sbci	r19, 0xFE	; 254
    3aa6:	f9 01       	movw	r30, r18
    3aa8:	91 83       	std	Z+1, r25	; 0x01
    3aaa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aac:	ce 01       	movw	r24, r28
    3aae:	89 5d       	subi	r24, 0xD9	; 217
    3ab0:	9e 4f       	sbci	r25, 0xFE	; 254
    3ab2:	9e 01       	movw	r18, r28
    3ab4:	29 5d       	subi	r18, 0xD9	; 217
    3ab6:	3e 4f       	sbci	r19, 0xFE	; 254
    3ab8:	f9 01       	movw	r30, r18
    3aba:	20 81       	ld	r18, Z
    3abc:	31 81       	ldd	r19, Z+1	; 0x01
    3abe:	21 50       	subi	r18, 0x01	; 1
    3ac0:	31 09       	sbc	r19, r1
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	31 83       	std	Z+1, r19	; 0x01
    3ac6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac8:	ce 01       	movw	r24, r28
    3aca:	89 5d       	subi	r24, 0xD9	; 217
    3acc:	9e 4f       	sbci	r25, 0xFE	; 254
    3ace:	fc 01       	movw	r30, r24
    3ad0:	80 81       	ld	r24, Z
    3ad2:	91 81       	ldd	r25, Z+1	; 0x01
    3ad4:	89 2b       	or	r24, r25
    3ad6:	a1 f6       	brne	.-88     	; 0x3a80 <LCD_General_Question+0x20d2>
    3ad8:	2c c0       	rjmp	.+88     	; 0x3b32 <LCD_General_Question+0x2184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ada:	8e 01       	movw	r16, r28
    3adc:	09 5d       	subi	r16, 0xD9	; 217
    3ade:	1e 4f       	sbci	r17, 0xFE	; 254
    3ae0:	ce 01       	movw	r24, r28
    3ae2:	8d 5d       	subi	r24, 0xDD	; 221
    3ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	60 81       	ld	r22, Z
    3aea:	71 81       	ldd	r23, Z+1	; 0x01
    3aec:	82 81       	ldd	r24, Z+2	; 0x02
    3aee:	93 81       	ldd	r25, Z+3	; 0x03
    3af0:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	f8 01       	movw	r30, r16
    3afa:	91 83       	std	Z+1, r25	; 0x01
    3afc:	80 83       	st	Z, r24
    3afe:	ce 01       	movw	r24, r28
    3b00:	85 5d       	subi	r24, 0xD5	; 213
    3b02:	9e 4f       	sbci	r25, 0xFE	; 254
    3b04:	9e 01       	movw	r18, r28
    3b06:	29 5d       	subi	r18, 0xD9	; 217
    3b08:	3e 4f       	sbci	r19, 0xFE	; 254
    3b0a:	f9 01       	movw	r30, r18
    3b0c:	20 81       	ld	r18, Z
    3b0e:	31 81       	ldd	r19, Z+1	; 0x01
    3b10:	fc 01       	movw	r30, r24
    3b12:	31 83       	std	Z+1, r19	; 0x01
    3b14:	20 83       	st	Z, r18
    3b16:	ce 01       	movw	r24, r28
    3b18:	85 5d       	subi	r24, 0xD5	; 213
    3b1a:	9e 4f       	sbci	r25, 0xFE	; 254
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	80 81       	ld	r24, Z
    3b20:	91 81       	ldd	r25, Z+1	; 0x01
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	f1 f7       	brne	.-4      	; 0x3b22 <LCD_General_Question+0x2174>
    3b26:	9e 01       	movw	r18, r28
    3b28:	25 5d       	subi	r18, 0xD5	; 213
    3b2a:	3e 4f       	sbci	r19, 0xFE	; 254
    3b2c:	f9 01       	movw	r30, r18
    3b2e:	91 83       	std	Z+1, r25	; 0x01
    3b30:	80 83       	st	Z, r24
	 Delay(ONE_THOUSAND_MS);
	 LCD_sendCommand(CLEAR_SCREEN);
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	 LCD_displayStringRowColumn("Right = ",LOW,LOW);
    3b38:	40 e0       	ldi	r20, 0x00	; 0
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	8c ef       	ldi	r24, 0xFC	; 252
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
	 LCD_displayChar(count_right + ZERO_ASCII  );                 /* show the result */
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	80 5d       	subi	r24, 0xD0	; 208
    3b48:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
    3b4c:	9e 01       	movw	r18, r28
    3b4e:	25 5b       	subi	r18, 0xB5	; 181
    3b50:	3f 4f       	sbci	r19, 0xFF	; 255
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	a0 e0       	ldi	r26, 0x00	; 0
    3b58:	b0 e4       	ldi	r27, 0x40	; 64
    3b5a:	f9 01       	movw	r30, r18
    3b5c:	80 83       	st	Z, r24
    3b5e:	91 83       	std	Z+1, r25	; 0x01
    3b60:	a2 83       	std	Z+2, r26	; 0x02
    3b62:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3b64:	8e 01       	movw	r16, r28
    3b66:	07 5e       	subi	r16, 0xE7	; 231
    3b68:	1e 4f       	sbci	r17, 0xFE	; 254
    3b6a:	ce 01       	movw	r24, r28
    3b6c:	85 5b       	subi	r24, 0xB5	; 181
    3b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	4a e7       	ldi	r20, 0x7A	; 122
    3b76:	55 e4       	ldi	r21, 0x45	; 69
    3b78:	fc 01       	movw	r30, r24
    3b7a:	60 81       	ld	r22, Z
    3b7c:	71 81       	ldd	r23, Z+1	; 0x01
    3b7e:	82 81       	ldd	r24, Z+2	; 0x02
    3b80:	93 81       	ldd	r25, Z+3	; 0x03
    3b82:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	f8 01       	movw	r30, r16
    3b8c:	80 83       	st	Z, r24
    3b8e:	91 83       	std	Z+1, r25	; 0x01
    3b90:	a2 83       	std	Z+2, r26	; 0x02
    3b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b94:	ce 01       	movw	r24, r28
    3b96:	87 5e       	subi	r24, 0xE7	; 231
    3b98:	9e 4f       	sbci	r25, 0xFE	; 254
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	40 e8       	ldi	r20, 0x80	; 128
    3ba0:	5f e3       	ldi	r21, 0x3F	; 63
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	60 81       	ld	r22, Z
    3ba6:	71 81       	ldd	r23, Z+1	; 0x01
    3ba8:	82 81       	ldd	r24, Z+2	; 0x02
    3baa:	93 81       	ldd	r25, Z+3	; 0x03
    3bac:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    3bb0:	88 23       	and	r24, r24
    3bb2:	4c f4       	brge	.+18     	; 0x3bc6 <LCD_General_Question+0x2218>
		__ticks = 1;
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	83 5e       	subi	r24, 0xE3	; 227
    3bb8:	9e 4f       	sbci	r25, 0xFE	; 254
    3bba:	21 e0       	ldi	r18, 0x01	; 1
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	31 83       	std	Z+1, r19	; 0x01
    3bc2:	20 83       	st	Z, r18
    3bc4:	6d c0       	rjmp	.+218    	; 0x3ca0 <LCD_General_Question+0x22f2>
	else if (__tmp > 65535)
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	87 5e       	subi	r24, 0xE7	; 231
    3bca:	9e 4f       	sbci	r25, 0xFE	; 254
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	3f ef       	ldi	r19, 0xFF	; 255
    3bd0:	4f e7       	ldi	r20, 0x7F	; 127
    3bd2:	57 e4       	ldi	r21, 0x47	; 71
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	60 81       	ld	r22, Z
    3bd8:	71 81       	ldd	r23, Z+1	; 0x01
    3bda:	82 81       	ldd	r24, Z+2	; 0x02
    3bdc:	93 81       	ldd	r25, Z+3	; 0x03
    3bde:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    3be2:	18 16       	cp	r1, r24
    3be4:	0c f0       	brlt	.+2      	; 0x3be8 <LCD_General_Question+0x223a>
    3be6:	4a c0       	rjmp	.+148    	; 0x3c7c <LCD_General_Question+0x22ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be8:	ce 01       	movw	r24, r28
    3bea:	85 5b       	subi	r24, 0xB5	; 181
    3bec:	9f 4f       	sbci	r25, 0xFF	; 255
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e2       	ldi	r20, 0x20	; 32
    3bf4:	51 e4       	ldi	r21, 0x41	; 65
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	60 81       	ld	r22, Z
    3bfa:	71 81       	ldd	r23, Z+1	; 0x01
    3bfc:	82 81       	ldd	r24, Z+2	; 0x02
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	8e 01       	movw	r16, r28
    3c0a:	03 5e       	subi	r16, 0xE3	; 227
    3c0c:	1e 4f       	sbci	r17, 0xFE	; 254
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	f8 01       	movw	r30, r16
    3c1c:	91 83       	std	Z+1, r25	; 0x01
    3c1e:	80 83       	st	Z, r24
    3c20:	24 c0       	rjmp	.+72     	; 0x3c6a <LCD_General_Question+0x22bc>
    3c22:	ce 01       	movw	r24, r28
    3c24:	81 5e       	subi	r24, 0xE1	; 225
    3c26:	9e 4f       	sbci	r25, 0xFE	; 254
    3c28:	20 e9       	ldi	r18, 0x90	; 144
    3c2a:	31 e0       	ldi	r19, 0x01	; 1
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	31 83       	std	Z+1, r19	; 0x01
    3c30:	20 83       	st	Z, r18
    3c32:	ce 01       	movw	r24, r28
    3c34:	81 5e       	subi	r24, 0xE1	; 225
    3c36:	9e 4f       	sbci	r25, 0xFE	; 254
    3c38:	fc 01       	movw	r30, r24
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	f1 f7       	brne	.-4      	; 0x3c3e <LCD_General_Question+0x2290>
    3c42:	9e 01       	movw	r18, r28
    3c44:	21 5e       	subi	r18, 0xE1	; 225
    3c46:	3e 4f       	sbci	r19, 0xFE	; 254
    3c48:	f9 01       	movw	r30, r18
    3c4a:	91 83       	std	Z+1, r25	; 0x01
    3c4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4e:	ce 01       	movw	r24, r28
    3c50:	83 5e       	subi	r24, 0xE3	; 227
    3c52:	9e 4f       	sbci	r25, 0xFE	; 254
    3c54:	9e 01       	movw	r18, r28
    3c56:	23 5e       	subi	r18, 0xE3	; 227
    3c58:	3e 4f       	sbci	r19, 0xFE	; 254
    3c5a:	f9 01       	movw	r30, r18
    3c5c:	20 81       	ld	r18, Z
    3c5e:	31 81       	ldd	r19, Z+1	; 0x01
    3c60:	21 50       	subi	r18, 0x01	; 1
    3c62:	31 09       	sbc	r19, r1
    3c64:	fc 01       	movw	r30, r24
    3c66:	31 83       	std	Z+1, r19	; 0x01
    3c68:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6a:	ce 01       	movw	r24, r28
    3c6c:	83 5e       	subi	r24, 0xE3	; 227
    3c6e:	9e 4f       	sbci	r25, 0xFE	; 254
    3c70:	fc 01       	movw	r30, r24
    3c72:	80 81       	ld	r24, Z
    3c74:	91 81       	ldd	r25, Z+1	; 0x01
    3c76:	89 2b       	or	r24, r25
    3c78:	a1 f6       	brne	.-88     	; 0x3c22 <LCD_General_Question+0x2274>
    3c7a:	2c c0       	rjmp	.+88     	; 0x3cd4 <LCD_General_Question+0x2326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c7c:	8e 01       	movw	r16, r28
    3c7e:	03 5e       	subi	r16, 0xE3	; 227
    3c80:	1e 4f       	sbci	r17, 0xFE	; 254
    3c82:	ce 01       	movw	r24, r28
    3c84:	87 5e       	subi	r24, 0xE7	; 231
    3c86:	9e 4f       	sbci	r25, 0xFE	; 254
    3c88:	fc 01       	movw	r30, r24
    3c8a:	60 81       	ld	r22, Z
    3c8c:	71 81       	ldd	r23, Z+1	; 0x01
    3c8e:	82 81       	ldd	r24, Z+2	; 0x02
    3c90:	93 81       	ldd	r25, Z+3	; 0x03
    3c92:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	f8 01       	movw	r30, r16
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	8f 5d       	subi	r24, 0xDF	; 223
    3ca4:	9e 4f       	sbci	r25, 0xFE	; 254
    3ca6:	9e 01       	movw	r18, r28
    3ca8:	23 5e       	subi	r18, 0xE3	; 227
    3caa:	3e 4f       	sbci	r19, 0xFE	; 254
    3cac:	f9 01       	movw	r30, r18
    3cae:	20 81       	ld	r18, Z
    3cb0:	31 81       	ldd	r19, Z+1	; 0x01
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	31 83       	std	Z+1, r19	; 0x01
    3cb6:	20 83       	st	Z, r18
    3cb8:	ce 01       	movw	r24, r28
    3cba:	8f 5d       	subi	r24, 0xDF	; 223
    3cbc:	9e 4f       	sbci	r25, 0xFE	; 254
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	80 81       	ld	r24, Z
    3cc2:	91 81       	ldd	r25, Z+1	; 0x01
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <LCD_General_Question+0x2316>
    3cc8:	9e 01       	movw	r18, r28
    3cca:	2f 5d       	subi	r18, 0xDF	; 223
    3ccc:	3e 4f       	sbci	r19, 0xFE	; 254
    3cce:	f9 01       	movw	r30, r18
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
	 Delay(TWO_MS);
	  LCD_displayStringRowColumn("Wrong = ",HIGH,LOW);
    3cd4:	40 e0       	ldi	r20, 0x00	; 0
    3cd6:	61 e0       	ldi	r22, 0x01	; 1
    3cd8:	85 e0       	ldi	r24, 0x05	; 5
    3cda:	91 e0       	ldi	r25, 0x01	; 1
    3cdc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
	 LCD_displayChar(count_wronge+ ZERO_ASCII  );                
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	80 5d       	subi	r24, 0xD0	; 208
    3ce4:	0e 94 33 07 	call	0xe66	; 0xe66 <LCD_displayChar>
	 
}
    3ce8:	00 00       	nop
    3cea:	ca 5c       	subi	r28, 0xCA	; 202
    3cec:	de 4f       	sbci	r29, 0xFE	; 254
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	df 91       	pop	r29
    3cfa:	cf 91       	pop	r28
    3cfc:	1f 91       	pop	r17
    3cfe:	0f 91       	pop	r16
    3d00:	08 95       	ret

00003d02 <Init_game>:

void Init_game(void)
{   uint16 i =LOW; 
    3d02:	cf 93       	push	r28
    3d04:	df 93       	push	r29
    3d06:	cd b7       	in	r28, 0x3d	; 61
    3d08:	de b7       	in	r29, 0x3e	; 62
    3d0a:	ea 97       	sbiw	r28, 0x3a	; 58
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	1a 82       	std	Y+2, r1	; 0x02
    3d18:	19 82       	std	Y+1, r1	; 0x01
		
 
	LCD_displayStringRowColumn("welcome to Game",LOW,LOW); /* first row in LCD */
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	8e e0       	ldi	r24, 0x0E	; 14
    3d20:	91 e0       	ldi	r25, 0x01	; 1
    3d22:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	a0 e0       	ldi	r26, 0x00	; 0
    3d2c:	b0 e4       	ldi	r27, 0x40	; 64
    3d2e:	8f 87       	std	Y+15, r24	; 0x0f
    3d30:	98 8b       	std	Y+16, r25	; 0x10
    3d32:	a9 8b       	std	Y+17, r26	; 0x11
    3d34:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a e7       	ldi	r20, 0x7A	; 122
    3d3c:	55 e4       	ldi	r21, 0x45	; 69
    3d3e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d40:	78 89       	ldd	r23, Y+16	; 0x10
    3d42:	89 89       	ldd	r24, Y+17	; 0x11
    3d44:	9a 89       	ldd	r25, Y+18	; 0x12
    3d46:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	8b 8b       	std	Y+19, r24	; 0x13
    3d50:	9c 8b       	std	Y+20, r25	; 0x14
    3d52:	ad 8b       	std	Y+21, r26	; 0x15
    3d54:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e8       	ldi	r20, 0x80	; 128
    3d5c:	5f e3       	ldi	r21, 0x3F	; 63
    3d5e:	6b 89       	ldd	r22, Y+19	; 0x13
    3d60:	7c 89       	ldd	r23, Y+20	; 0x14
    3d62:	8d 89       	ldd	r24, Y+21	; 0x15
    3d64:	9e 89       	ldd	r25, Y+22	; 0x16
    3d66:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	2c f4       	brge	.+10     	; 0x3d78 <Init_game+0x76>
		__ticks = 1;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	98 8f       	std	Y+24, r25	; 0x18
    3d74:	8f 8b       	std	Y+23, r24	; 0x17
    3d76:	3f c0       	rjmp	.+126    	; 0x3df6 <Init_game+0xf4>
	else if (__tmp > 65535)
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	3f ef       	ldi	r19, 0xFF	; 255
    3d7c:	4f e7       	ldi	r20, 0x7F	; 127
    3d7e:	57 e4       	ldi	r21, 0x47	; 71
    3d80:	6b 89       	ldd	r22, Y+19	; 0x13
    3d82:	7c 89       	ldd	r23, Y+20	; 0x14
    3d84:	8d 89       	ldd	r24, Y+21	; 0x15
    3d86:	9e 89       	ldd	r25, Y+22	; 0x16
    3d88:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    3d8c:	18 16       	cp	r1, r24
    3d8e:	4c f5       	brge	.+82     	; 0x3de2 <Init_game+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	40 e2       	ldi	r20, 0x20	; 32
    3d96:	51 e4       	ldi	r21, 0x41	; 65
    3d98:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d9a:	78 89       	ldd	r23, Y+16	; 0x10
    3d9c:	89 89       	ldd	r24, Y+17	; 0x11
    3d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    3da0:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	bc 01       	movw	r22, r24
    3daa:	cd 01       	movw	r24, r26
    3dac:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	98 8f       	std	Y+24, r25	; 0x18
    3db6:	8f 8b       	std	Y+23, r24	; 0x17
    3db8:	0f c0       	rjmp	.+30     	; 0x3dd8 <Init_game+0xd6>
    3dba:	80 e9       	ldi	r24, 0x90	; 144
    3dbc:	91 e0       	ldi	r25, 0x01	; 1
    3dbe:	9a 8f       	std	Y+26, r25	; 0x1a
    3dc0:	89 8f       	std	Y+25, r24	; 0x19
    3dc2:	89 8d       	ldd	r24, Y+25	; 0x19
    3dc4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	f1 f7       	brne	.-4      	; 0x3dc6 <Init_game+0xc4>
    3dca:	9a 8f       	std	Y+26, r25	; 0x1a
    3dcc:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dce:	8f 89       	ldd	r24, Y+23	; 0x17
    3dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	98 8f       	std	Y+24, r25	; 0x18
    3dd6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dda:	98 8d       	ldd	r25, Y+24	; 0x18
    3ddc:	89 2b       	or	r24, r25
    3dde:	69 f7       	brne	.-38     	; 0x3dba <Init_game+0xb8>
    3de0:	14 c0       	rjmp	.+40     	; 0x3e0a <Init_game+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de2:	6b 89       	ldd	r22, Y+19	; 0x13
    3de4:	7c 89       	ldd	r23, Y+20	; 0x14
    3de6:	8d 89       	ldd	r24, Y+21	; 0x15
    3de8:	9e 89       	ldd	r25, Y+22	; 0x16
    3dea:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	98 8f       	std	Y+24, r25	; 0x18
    3df4:	8f 8b       	std	Y+23, r24	; 0x17
    3df6:	8f 89       	ldd	r24, Y+23	; 0x17
    3df8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dfa:	9c 8f       	std	Y+28, r25	; 0x1c
    3dfc:	8b 8f       	std	Y+27, r24	; 0x1b
    3dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <Init_game+0x100>
    3e06:	9c 8f       	std	Y+28, r25	; 0x1c
    3e08:	8b 8f       	std	Y+27, r24	; 0x1b
	Delay(TWO_MS);
	LCD_displayStringRowColumn("Let's Start ^_^",HIGH,LOW); /* second row */
    3e0a:	40 e0       	ldi	r20, 0x00	; 0
    3e0c:	61 e0       	ldi	r22, 0x01	; 1
    3e0e:	8e e1       	ldi	r24, 0x1E	; 30
    3e10:	91 e0       	ldi	r25, 0x01	; 1
    3e12:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>

	for(i=0; i<5;i++)                                
    3e16:	1a 82       	std	Y+2, r1	; 0x02
    3e18:	19 82       	std	Y+1, r1	; 0x01
    3e1a:	ef c0       	rjmp	.+478    	; 0x3ffa <Init_game+0x2f8>
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	aa ef       	ldi	r26, 0xFA	; 250
    3e22:	b3 e4       	ldi	r27, 0x43	; 67
    3e24:	8b 87       	std	Y+11, r24	; 0x0b
    3e26:	9c 87       	std	Y+12, r25	; 0x0c
    3e28:	ad 87       	std	Y+13, r26	; 0x0d
    3e2a:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	4a e7       	ldi	r20, 0x7A	; 122
    3e32:	55 e4       	ldi	r21, 0x45	; 69
    3e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	8f a3       	std	Y+39, r24	; 0x27
    3e46:	98 a7       	std	Y+40, r25	; 0x28
    3e48:	a9 a7       	std	Y+41, r26	; 0x29
    3e4a:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e8       	ldi	r20, 0x80	; 128
    3e52:	5f e3       	ldi	r21, 0x3F	; 63
    3e54:	6f a1       	ldd	r22, Y+39	; 0x27
    3e56:	78 a5       	ldd	r23, Y+40	; 0x28
    3e58:	89 a5       	ldd	r24, Y+41	; 0x29
    3e5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e5c:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    3e60:	88 23       	and	r24, r24
    3e62:	2c f4       	brge	.+10     	; 0x3e6e <Init_game+0x16c>
		__ticks = 1;
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	9c a7       	std	Y+44, r25	; 0x2c
    3e6a:	8b a7       	std	Y+43, r24	; 0x2b
    3e6c:	3f c0       	rjmp	.+126    	; 0x3eec <Init_game+0x1ea>
	else if (__tmp > 65535)
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	3f ef       	ldi	r19, 0xFF	; 255
    3e72:	4f e7       	ldi	r20, 0x7F	; 127
    3e74:	57 e4       	ldi	r21, 0x47	; 71
    3e76:	6f a1       	ldd	r22, Y+39	; 0x27
    3e78:	78 a5       	ldd	r23, Y+40	; 0x28
    3e7a:	89 a5       	ldd	r24, Y+41	; 0x29
    3e7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e7e:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    3e82:	18 16       	cp	r1, r24
    3e84:	4c f5       	brge	.+82     	; 0x3ed8 <Init_game+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e2       	ldi	r20, 0x20	; 32
    3e8c:	51 e4       	ldi	r21, 0x41	; 65
    3e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e96:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	bc 01       	movw	r22, r24
    3ea0:	cd 01       	movw	r24, r26
    3ea2:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	9c a7       	std	Y+44, r25	; 0x2c
    3eac:	8b a7       	std	Y+43, r24	; 0x2b
    3eae:	0f c0       	rjmp	.+30     	; 0x3ece <Init_game+0x1cc>
    3eb0:	80 e9       	ldi	r24, 0x90	; 144
    3eb2:	91 e0       	ldi	r25, 0x01	; 1
    3eb4:	9e a7       	std	Y+46, r25	; 0x2e
    3eb6:	8d a7       	std	Y+45, r24	; 0x2d
    3eb8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3eba:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	f1 f7       	brne	.-4      	; 0x3ebc <Init_game+0x1ba>
    3ec0:	9e a7       	std	Y+46, r25	; 0x2e
    3ec2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	9c a7       	std	Y+44, r25	; 0x2c
    3ecc:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ece:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ed0:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ed2:	89 2b       	or	r24, r25
    3ed4:	69 f7       	brne	.-38     	; 0x3eb0 <Init_game+0x1ae>
    3ed6:	14 c0       	rjmp	.+40     	; 0x3f00 <Init_game+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed8:	6f a1       	ldd	r22, Y+39	; 0x27
    3eda:	78 a5       	ldd	r23, Y+40	; 0x28
    3edc:	89 a5       	ldd	r24, Y+41	; 0x29
    3ede:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ee0:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	9c a7       	std	Y+44, r25	; 0x2c
    3eea:	8b a7       	std	Y+43, r24	; 0x2b
    3eec:	8b a5       	ldd	r24, Y+43	; 0x2b
    3eee:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ef0:	98 ab       	std	Y+48, r25	; 0x30
    3ef2:	8f a7       	std	Y+47, r24	; 0x2f
    3ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    3ef8:	01 97       	sbiw	r24, 0x01	; 1
    3efa:	f1 f7       	brne	.-4      	; 0x3ef8 <Init_game+0x1f6>
    3efc:	98 ab       	std	Y+48, r25	; 0x30
    3efe:	8f a7       	std	Y+47, r24	; 0x2f
	 {Delay(HALF_MS);
	 LCD_sendCommand(Shift_Right);                   /* shift Right */
    3f00:	8c e1       	ldi	r24, 0x1C	; 28
    3f02:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	aa ef       	ldi	r26, 0xFA	; 250
    3f0c:	b3 e4       	ldi	r27, 0x43	; 67
    3f0e:	8b 83       	std	Y+3, r24	; 0x03
    3f10:	9c 83       	std	Y+4, r25	; 0x04
    3f12:	ad 83       	std	Y+5, r26	; 0x05
    3f14:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	4a e7       	ldi	r20, 0x7A	; 122
    3f1c:	55 e4       	ldi	r21, 0x45	; 69
    3f1e:	6b 81       	ldd	r22, Y+3	; 0x03
    3f20:	7c 81       	ldd	r23, Y+4	; 0x04
    3f22:	8d 81       	ldd	r24, Y+5	; 0x05
    3f24:	9e 81       	ldd	r25, Y+6	; 0x06
    3f26:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	8d 8f       	std	Y+29, r24	; 0x1d
    3f30:	9e 8f       	std	Y+30, r25	; 0x1e
    3f32:	af 8f       	std	Y+31, r26	; 0x1f
    3f34:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	40 e8       	ldi	r20, 0x80	; 128
    3f3c:	5f e3       	ldi	r21, 0x3F	; 63
    3f3e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3f40:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3f42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f44:	98 a1       	ldd	r25, Y+32	; 0x20
    3f46:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    3f4a:	88 23       	and	r24, r24
    3f4c:	2c f4       	brge	.+10     	; 0x3f58 <Init_game+0x256>
		__ticks = 1;
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	9a a3       	std	Y+34, r25	; 0x22
    3f54:	89 a3       	std	Y+33, r24	; 0x21
    3f56:	3f c0       	rjmp	.+126    	; 0x3fd6 <Init_game+0x2d4>
	else if (__tmp > 65535)
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	3f ef       	ldi	r19, 0xFF	; 255
    3f5c:	4f e7       	ldi	r20, 0x7F	; 127
    3f5e:	57 e4       	ldi	r21, 0x47	; 71
    3f60:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3f62:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3f64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f66:	98 a1       	ldd	r25, Y+32	; 0x20
    3f68:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    3f6c:	18 16       	cp	r1, r24
    3f6e:	4c f5       	brge	.+82     	; 0x3fc2 <Init_game+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	40 e2       	ldi	r20, 0x20	; 32
    3f76:	51 e4       	ldi	r21, 0x41	; 65
    3f78:	6b 81       	ldd	r22, Y+3	; 0x03
    3f7a:	7c 81       	ldd	r23, Y+4	; 0x04
    3f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f80:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	bc 01       	movw	r22, r24
    3f8a:	cd 01       	movw	r24, r26
    3f8c:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	9a a3       	std	Y+34, r25	; 0x22
    3f96:	89 a3       	std	Y+33, r24	; 0x21
    3f98:	0f c0       	rjmp	.+30     	; 0x3fb8 <Init_game+0x2b6>
    3f9a:	80 e9       	ldi	r24, 0x90	; 144
    3f9c:	91 e0       	ldi	r25, 0x01	; 1
    3f9e:	9c a3       	std	Y+36, r25	; 0x24
    3fa0:	8b a3       	std	Y+35, r24	; 0x23
    3fa2:	8b a1       	ldd	r24, Y+35	; 0x23
    3fa4:	9c a1       	ldd	r25, Y+36	; 0x24
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <Init_game+0x2a4>
    3faa:	9c a3       	std	Y+36, r25	; 0x24
    3fac:	8b a3       	std	Y+35, r24	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fae:	89 a1       	ldd	r24, Y+33	; 0x21
    3fb0:	9a a1       	ldd	r25, Y+34	; 0x22
    3fb2:	01 97       	sbiw	r24, 0x01	; 1
    3fb4:	9a a3       	std	Y+34, r25	; 0x22
    3fb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    3fba:	9a a1       	ldd	r25, Y+34	; 0x22
    3fbc:	89 2b       	or	r24, r25
    3fbe:	69 f7       	brne	.-38     	; 0x3f9a <Init_game+0x298>
    3fc0:	14 c0       	rjmp	.+40     	; 0x3fea <Init_game+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3fc4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3fc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fc8:	98 a1       	ldd	r25, Y+32	; 0x20
    3fca:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	9a a3       	std	Y+34, r25	; 0x22
    3fd4:	89 a3       	std	Y+33, r24	; 0x21
    3fd6:	89 a1       	ldd	r24, Y+33	; 0x21
    3fd8:	9a a1       	ldd	r25, Y+34	; 0x22
    3fda:	9e a3       	std	Y+38, r25	; 0x26
    3fdc:	8d a3       	std	Y+37, r24	; 0x25
    3fde:	8d a1       	ldd	r24, Y+37	; 0x25
    3fe0:	9e a1       	ldd	r25, Y+38	; 0x26
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	f1 f7       	brne	.-4      	; 0x3fe2 <Init_game+0x2e0>
    3fe6:	9e a3       	std	Y+38, r25	; 0x26
    3fe8:	8d a3       	std	Y+37, r24	; 0x25
	 Delay(HALF_MS);
	 LCD_sendCommand(Shift_left);                   /* shift left  */
    3fea:	88 e1       	ldi	r24, 0x18	; 24
    3fec:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
 
	LCD_displayStringRowColumn("welcome to Game",LOW,LOW); /* first row in LCD */
	Delay(TWO_MS);
	LCD_displayStringRowColumn("Let's Start ^_^",HIGH,LOW); /* second row */

	for(i=0; i<5;i++)                                
    3ff0:	89 81       	ldd	r24, Y+1	; 0x01
    3ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff4:	01 96       	adiw	r24, 0x01	; 1
    3ff6:	9a 83       	std	Y+2, r25	; 0x02
    3ff8:	89 83       	std	Y+1, r24	; 0x01
    3ffa:	89 81       	ldd	r24, Y+1	; 0x01
    3ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffe:	05 97       	sbiw	r24, 0x05	; 5
    4000:	08 f4       	brcc	.+2      	; 0x4004 <Init_game+0x302>
    4002:	0c cf       	rjmp	.-488    	; 0x3e1c <Init_game+0x11a>
	 {Delay(HALF_MS);
	 LCD_sendCommand(Shift_Right);                   /* shift Right */
	 Delay(HALF_MS);
	 LCD_sendCommand(Shift_left);                   /* shift left  */
	}
	LCD_sendCommand(CLEAR_SCREEN); /* Clear display */
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	LCD_displayStringRowColumn("0: yes",LOW,LOW);  /* begin from first row */
    400a:	40 e0       	ldi	r20, 0x00	; 0
    400c:	60 e0       	ldi	r22, 0x00	; 0
    400e:	8e e2       	ldi	r24, 0x2E	; 46
    4010:	91 e0       	ldi	r25, 0x01	; 1
    4012:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("1: No",HIGH,LOW);   /* begin from second row */
    4016:	40 e0       	ldi	r20, 0x00	; 0
    4018:	61 e0       	ldi	r22, 0x01	; 1
    401a:	85 e3       	ldi	r24, 0x35	; 53
    401c:	91 e0       	ldi	r25, 0x01	; 1
    401e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_displayStringRowColumn>
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	aa ef       	ldi	r26, 0xFA	; 250
    4028:	b4 e4       	ldi	r27, 0x44	; 68
    402a:	8f 83       	std	Y+7, r24	; 0x07
    402c:	98 87       	std	Y+8, r25	; 0x08
    402e:	a9 87       	std	Y+9, r26	; 0x09
    4030:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	4a e7       	ldi	r20, 0x7A	; 122
    4038:	55 e4       	ldi	r21, 0x45	; 69
    403a:	6f 81       	ldd	r22, Y+7	; 0x07
    403c:	78 85       	ldd	r23, Y+8	; 0x08
    403e:	89 85       	ldd	r24, Y+9	; 0x09
    4040:	9a 85       	ldd	r25, Y+10	; 0x0a
    4042:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	89 ab       	std	Y+49, r24	; 0x31
    404c:	9a ab       	std	Y+50, r25	; 0x32
    404e:	ab ab       	std	Y+51, r26	; 0x33
    4050:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e8       	ldi	r20, 0x80	; 128
    4058:	5f e3       	ldi	r21, 0x3F	; 63
    405a:	69 a9       	ldd	r22, Y+49	; 0x31
    405c:	7a a9       	ldd	r23, Y+50	; 0x32
    405e:	8b a9       	ldd	r24, Y+51	; 0x33
    4060:	9c a9       	ldd	r25, Y+52	; 0x34
    4062:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    4066:	88 23       	and	r24, r24
    4068:	2c f4       	brge	.+10     	; 0x4074 <Init_game+0x372>
		__ticks = 1;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	9e ab       	std	Y+54, r25	; 0x36
    4070:	8d ab       	std	Y+53, r24	; 0x35
    4072:	3f c0       	rjmp	.+126    	; 0x40f2 <Init_game+0x3f0>
	else if (__tmp > 65535)
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	3f ef       	ldi	r19, 0xFF	; 255
    4078:	4f e7       	ldi	r20, 0x7F	; 127
    407a:	57 e4       	ldi	r21, 0x47	; 71
    407c:	69 a9       	ldd	r22, Y+49	; 0x31
    407e:	7a a9       	ldd	r23, Y+50	; 0x32
    4080:	8b a9       	ldd	r24, Y+51	; 0x33
    4082:	9c a9       	ldd	r25, Y+52	; 0x34
    4084:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    4088:	18 16       	cp	r1, r24
    408a:	4c f5       	brge	.+82     	; 0x40de <Init_game+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	40 e2       	ldi	r20, 0x20	; 32
    4092:	51 e4       	ldi	r21, 0x41	; 65
    4094:	6f 81       	ldd	r22, Y+7	; 0x07
    4096:	78 85       	ldd	r23, Y+8	; 0x08
    4098:	89 85       	ldd	r24, Y+9	; 0x09
    409a:	9a 85       	ldd	r25, Y+10	; 0x0a
    409c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	bc 01       	movw	r22, r24
    40a6:	cd 01       	movw	r24, r26
    40a8:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9e ab       	std	Y+54, r25	; 0x36
    40b2:	8d ab       	std	Y+53, r24	; 0x35
    40b4:	0f c0       	rjmp	.+30     	; 0x40d4 <Init_game+0x3d2>
    40b6:	80 e9       	ldi	r24, 0x90	; 144
    40b8:	91 e0       	ldi	r25, 0x01	; 1
    40ba:	98 af       	std	Y+56, r25	; 0x38
    40bc:	8f ab       	std	Y+55, r24	; 0x37
    40be:	8f a9       	ldd	r24, Y+55	; 0x37
    40c0:	98 ad       	ldd	r25, Y+56	; 0x38
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <Init_game+0x3c0>
    40c6:	98 af       	std	Y+56, r25	; 0x38
    40c8:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ca:	8d a9       	ldd	r24, Y+53	; 0x35
    40cc:	9e a9       	ldd	r25, Y+54	; 0x36
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	9e ab       	std	Y+54, r25	; 0x36
    40d2:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d4:	8d a9       	ldd	r24, Y+53	; 0x35
    40d6:	9e a9       	ldd	r25, Y+54	; 0x36
    40d8:	89 2b       	or	r24, r25
    40da:	69 f7       	brne	.-38     	; 0x40b6 <Init_game+0x3b4>
    40dc:	14 c0       	rjmp	.+40     	; 0x4106 <Init_game+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40de:	69 a9       	ldd	r22, Y+49	; 0x31
    40e0:	7a a9       	ldd	r23, Y+50	; 0x32
    40e2:	8b a9       	ldd	r24, Y+51	; 0x33
    40e4:	9c a9       	ldd	r25, Y+52	; 0x34
    40e6:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	9e ab       	std	Y+54, r25	; 0x36
    40f0:	8d ab       	std	Y+53, r24	; 0x35
    40f2:	8d a9       	ldd	r24, Y+53	; 0x35
    40f4:	9e a9       	ldd	r25, Y+54	; 0x36
    40f6:	9a af       	std	Y+58, r25	; 0x3a
    40f8:	89 af       	std	Y+57, r24	; 0x39
    40fa:	89 ad       	ldd	r24, Y+57	; 0x39
    40fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	f1 f7       	brne	.-4      	; 0x40fe <Init_game+0x3fc>
    4102:	9a af       	std	Y+58, r25	; 0x3a
    4104:	89 af       	std	Y+57, r24	; 0x39
    Delay(TWO_THOUSAND_MS);	 
	
	LCD_sendCommand(CLEAR_SCREEN); /* Clear display */
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	0e 94 d7 03 	call	0x7ae	; 0x7ae <LCD_sendCommand>
	LCD_General_Question();
    410c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LCD_General_Question>
}
    4110:	00 00       	nop
    4112:	ea 96       	adiw	r28, 0x3a	; 58
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	df 91       	pop	r29
    4120:	cf 91       	pop	r28
    4122:	08 95       	ret

00004124 <main>:




int main(void)
{
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	2e 97       	sbiw	r28, 0x0e	; 14
    412e:	0f b6       	in	r0, 0x3f	; 63
    4130:	f8 94       	cli
    4132:	de bf       	out	0x3e, r29	; 62
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	cd bf       	out	0x3d, r28	; 61
     LCD_init();
    4138:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_init>
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	a0 ea       	ldi	r26, 0xA0	; 160
    4142:	b0 e4       	ldi	r27, 0x40	; 64
    4144:	89 83       	std	Y+1, r24	; 0x01
    4146:	9a 83       	std	Y+2, r25	; 0x02
    4148:	ab 83       	std	Y+3, r26	; 0x03
    414a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	4a e7       	ldi	r20, 0x7A	; 122
    4152:	55 e4       	ldi	r21, 0x45	; 69
    4154:	69 81       	ldd	r22, Y+1	; 0x01
    4156:	7a 81       	ldd	r23, Y+2	; 0x02
    4158:	8b 81       	ldd	r24, Y+3	; 0x03
    415a:	9c 81       	ldd	r25, Y+4	; 0x04
    415c:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	8d 83       	std	Y+5, r24	; 0x05
    4166:	9e 83       	std	Y+6, r25	; 0x06
    4168:	af 83       	std	Y+7, r26	; 0x07
    416a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	40 e8       	ldi	r20, 0x80	; 128
    4172:	5f e3       	ldi	r21, 0x3F	; 63
    4174:	6d 81       	ldd	r22, Y+5	; 0x05
    4176:	7e 81       	ldd	r23, Y+6	; 0x06
    4178:	8f 81       	ldd	r24, Y+7	; 0x07
    417a:	98 85       	ldd	r25, Y+8	; 0x08
    417c:	0e 94 13 21 	call	0x4226	; 0x4226 <__cmpsf2>
    4180:	88 23       	and	r24, r24
    4182:	2c f4       	brge	.+10     	; 0x418e <main+0x6a>
		__ticks = 1;
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	9a 87       	std	Y+10, r25	; 0x0a
    418a:	89 87       	std	Y+9, r24	; 0x09
    418c:	3f c0       	rjmp	.+126    	; 0x420c <main+0xe8>
	else if (__tmp > 65535)
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	3f ef       	ldi	r19, 0xFF	; 255
    4192:	4f e7       	ldi	r20, 0x7F	; 127
    4194:	57 e4       	ldi	r21, 0x47	; 71
    4196:	6d 81       	ldd	r22, Y+5	; 0x05
    4198:	7e 81       	ldd	r23, Y+6	; 0x06
    419a:	8f 81       	ldd	r24, Y+7	; 0x07
    419c:	98 85       	ldd	r25, Y+8	; 0x08
    419e:	0e 94 94 21 	call	0x4328	; 0x4328 <__gesf2>
    41a2:	18 16       	cp	r1, r24
    41a4:	4c f5       	brge	.+82     	; 0x41f8 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e2       	ldi	r20, 0x20	; 32
    41ac:	51 e4       	ldi	r21, 0x41	; 65
    41ae:	69 81       	ldd	r22, Y+1	; 0x01
    41b0:	7a 81       	ldd	r23, Y+2	; 0x02
    41b2:	8b 81       	ldd	r24, Y+3	; 0x03
    41b4:	9c 81       	ldd	r25, Y+4	; 0x04
    41b6:	0e 94 99 21 	call	0x4332	; 0x4332 <__mulsf3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	bc 01       	movw	r22, r24
    41c0:	cd 01       	movw	r24, r26
    41c2:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	9a 87       	std	Y+10, r25	; 0x0a
    41cc:	89 87       	std	Y+9, r24	; 0x09
    41ce:	0f c0       	rjmp	.+30     	; 0x41ee <main+0xca>
    41d0:	80 e9       	ldi	r24, 0x90	; 144
    41d2:	91 e0       	ldi	r25, 0x01	; 1
    41d4:	9c 87       	std	Y+12, r25	; 0x0c
    41d6:	8b 87       	std	Y+11, r24	; 0x0b
    41d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    41da:	9c 85       	ldd	r25, Y+12	; 0x0c
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	f1 f7       	brne	.-4      	; 0x41dc <main+0xb8>
    41e0:	9c 87       	std	Y+12, r25	; 0x0c
    41e2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e4:	89 85       	ldd	r24, Y+9	; 0x09
    41e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	9a 87       	std	Y+10, r25	; 0x0a
    41ec:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ee:	89 85       	ldd	r24, Y+9	; 0x09
    41f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f2:	89 2b       	or	r24, r25
    41f4:	69 f7       	brne	.-38     	; 0x41d0 <main+0xac>
    41f6:	14 c0       	rjmp	.+40     	; 0x4220 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f8:	6d 81       	ldd	r22, Y+5	; 0x05
    41fa:	7e 81       	ldd	r23, Y+6	; 0x06
    41fc:	8f 81       	ldd	r24, Y+7	; 0x07
    41fe:	98 85       	ldd	r25, Y+8	; 0x08
    4200:	0e 94 18 21 	call	0x4230	; 0x4230 <__fixunssfsi>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	9a 87       	std	Y+10, r25	; 0x0a
    420a:	89 87       	std	Y+9, r24	; 0x09
    420c:	89 85       	ldd	r24, Y+9	; 0x09
    420e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4210:	9e 87       	std	Y+14, r25	; 0x0e
    4212:	8d 87       	std	Y+13, r24	; 0x0d
    4214:	8d 85       	ldd	r24, Y+13	; 0x0d
    4216:	9e 85       	ldd	r25, Y+14	; 0x0e
    4218:	01 97       	sbiw	r24, 0x01	; 1
    421a:	f1 f7       	brne	.-4      	; 0x4218 <main+0xf4>
    421c:	9e 87       	std	Y+14, r25	; 0x0e
    421e:	8d 87       	std	Y+13, r24	; 0x0d
	 _delay_ms(5);
   void Button_init(void);
    Init_game();
    4220:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <Init_game>
    while (1) 
    { 
    }
    4224:	ff cf       	rjmp	.-2      	; 0x4224 <main+0x100>

00004226 <__cmpsf2>:
    4226:	0e 94 47 21 	call	0x428e	; 0x428e <__fp_cmp>
    422a:	08 f4       	brcc	.+2      	; 0x422e <__cmpsf2+0x8>
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	08 95       	ret

00004230 <__fixunssfsi>:
    4230:	0e 94 73 21 	call	0x42e6	; 0x42e6 <__fp_splitA>
    4234:	88 f0       	brcs	.+34     	; 0x4258 <__fixunssfsi+0x28>
    4236:	9f 57       	subi	r25, 0x7F	; 127
    4238:	98 f0       	brcs	.+38     	; 0x4260 <__fixunssfsi+0x30>
    423a:	b9 2f       	mov	r27, r25
    423c:	99 27       	eor	r25, r25
    423e:	b7 51       	subi	r27, 0x17	; 23
    4240:	b0 f0       	brcs	.+44     	; 0x426e <__fixunssfsi+0x3e>
    4242:	e1 f0       	breq	.+56     	; 0x427c <__fixunssfsi+0x4c>
    4244:	66 0f       	add	r22, r22
    4246:	77 1f       	adc	r23, r23
    4248:	88 1f       	adc	r24, r24
    424a:	99 1f       	adc	r25, r25
    424c:	1a f0       	brmi	.+6      	; 0x4254 <__fixunssfsi+0x24>
    424e:	ba 95       	dec	r27
    4250:	c9 f7       	brne	.-14     	; 0x4244 <__fixunssfsi+0x14>
    4252:	14 c0       	rjmp	.+40     	; 0x427c <__fixunssfsi+0x4c>
    4254:	b1 30       	cpi	r27, 0x01	; 1
    4256:	91 f0       	breq	.+36     	; 0x427c <__fixunssfsi+0x4c>
    4258:	0e 94 8d 21 	call	0x431a	; 0x431a <__fp_zero>
    425c:	b1 e0       	ldi	r27, 0x01	; 1
    425e:	08 95       	ret
    4260:	0c 94 8d 21 	jmp	0x431a	; 0x431a <__fp_zero>
    4264:	67 2f       	mov	r22, r23
    4266:	78 2f       	mov	r23, r24
    4268:	88 27       	eor	r24, r24
    426a:	b8 5f       	subi	r27, 0xF8	; 248
    426c:	39 f0       	breq	.+14     	; 0x427c <__fixunssfsi+0x4c>
    426e:	b9 3f       	cpi	r27, 0xF9	; 249
    4270:	cc f3       	brlt	.-14     	; 0x4264 <__fixunssfsi+0x34>
    4272:	86 95       	lsr	r24
    4274:	77 95       	ror	r23
    4276:	67 95       	ror	r22
    4278:	b3 95       	inc	r27
    427a:	d9 f7       	brne	.-10     	; 0x4272 <__fixunssfsi+0x42>
    427c:	3e f4       	brtc	.+14     	; 0x428c <__fixunssfsi+0x5c>
    427e:	90 95       	com	r25
    4280:	80 95       	com	r24
    4282:	70 95       	com	r23
    4284:	61 95       	neg	r22
    4286:	7f 4f       	sbci	r23, 0xFF	; 255
    4288:	8f 4f       	sbci	r24, 0xFF	; 255
    428a:	9f 4f       	sbci	r25, 0xFF	; 255
    428c:	08 95       	ret

0000428e <__fp_cmp>:
    428e:	99 0f       	add	r25, r25
    4290:	00 08       	sbc	r0, r0
    4292:	55 0f       	add	r21, r21
    4294:	aa 0b       	sbc	r26, r26
    4296:	e0 e8       	ldi	r30, 0x80	; 128
    4298:	fe ef       	ldi	r31, 0xFE	; 254
    429a:	16 16       	cp	r1, r22
    429c:	17 06       	cpc	r1, r23
    429e:	e8 07       	cpc	r30, r24
    42a0:	f9 07       	cpc	r31, r25
    42a2:	c0 f0       	brcs	.+48     	; 0x42d4 <__fp_cmp+0x46>
    42a4:	12 16       	cp	r1, r18
    42a6:	13 06       	cpc	r1, r19
    42a8:	e4 07       	cpc	r30, r20
    42aa:	f5 07       	cpc	r31, r21
    42ac:	98 f0       	brcs	.+38     	; 0x42d4 <__fp_cmp+0x46>
    42ae:	62 1b       	sub	r22, r18
    42b0:	73 0b       	sbc	r23, r19
    42b2:	84 0b       	sbc	r24, r20
    42b4:	95 0b       	sbc	r25, r21
    42b6:	39 f4       	brne	.+14     	; 0x42c6 <__fp_cmp+0x38>
    42b8:	0a 26       	eor	r0, r26
    42ba:	61 f0       	breq	.+24     	; 0x42d4 <__fp_cmp+0x46>
    42bc:	23 2b       	or	r18, r19
    42be:	24 2b       	or	r18, r20
    42c0:	25 2b       	or	r18, r21
    42c2:	21 f4       	brne	.+8      	; 0x42cc <__fp_cmp+0x3e>
    42c4:	08 95       	ret
    42c6:	0a 26       	eor	r0, r26
    42c8:	09 f4       	brne	.+2      	; 0x42cc <__fp_cmp+0x3e>
    42ca:	a1 40       	sbci	r26, 0x01	; 1
    42cc:	a6 95       	lsr	r26
    42ce:	8f ef       	ldi	r24, 0xFF	; 255
    42d0:	81 1d       	adc	r24, r1
    42d2:	81 1d       	adc	r24, r1
    42d4:	08 95       	ret

000042d6 <__fp_split3>:
    42d6:	57 fd       	sbrc	r21, 7
    42d8:	90 58       	subi	r25, 0x80	; 128
    42da:	44 0f       	add	r20, r20
    42dc:	55 1f       	adc	r21, r21
    42de:	59 f0       	breq	.+22     	; 0x42f6 <__fp_splitA+0x10>
    42e0:	5f 3f       	cpi	r21, 0xFF	; 255
    42e2:	71 f0       	breq	.+28     	; 0x4300 <__fp_splitA+0x1a>
    42e4:	47 95       	ror	r20

000042e6 <__fp_splitA>:
    42e6:	88 0f       	add	r24, r24
    42e8:	97 fb       	bst	r25, 7
    42ea:	99 1f       	adc	r25, r25
    42ec:	61 f0       	breq	.+24     	; 0x4306 <__fp_splitA+0x20>
    42ee:	9f 3f       	cpi	r25, 0xFF	; 255
    42f0:	79 f0       	breq	.+30     	; 0x4310 <__fp_splitA+0x2a>
    42f2:	87 95       	ror	r24
    42f4:	08 95       	ret
    42f6:	12 16       	cp	r1, r18
    42f8:	13 06       	cpc	r1, r19
    42fa:	14 06       	cpc	r1, r20
    42fc:	55 1f       	adc	r21, r21
    42fe:	f2 cf       	rjmp	.-28     	; 0x42e4 <__fp_split3+0xe>
    4300:	46 95       	lsr	r20
    4302:	f1 df       	rcall	.-30     	; 0x42e6 <__fp_splitA>
    4304:	08 c0       	rjmp	.+16     	; 0x4316 <__fp_splitA+0x30>
    4306:	16 16       	cp	r1, r22
    4308:	17 06       	cpc	r1, r23
    430a:	18 06       	cpc	r1, r24
    430c:	99 1f       	adc	r25, r25
    430e:	f1 cf       	rjmp	.-30     	; 0x42f2 <__fp_splitA+0xc>
    4310:	86 95       	lsr	r24
    4312:	71 05       	cpc	r23, r1
    4314:	61 05       	cpc	r22, r1
    4316:	08 94       	sec
    4318:	08 95       	ret

0000431a <__fp_zero>:
    431a:	e8 94       	clt

0000431c <__fp_szero>:
    431c:	bb 27       	eor	r27, r27
    431e:	66 27       	eor	r22, r22
    4320:	77 27       	eor	r23, r23
    4322:	cb 01       	movw	r24, r22
    4324:	97 f9       	bld	r25, 7
    4326:	08 95       	ret

00004328 <__gesf2>:
    4328:	0e 94 47 21 	call	0x428e	; 0x428e <__fp_cmp>
    432c:	08 f4       	brcc	.+2      	; 0x4330 <__gesf2+0x8>
    432e:	8f ef       	ldi	r24, 0xFF	; 255
    4330:	08 95       	ret

00004332 <__mulsf3>:
    4332:	0e 94 ac 21 	call	0x4358	; 0x4358 <__mulsf3x>
    4336:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__fp_round>
    433a:	0e 94 0f 22 	call	0x441e	; 0x441e <__fp_pscA>
    433e:	38 f0       	brcs	.+14     	; 0x434e <__mulsf3+0x1c>
    4340:	0e 94 16 22 	call	0x442c	; 0x442c <__fp_pscB>
    4344:	20 f0       	brcs	.+8      	; 0x434e <__mulsf3+0x1c>
    4346:	95 23       	and	r25, r21
    4348:	11 f0       	breq	.+4      	; 0x434e <__mulsf3+0x1c>
    434a:	0c 94 06 22 	jmp	0x440c	; 0x440c <__fp_inf>
    434e:	0c 94 0c 22 	jmp	0x4418	; 0x4418 <__fp_nan>
    4352:	11 24       	eor	r1, r1
    4354:	0c 94 8e 21 	jmp	0x431c	; 0x431c <__fp_szero>

00004358 <__mulsf3x>:
    4358:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__fp_split3>
    435c:	70 f3       	brcs	.-36     	; 0x433a <__mulsf3+0x8>

0000435e <__mulsf3_pse>:
    435e:	95 9f       	mul	r25, r21
    4360:	c1 f3       	breq	.-16     	; 0x4352 <__mulsf3+0x20>
    4362:	95 0f       	add	r25, r21
    4364:	50 e0       	ldi	r21, 0x00	; 0
    4366:	55 1f       	adc	r21, r21
    4368:	62 9f       	mul	r22, r18
    436a:	f0 01       	movw	r30, r0
    436c:	72 9f       	mul	r23, r18
    436e:	bb 27       	eor	r27, r27
    4370:	f0 0d       	add	r31, r0
    4372:	b1 1d       	adc	r27, r1
    4374:	63 9f       	mul	r22, r19
    4376:	aa 27       	eor	r26, r26
    4378:	f0 0d       	add	r31, r0
    437a:	b1 1d       	adc	r27, r1
    437c:	aa 1f       	adc	r26, r26
    437e:	64 9f       	mul	r22, r20
    4380:	66 27       	eor	r22, r22
    4382:	b0 0d       	add	r27, r0
    4384:	a1 1d       	adc	r26, r1
    4386:	66 1f       	adc	r22, r22
    4388:	82 9f       	mul	r24, r18
    438a:	22 27       	eor	r18, r18
    438c:	b0 0d       	add	r27, r0
    438e:	a1 1d       	adc	r26, r1
    4390:	62 1f       	adc	r22, r18
    4392:	73 9f       	mul	r23, r19
    4394:	b0 0d       	add	r27, r0
    4396:	a1 1d       	adc	r26, r1
    4398:	62 1f       	adc	r22, r18
    439a:	83 9f       	mul	r24, r19
    439c:	a0 0d       	add	r26, r0
    439e:	61 1d       	adc	r22, r1
    43a0:	22 1f       	adc	r18, r18
    43a2:	74 9f       	mul	r23, r20
    43a4:	33 27       	eor	r19, r19
    43a6:	a0 0d       	add	r26, r0
    43a8:	61 1d       	adc	r22, r1
    43aa:	23 1f       	adc	r18, r19
    43ac:	84 9f       	mul	r24, r20
    43ae:	60 0d       	add	r22, r0
    43b0:	21 1d       	adc	r18, r1
    43b2:	82 2f       	mov	r24, r18
    43b4:	76 2f       	mov	r23, r22
    43b6:	6a 2f       	mov	r22, r26
    43b8:	11 24       	eor	r1, r1
    43ba:	9f 57       	subi	r25, 0x7F	; 127
    43bc:	50 40       	sbci	r21, 0x00	; 0
    43be:	9a f0       	brmi	.+38     	; 0x43e6 <__mulsf3_pse+0x88>
    43c0:	f1 f0       	breq	.+60     	; 0x43fe <__mulsf3_pse+0xa0>
    43c2:	88 23       	and	r24, r24
    43c4:	4a f0       	brmi	.+18     	; 0x43d8 <__mulsf3_pse+0x7a>
    43c6:	ee 0f       	add	r30, r30
    43c8:	ff 1f       	adc	r31, r31
    43ca:	bb 1f       	adc	r27, r27
    43cc:	66 1f       	adc	r22, r22
    43ce:	77 1f       	adc	r23, r23
    43d0:	88 1f       	adc	r24, r24
    43d2:	91 50       	subi	r25, 0x01	; 1
    43d4:	50 40       	sbci	r21, 0x00	; 0
    43d6:	a9 f7       	brne	.-22     	; 0x43c2 <__mulsf3_pse+0x64>
    43d8:	9e 3f       	cpi	r25, 0xFE	; 254
    43da:	51 05       	cpc	r21, r1
    43dc:	80 f0       	brcs	.+32     	; 0x43fe <__mulsf3_pse+0xa0>
    43de:	0c 94 06 22 	jmp	0x440c	; 0x440c <__fp_inf>
    43e2:	0c 94 8e 21 	jmp	0x431c	; 0x431c <__fp_szero>
    43e6:	5f 3f       	cpi	r21, 0xFF	; 255
    43e8:	e4 f3       	brlt	.-8      	; 0x43e2 <__mulsf3_pse+0x84>
    43ea:	98 3e       	cpi	r25, 0xE8	; 232
    43ec:	d4 f3       	brlt	.-12     	; 0x43e2 <__mulsf3_pse+0x84>
    43ee:	86 95       	lsr	r24
    43f0:	77 95       	ror	r23
    43f2:	67 95       	ror	r22
    43f4:	b7 95       	ror	r27
    43f6:	f7 95       	ror	r31
    43f8:	e7 95       	ror	r30
    43fa:	9f 5f       	subi	r25, 0xFF	; 255
    43fc:	c1 f7       	brne	.-16     	; 0x43ee <__mulsf3_pse+0x90>
    43fe:	fe 2b       	or	r31, r30
    4400:	88 0f       	add	r24, r24
    4402:	91 1d       	adc	r25, r1
    4404:	96 95       	lsr	r25
    4406:	87 95       	ror	r24
    4408:	97 f9       	bld	r25, 7
    440a:	08 95       	ret

0000440c <__fp_inf>:
    440c:	97 f9       	bld	r25, 7
    440e:	9f 67       	ori	r25, 0x7F	; 127
    4410:	80 e8       	ldi	r24, 0x80	; 128
    4412:	70 e0       	ldi	r23, 0x00	; 0
    4414:	60 e0       	ldi	r22, 0x00	; 0
    4416:	08 95       	ret

00004418 <__fp_nan>:
    4418:	9f ef       	ldi	r25, 0xFF	; 255
    441a:	80 ec       	ldi	r24, 0xC0	; 192
    441c:	08 95       	ret

0000441e <__fp_pscA>:
    441e:	00 24       	eor	r0, r0
    4420:	0a 94       	dec	r0
    4422:	16 16       	cp	r1, r22
    4424:	17 06       	cpc	r1, r23
    4426:	18 06       	cpc	r1, r24
    4428:	09 06       	cpc	r0, r25
    442a:	08 95       	ret

0000442c <__fp_pscB>:
    442c:	00 24       	eor	r0, r0
    442e:	0a 94       	dec	r0
    4430:	12 16       	cp	r1, r18
    4432:	13 06       	cpc	r1, r19
    4434:	14 06       	cpc	r1, r20
    4436:	05 06       	cpc	r0, r21
    4438:	08 95       	ret

0000443a <__fp_round>:
    443a:	09 2e       	mov	r0, r25
    443c:	03 94       	inc	r0
    443e:	00 0c       	add	r0, r0
    4440:	11 f4       	brne	.+4      	; 0x4446 <__fp_round+0xc>
    4442:	88 23       	and	r24, r24
    4444:	52 f0       	brmi	.+20     	; 0x445a <__fp_round+0x20>
    4446:	bb 0f       	add	r27, r27
    4448:	40 f4       	brcc	.+16     	; 0x445a <__fp_round+0x20>
    444a:	bf 2b       	or	r27, r31
    444c:	11 f4       	brne	.+4      	; 0x4452 <__fp_round+0x18>
    444e:	60 ff       	sbrs	r22, 0
    4450:	04 c0       	rjmp	.+8      	; 0x445a <__fp_round+0x20>
    4452:	6f 5f       	subi	r22, 0xFF	; 255
    4454:	7f 4f       	sbci	r23, 0xFF	; 255
    4456:	8f 4f       	sbci	r24, 0xFF	; 255
    4458:	9f 4f       	sbci	r25, 0xFF	; 255
    445a:	08 95       	ret

0000445c <_exit>:
    445c:	f8 94       	cli

0000445e <__stop_program>:
    445e:	ff cf       	rjmp	.-2      	; 0x445e <__stop_program>
