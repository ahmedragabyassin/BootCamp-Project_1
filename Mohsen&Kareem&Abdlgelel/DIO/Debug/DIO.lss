
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002942  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002942  000029d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000fa  008000fa  00002a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001701  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  0000430d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000180e  00000000  00000000  00004c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00006454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000893  00000000  00000000  000067a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000616  00000000  00000000  00007037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000764d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3f       	cpi	r26, 0xFC	; 252
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 13 	call	0x26e6	; 0x26e6 <main>
      8a:	0c 94 9f 14 	jmp	0x293e	; 0x293e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <smile>:
	LCD_displayCharacter(17);
	LCD_displayCharacter(17);
	LCD_displayCharacter(17);
	// Set Cursor Address
	
}
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	80 e4       	ldi	r24, 0x40	; 64
      9c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
      a0:	80 e0       	ldi	r24, 0x00	; 0
      a2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
      a6:	8a e0       	ldi	r24, 0x0A	; 10
      a8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
      b2:	81 e1       	ldi	r24, 0x11	; 17
      b4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
      b8:	8a e0       	ldi	r24, 0x0A	; 10
      ba:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
      be:	84 e0       	ldi	r24, 0x04	; 4
      c0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
      d0:	00 00       	nop
      d2:	df 91       	pop	r29
      d4:	cf 91       	pop	r28
      d6:	08 95       	ret

000000d8 <Welcome_Emoji>:
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	62 97       	sbiw	r28, 0x12	; 18
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	f8 94       	cli
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	cd bf       	out	0x3d, r28	; 61
      ec:	8f 87       	std	Y+15, r24	; 0x0f
      ee:	68 8b       	std	Y+16, r22	; 0x10
      f0:	5a 8b       	std	Y+18, r21	; 0x12
      f2:	49 8b       	std	Y+17, r20	; 0x11
      f4:	89 89       	ldd	r24, Y+17	; 0x11
      f6:	9a 89       	ldd	r25, Y+18	; 0x12
      f8:	fc 01       	movw	r30, r24
      fa:	09 95       	icall
      fc:	68 89       	ldd	r22, Y+16	; 0x10
      fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     100:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_gotoRowColumn>
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	a0 ea       	ldi	r26, 0xA0	; 160
     10a:	b0 e4       	ldi	r27, 0x40	; 64
     10c:	89 83       	std	Y+1, r24	; 0x01
     10e:	9a 83       	std	Y+2, r25	; 0x02
     110:	ab 83       	std	Y+3, r26	; 0x03
     112:	bc 83       	std	Y+4, r27	; 0x04
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	4a e7       	ldi	r20, 0x7A	; 122
     11a:	55 e4       	ldi	r21, 0x45	; 69
     11c:	69 81       	ldd	r22, Y+1	; 0x01
     11e:	7a 81       	ldd	r23, Y+2	; 0x02
     120:	8b 81       	ldd	r24, Y+3	; 0x03
     122:	9c 81       	ldd	r25, Y+4	; 0x04
     124:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     128:	dc 01       	movw	r26, r24
     12a:	cb 01       	movw	r24, r22
     12c:	8d 83       	std	Y+5, r24	; 0x05
     12e:	9e 83       	std	Y+6, r25	; 0x06
     130:	af 83       	std	Y+7, r26	; 0x07
     132:	b8 87       	std	Y+8, r27	; 0x08
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e8       	ldi	r20, 0x80	; 128
     13a:	5f e3       	ldi	r21, 0x3F	; 63
     13c:	6d 81       	ldd	r22, Y+5	; 0x05
     13e:	7e 81       	ldd	r23, Y+6	; 0x06
     140:	8f 81       	ldd	r24, Y+7	; 0x07
     142:	98 85       	ldd	r25, Y+8	; 0x08
     144:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     148:	88 23       	and	r24, r24
     14a:	2c f4       	brge	.+10     	; 0x156 <Welcome_Emoji+0x7e>
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	9a 87       	std	Y+10, r25	; 0x0a
     152:	89 87       	std	Y+9, r24	; 0x09
     154:	3f c0       	rjmp	.+126    	; 0x1d4 <Welcome_Emoji+0xfc>
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	3f ef       	ldi	r19, 0xFF	; 255
     15a:	4f e7       	ldi	r20, 0x7F	; 127
     15c:	57 e4       	ldi	r21, 0x47	; 71
     15e:	6d 81       	ldd	r22, Y+5	; 0x05
     160:	7e 81       	ldd	r23, Y+6	; 0x06
     162:	8f 81       	ldd	r24, Y+7	; 0x07
     164:	98 85       	ldd	r25, Y+8	; 0x08
     166:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     16a:	18 16       	cp	r1, r24
     16c:	4c f5       	brge	.+82     	; 0x1c0 <Welcome_Emoji+0xe8>
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	40 e2       	ldi	r20, 0x20	; 32
     174:	51 e4       	ldi	r21, 0x41	; 65
     176:	69 81       	ldd	r22, Y+1	; 0x01
     178:	7a 81       	ldd	r23, Y+2	; 0x02
     17a:	8b 81       	ldd	r24, Y+3	; 0x03
     17c:	9c 81       	ldd	r25, Y+4	; 0x04
     17e:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     182:	dc 01       	movw	r26, r24
     184:	cb 01       	movw	r24, r22
     186:	bc 01       	movw	r22, r24
     188:	cd 01       	movw	r24, r26
     18a:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     18e:	dc 01       	movw	r26, r24
     190:	cb 01       	movw	r24, r22
     192:	9a 87       	std	Y+10, r25	; 0x0a
     194:	89 87       	std	Y+9, r24	; 0x09
     196:	0f c0       	rjmp	.+30     	; 0x1b6 <Welcome_Emoji+0xde>
     198:	80 e9       	ldi	r24, 0x90	; 144
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	9c 87       	std	Y+12, r25	; 0x0c
     19e:	8b 87       	std	Y+11, r24	; 0x0b
     1a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <Welcome_Emoji+0xcc>
     1a8:	9c 87       	std	Y+12, r25	; 0x0c
     1aa:	8b 87       	std	Y+11, r24	; 0x0b
     1ac:	89 85       	ldd	r24, Y+9	; 0x09
     1ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	9a 87       	std	Y+10, r25	; 0x0a
     1b4:	89 87       	std	Y+9, r24	; 0x09
     1b6:	89 85       	ldd	r24, Y+9	; 0x09
     1b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ba:	89 2b       	or	r24, r25
     1bc:	69 f7       	brne	.-38     	; 0x198 <Welcome_Emoji+0xc0>
     1be:	14 c0       	rjmp	.+40     	; 0x1e8 <Welcome_Emoji+0x110>
     1c0:	6d 81       	ldd	r22, Y+5	; 0x05
     1c2:	7e 81       	ldd	r23, Y+6	; 0x06
     1c4:	8f 81       	ldd	r24, Y+7	; 0x07
     1c6:	98 85       	ldd	r25, Y+8	; 0x08
     1c8:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     1cc:	dc 01       	movw	r26, r24
     1ce:	cb 01       	movw	r24, r22
     1d0:	9a 87       	std	Y+10, r25	; 0x0a
     1d2:	89 87       	std	Y+9, r24	; 0x09
     1d4:	89 85       	ldd	r24, Y+9	; 0x09
     1d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d8:	9e 87       	std	Y+14, r25	; 0x0e
     1da:	8d 87       	std	Y+13, r24	; 0x0d
     1dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     1de:	9e 85       	ldd	r25, Y+14	; 0x0e
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <Welcome_Emoji+0x108>
     1e4:	9e 87       	std	Y+14, r25	; 0x0e
     1e6:	8d 87       	std	Y+13, r24	; 0x0d
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
     1ee:	00 00       	nop
     1f0:	62 96       	adiw	r28, 0x12	; 18
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <True_Emoji>:
void True_Emoji(){ 
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
	
LCD_sendCommand(CGRAM_ADDRESS); // Set CGRAM Address
     20a:	80 e4       	ldi	r24, 0x40	; 64
     20c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(0);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(2);
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(4);
     222:	84 e0       	ldi	r24, 0x04	; 4
     224:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(8);
     228:	88 e0       	ldi	r24, 0x08	; 8
     22a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     22e:	80 e1       	ldi	r24, 0x10	; 16
     230:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     234:	80 e1       	ldi	r24, 0x10	; 16
     236:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     23a:	80 e1       	ldi	r24, 0x10	; 16
     23c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_sendCommand(0x48);
     240:	88 e4       	ldi	r24, 0x48	; 72
     242:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(31);
     246:	8f e1       	ldi	r24, 0x1F	; 31
     248:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(12);
     258:	8c e0       	ldi	r24, 0x0C	; 12
     25a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(12);
     25e:	8c e0       	ldi	r24, 0x0C	; 12
     260:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>

LCD_sendCommand(0x50);
     276:	80 e5       	ldi	r24, 0x50	; 80
     278:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(31);
     27c:	8f e1       	ldi	r24, 0x1F	; 31
     27e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(12);
     28e:	8c e0       	ldi	r24, 0x0C	; 12
     290:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(12);
     294:	8c e0       	ldi	r24, 0x0C	; 12
     296:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_sendCommand(0x58);
     2ac:	88 e5       	ldi	r24, 0x58	; 88
     2ae:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(0);
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     2b8:	80 e1       	ldi	r24, 0x10	; 16
     2ba:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(8);
     2be:	88 e0       	ldi	r24, 0x08	; 8
     2c0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(4);
     2c4:	84 e0       	ldi	r24, 0x04	; 4
     2c6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(2);
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_sendCommand(0x60);
     2e2:	80 e6       	ldi	r24, 0x60	; 96
     2e4:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(16);
     2e8:	80 e1       	ldi	r24, 0x10	; 16
     2ea:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     2ee:	80 e1       	ldi	r24, 0x10	; 16
     2f0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     2f4:	80 e1       	ldi	r24, 0x10	; 16
     2f6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(8);
     2fa:	88 e0       	ldi	r24, 0x08	; 8
     2fc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(4);
     300:	84 e0       	ldi	r24, 0x04	; 4
     302:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(2);
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_sendCommand(0x68);
     318:	88 e6       	ldi	r24, 0x68	; 104
     31a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(0);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     330:	80 e1       	ldi	r24, 0x10	; 16
     332:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     336:	80 e1       	ldi	r24, 0x10	; 16
     338:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(31);
     33c:	8f e1       	ldi	r24, 0x1F	; 31
     33e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(31);
     348:	8f e1       	ldi	r24, 0x1F	; 31
     34a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_sendCommand(0x70);
     34e:	80 e7       	ldi	r24, 0x70	; 112
     350:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(0);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(31);
     372:	8f e1       	ldi	r24, 0x1F	; 31
     374:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(0);
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(31);
     37e:	8f e1       	ldi	r24, 0x1F	; 31
     380:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_sendCommand(0x78);
     384:	88 e7       	ldi	r24, 0x78	; 120
     386:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(1);
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(2);
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(4);
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(8);
     3ae:	88 e0       	ldi	r24, 0x08	; 8
     3b0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(16);
     3b4:	80 e1       	ldi	r24, 0x10	; 16
     3b6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_sendCommand(0x80);
     3ba:	80 e8       	ldi	r24, 0x80	; 128
     3bc:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
LCD_displayCharacter(0);
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(1);
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(2);
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(3);
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_gotoRowColumn(1,0);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_gotoRowColumn>
LCD_displayCharacter(4);
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(5);
     3e6:	85 e0       	ldi	r24, 0x05	; 5
     3e8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	
LCD_displayCharacter(6);
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_displayCharacter(7);
     3f2:	87 e0       	ldi	r24, 0x07	; 7
     3f4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
LCD_gotoRowColumn(1,8);
     3f8:	68 e0       	ldi	r22, 0x08	; 8
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_gotoRowColumn>
LCD_display_string("Shater");
     400:	82 e7       	ldi	r24, 0x72	; 114
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_display_string>

}
     408:	00 00       	nop
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <False_Emoji>:
void False_Emoji(){
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
	
	LCD_sendCommand(CGRAM_ADDRESS); // Set CGRAM Address
     418:	80 e4       	ldi	r24, 0x40	; 64
     41a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(0);
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(2);
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(4);
     430:	84 e0       	ldi	r24, 0x04	; 4
     432:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(8);
     436:	88 e0       	ldi	r24, 0x08	; 8
     438:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     43c:	80 e1       	ldi	r24, 0x10	; 16
     43e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     442:	80 e1       	ldi	r24, 0x10	; 16
     444:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     448:	80 e1       	ldi	r24, 0x10	; 16
     44a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_sendCommand(0x48);
     44e:	88 e4       	ldi	r24, 0x48	; 72
     450:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(31);
     454:	8f e1       	ldi	r24, 0x1F	; 31
     456:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(31);
     466:	8f e1       	ldi	r24, 0x1F	; 31
     468:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(4);
     46c:	84 e0       	ldi	r24, 0x04	; 4
     46e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>

	LCD_sendCommand(0x50);
     484:	80 e5       	ldi	r24, 0x50	; 80
     486:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(31);
     48a:	8f e1       	ldi	r24, 0x1F	; 31
     48c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(31);
     49c:	8f e1       	ldi	r24, 0x1F	; 31
     49e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(4);
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_sendCommand(0x58);
     4ba:	88 e5       	ldi	r24, 0x58	; 88
     4bc:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(0);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(10);
     4c6:	8a e0       	ldi	r24, 0x0A	; 10
     4c8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(8);
     4cc:	88 e0       	ldi	r24, 0x08	; 8
     4ce:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(4);
     4d2:	84 e0       	ldi	r24, 0x04	; 4
     4d4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(2);
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_sendCommand(0x60);
     4f0:	80 e6       	ldi	r24, 0x60	; 96
     4f2:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(16);
     4f6:	80 e1       	ldi	r24, 0x10	; 16
     4f8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     4fc:	80 e1       	ldi	r24, 0x10	; 16
     4fe:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     502:	80 e1       	ldi	r24, 0x10	; 16
     504:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(8);
     508:	88 e0       	ldi	r24, 0x08	; 8
     50a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(4);
     50e:	84 e0       	ldi	r24, 0x04	; 4
     510:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(2);
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(10);
     51a:	8a e0       	ldi	r24, 0x0A	; 10
     51c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_sendCommand(0x68);
     526:	88 e6       	ldi	r24, 0x68	; 104
     528:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(0);
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(31);
     538:	8f e1       	ldi	r24, 0x1F	; 31
     53a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     53e:	80 e1       	ldi	r24, 0x10	; 16
     540:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     544:	80 e1       	ldi	r24, 0x10	; 16
     546:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     54a:	80 e1       	ldi	r24, 0x10	; 16
     54c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(31);
     556:	8f e1       	ldi	r24, 0x1F	; 31
     558:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_sendCommand(0x70);
     55c:	80 e7       	ldi	r24, 0x70	; 112
     55e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(0);
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(31);
     56e:	8f e1       	ldi	r24, 0x1F	; 31
     570:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(0);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(31);
     58c:	8f e1       	ldi	r24, 0x1F	; 31
     58e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_sendCommand(0x78);
     592:	88 e7       	ldi	r24, 0x78	; 120
     594:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(1);
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(2);
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(4);
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(8);
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(16);
     5bc:	80 e1       	ldi	r24, 0x10	; 16
     5be:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(00);
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_sendCommand(0x80);
     5c8:	80 e8       	ldi	r24, 0x80	; 128
     5ca:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_displayCharacter(0);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(1);
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(2);
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(3);
     5e0:	83 e0       	ldi	r24, 0x03	; 3
     5e2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_gotoRowColumn(1,0);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_gotoRowColumn>
	LCD_displayCharacter(4);
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(5);
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	
	LCD_displayCharacter(6);
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_displayCharacter(7);
     600:	87 e0       	ldi	r24, 0x07	; 7
     602:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
	LCD_gotoRowColumn(1,8);
     606:	68 e0       	ldi	r22, 0x08	; 8
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_gotoRowColumn>
	LCD_display_string("bty5a");
     60e:	89 e7       	ldi	r24, 0x79	; 121
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_display_string>

}
     616:	00 00       	nop
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <APP_questions_init>:

Function Return      : N/A

*******************************************************************************/

void APP_questions_init(){
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
	LCD_init();  /* Init LCD module */
     626:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_init>
	DIO_SetPinDirection(APP_QUESTIONS_YES_BTN_NUM,INPUT);	/* Define Yes btn pin as input pin */
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	84 e1       	ldi	r24, 0x14	; 20
     62e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <DIO_SetPinDirection>
	DIO_SetPinDirection(APP_QUESTIONS_NO_BTN_NUM,INPUT);	/* Define No btn pin as input pin  */
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	8a e0       	ldi	r24, 0x0A	; 10
     636:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <DIO_SetPinDirection>
}
     63a:	00 00       	nop
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <APP_questions_show_welcome_screen>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void APP_questions_show_welcome_screen(){
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	e9 97       	sbiw	r28, 0x39	; 57
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
	uint8 local_u8_screen_counter ;  /* Define counter to determine number of blinking of welcome screen */
	
	/* Display the welcoming screen in twice rows of char LCD certain times */
	
	for(local_u8_screen_counter = NUM_ZERO;local_u8_screen_counter < NUM_OF_REPEAT_WELC_SCREEN ;local_u8_screen_counter++){
     656:	19 82       	std	Y+1, r1	; 0x01
     658:	e7 c1       	rjmp	.+974    	; 0xa28 <__stack+0x1c9>
		Welcome_Emoji(0,0,smile);
     65a:	49 e4       	ldi	r20, 0x49	; 73
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 6c 00 	call	0xd8	; 0xd8 <Welcome_Emoji>
		LCD_sendString_RowCol("Welcome Nerds",CHAR_LCD_ROW_ONE,CHAR_LCD_THIRD_COL);
     666:	42 e0       	ldi	r20, 0x02	; 2
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	85 ed       	ldi	r24, 0xD5	; 213
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a8 ec       	ldi	r26, 0xC8	; 200
     678:	b3 e4       	ldi	r27, 0x43	; 67
     67a:	8a 83       	std	Y+2, r24	; 0x02
     67c:	9b 83       	std	Y+3, r25	; 0x03
     67e:	ac 83       	std	Y+4, r26	; 0x04
     680:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	4a e7       	ldi	r20, 0x7A	; 122
     688:	55 e4       	ldi	r21, 0x45	; 69
     68a:	6a 81       	ldd	r22, Y+2	; 0x02
     68c:	7b 81       	ldd	r23, Y+3	; 0x03
     68e:	8c 81       	ldd	r24, Y+4	; 0x04
     690:	9d 81       	ldd	r25, Y+5	; 0x05
     692:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     696:	dc 01       	movw	r26, r24
     698:	cb 01       	movw	r24, r22
     69a:	88 ab       	std	Y+48, r24	; 0x30
     69c:	99 ab       	std	Y+49, r25	; 0x31
     69e:	aa ab       	std	Y+50, r26	; 0x32
     6a0:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e8       	ldi	r20, 0x80	; 128
     6a8:	5f e3       	ldi	r21, 0x3F	; 63
     6aa:	68 a9       	ldd	r22, Y+48	; 0x30
     6ac:	79 a9       	ldd	r23, Y+49	; 0x31
     6ae:	8a a9       	ldd	r24, Y+50	; 0x32
     6b0:	9b a9       	ldd	r25, Y+51	; 0x33
     6b2:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     6b6:	88 23       	and	r24, r24
     6b8:	2c f4       	brge	.+10     	; 0x6c4 <APP_questions_show_welcome_screen+0x82>
		__ticks = 1;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	9d ab       	std	Y+53, r25	; 0x35
     6c0:	8c ab       	std	Y+52, r24	; 0x34
     6c2:	3f c0       	rjmp	.+126    	; 0x742 <APP_questions_show_welcome_screen+0x100>
	else if (__tmp > 65535)
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	3f ef       	ldi	r19, 0xFF	; 255
     6c8:	4f e7       	ldi	r20, 0x7F	; 127
     6ca:	57 e4       	ldi	r21, 0x47	; 71
     6cc:	68 a9       	ldd	r22, Y+48	; 0x30
     6ce:	79 a9       	ldd	r23, Y+49	; 0x31
     6d0:	8a a9       	ldd	r24, Y+50	; 0x32
     6d2:	9b a9       	ldd	r25, Y+51	; 0x33
     6d4:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     6d8:	18 16       	cp	r1, r24
     6da:	4c f5       	brge	.+82     	; 0x72e <APP_questions_show_welcome_screen+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	40 e2       	ldi	r20, 0x20	; 32
     6e2:	51 e4       	ldi	r21, 0x41	; 65
     6e4:	6a 81       	ldd	r22, Y+2	; 0x02
     6e6:	7b 81       	ldd	r23, Y+3	; 0x03
     6e8:	8c 81       	ldd	r24, Y+4	; 0x04
     6ea:	9d 81       	ldd	r25, Y+5	; 0x05
     6ec:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	bc 01       	movw	r22, r24
     6f6:	cd 01       	movw	r24, r26
     6f8:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	9d ab       	std	Y+53, r25	; 0x35
     702:	8c ab       	std	Y+52, r24	; 0x34
     704:	0f c0       	rjmp	.+30     	; 0x724 <APP_questions_show_welcome_screen+0xe2>
     706:	80 e9       	ldi	r24, 0x90	; 144
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	9f ab       	std	Y+55, r25	; 0x37
     70c:	8e ab       	std	Y+54, r24	; 0x36
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     70e:	8e a9       	ldd	r24, Y+54	; 0x36
     710:	9f a9       	ldd	r25, Y+55	; 0x37
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <APP_questions_show_welcome_screen+0xd0>
     716:	9f ab       	std	Y+55, r25	; 0x37
     718:	8e ab       	std	Y+54, r24	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     71a:	8c a9       	ldd	r24, Y+52	; 0x34
     71c:	9d a9       	ldd	r25, Y+53	; 0x35
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	9d ab       	std	Y+53, r25	; 0x35
     722:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     724:	8c a9       	ldd	r24, Y+52	; 0x34
     726:	9d a9       	ldd	r25, Y+53	; 0x35
     728:	89 2b       	or	r24, r25
     72a:	69 f7       	brne	.-38     	; 0x706 <APP_questions_show_welcome_screen+0xc4>
     72c:	14 c0       	rjmp	.+40     	; 0x756 <APP_questions_show_welcome_screen+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     72e:	68 a9       	ldd	r22, Y+48	; 0x30
     730:	79 a9       	ldd	r23, Y+49	; 0x31
     732:	8a a9       	ldd	r24, Y+50	; 0x32
     734:	9b a9       	ldd	r25, Y+51	; 0x33
     736:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     73a:	dc 01       	movw	r26, r24
     73c:	cb 01       	movw	r24, r22
     73e:	9d ab       	std	Y+53, r25	; 0x35
     740:	8c ab       	std	Y+52, r24	; 0x34
     742:	8c a9       	ldd	r24, Y+52	; 0x34
     744:	9d a9       	ldd	r25, Y+53	; 0x35
     746:	99 af       	std	Y+57, r25	; 0x39
     748:	88 af       	std	Y+56, r24	; 0x38
     74a:	88 ad       	ldd	r24, Y+56	; 0x38
     74c:	99 ad       	ldd	r25, Y+57	; 0x39
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <APP_questions_show_welcome_screen+0x10c>
     752:	99 af       	std	Y+57, r25	; 0x39
     754:	88 af       	std	Y+56, r24	; 0x38
		_delay_ms(WELCOME_SCREEN_DELAY);
		LCD_clear();
     756:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	a8 ec       	ldi	r26, 0xC8	; 200
     760:	b3 e4       	ldi	r27, 0x43	; 67
     762:	8e 83       	std	Y+6, r24	; 0x06
     764:	9f 83       	std	Y+7, r25	; 0x07
     766:	a8 87       	std	Y+8, r26	; 0x08
     768:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	4a e7       	ldi	r20, 0x7A	; 122
     770:	55 e4       	ldi	r21, 0x45	; 69
     772:	6e 81       	ldd	r22, Y+6	; 0x06
     774:	7f 81       	ldd	r23, Y+7	; 0x07
     776:	88 85       	ldd	r24, Y+8	; 0x08
     778:	99 85       	ldd	r25, Y+9	; 0x09
     77a:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	8e a3       	std	Y+38, r24	; 0x26
     784:	9f a3       	std	Y+39, r25	; 0x27
     786:	a8 a7       	std	Y+40, r26	; 0x28
     788:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e8       	ldi	r20, 0x80	; 128
     790:	5f e3       	ldi	r21, 0x3F	; 63
     792:	6e a1       	ldd	r22, Y+38	; 0x26
     794:	7f a1       	ldd	r23, Y+39	; 0x27
     796:	88 a5       	ldd	r24, Y+40	; 0x28
     798:	99 a5       	ldd	r25, Y+41	; 0x29
     79a:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     79e:	88 23       	and	r24, r24
     7a0:	2c f4       	brge	.+10     	; 0x7ac <APP_questions_show_welcome_screen+0x16a>
		__ticks = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	9b a7       	std	Y+43, r25	; 0x2b
     7a8:	8a a7       	std	Y+42, r24	; 0x2a
     7aa:	3f c0       	rjmp	.+126    	; 0x82a <APP_questions_show_welcome_screen+0x1e8>
	else if (__tmp > 65535)
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	3f ef       	ldi	r19, 0xFF	; 255
     7b0:	4f e7       	ldi	r20, 0x7F	; 127
     7b2:	57 e4       	ldi	r21, 0x47	; 71
     7b4:	6e a1       	ldd	r22, Y+38	; 0x26
     7b6:	7f a1       	ldd	r23, Y+39	; 0x27
     7b8:	88 a5       	ldd	r24, Y+40	; 0x28
     7ba:	99 a5       	ldd	r25, Y+41	; 0x29
     7bc:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     7c0:	18 16       	cp	r1, r24
     7c2:	4c f5       	brge	.+82     	; 0x816 <APP_questions_show_welcome_screen+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e2       	ldi	r20, 0x20	; 32
     7ca:	51 e4       	ldi	r21, 0x41	; 65
     7cc:	6e 81       	ldd	r22, Y+6	; 0x06
     7ce:	7f 81       	ldd	r23, Y+7	; 0x07
     7d0:	88 85       	ldd	r24, Y+8	; 0x08
     7d2:	99 85       	ldd	r25, Y+9	; 0x09
     7d4:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	bc 01       	movw	r22, r24
     7de:	cd 01       	movw	r24, r26
     7e0:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	9b a7       	std	Y+43, r25	; 0x2b
     7ea:	8a a7       	std	Y+42, r24	; 0x2a
     7ec:	0f c0       	rjmp	.+30     	; 0x80c <APP_questions_show_welcome_screen+0x1ca>
     7ee:	80 e9       	ldi	r24, 0x90	; 144
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	9d a7       	std	Y+45, r25	; 0x2d
     7f4:	8c a7       	std	Y+44, r24	; 0x2c
     7f6:	8c a5       	ldd	r24, Y+44	; 0x2c
     7f8:	9d a5       	ldd	r25, Y+45	; 0x2d
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <APP_questions_show_welcome_screen+0x1b8>
     7fe:	9d a7       	std	Y+45, r25	; 0x2d
     800:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     802:	8a a5       	ldd	r24, Y+42	; 0x2a
     804:	9b a5       	ldd	r25, Y+43	; 0x2b
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	9b a7       	std	Y+43, r25	; 0x2b
     80a:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     80c:	8a a5       	ldd	r24, Y+42	; 0x2a
     80e:	9b a5       	ldd	r25, Y+43	; 0x2b
     810:	89 2b       	or	r24, r25
     812:	69 f7       	brne	.-38     	; 0x7ee <APP_questions_show_welcome_screen+0x1ac>
     814:	14 c0       	rjmp	.+40     	; 0x83e <APP_questions_show_welcome_screen+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     816:	6e a1       	ldd	r22, Y+38	; 0x26
     818:	7f a1       	ldd	r23, Y+39	; 0x27
     81a:	88 a5       	ldd	r24, Y+40	; 0x28
     81c:	99 a5       	ldd	r25, Y+41	; 0x29
     81e:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	9b a7       	std	Y+43, r25	; 0x2b
     828:	8a a7       	std	Y+42, r24	; 0x2a
     82a:	8a a5       	ldd	r24, Y+42	; 0x2a
     82c:	9b a5       	ldd	r25, Y+43	; 0x2b
     82e:	9f a7       	std	Y+47, r25	; 0x2f
     830:	8e a7       	std	Y+46, r24	; 0x2e
     832:	8e a5       	ldd	r24, Y+46	; 0x2e
     834:	9f a5       	ldd	r25, Y+47	; 0x2f
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <APP_questions_show_welcome_screen+0x1f4>
     83a:	9f a7       	std	Y+47, r25	; 0x2f
     83c:	8e a7       	std	Y+46, r24	; 0x2e
		_delay_ms(WELCOME_SCREEN_DELAY);
		Welcome_Emoji(1,1,smile);
     83e:	49 e4       	ldi	r20, 0x49	; 73
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 6c 00 	call	0xd8	; 0xd8 <Welcome_Emoji>
		LCD_sendString_RowCol("Welcome Nerds",CHAR_LCD_ROW_TWO,CHAR_LCD_THIRD_COL);
     84a:	42 e0       	ldi	r20, 0x02	; 2
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	85 ed       	ldi	r24, 0xD5	; 213
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	a8 ec       	ldi	r26, 0xC8	; 200
     85c:	b3 e4       	ldi	r27, 0x43	; 67
     85e:	8a 87       	std	Y+10, r24	; 0x0a
     860:	9b 87       	std	Y+11, r25	; 0x0b
     862:	ac 87       	std	Y+12, r26	; 0x0c
     864:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	4a e7       	ldi	r20, 0x7A	; 122
     86c:	55 e4       	ldi	r21, 0x45	; 69
     86e:	6a 85       	ldd	r22, Y+10	; 0x0a
     870:	7b 85       	ldd	r23, Y+11	; 0x0b
     872:	8c 85       	ldd	r24, Y+12	; 0x0c
     874:	9d 85       	ldd	r25, Y+13	; 0x0d
     876:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	8c 8f       	std	Y+28, r24	; 0x1c
     880:	9d 8f       	std	Y+29, r25	; 0x1d
     882:	ae 8f       	std	Y+30, r26	; 0x1e
     884:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e8       	ldi	r20, 0x80	; 128
     88c:	5f e3       	ldi	r21, 0x3F	; 63
     88e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     890:	7d 8d       	ldd	r23, Y+29	; 0x1d
     892:	8e 8d       	ldd	r24, Y+30	; 0x1e
     894:	9f 8d       	ldd	r25, Y+31	; 0x1f
     896:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     89a:	88 23       	and	r24, r24
     89c:	2c f4       	brge	.+10     	; 0x8a8 <__stack+0x49>
		__ticks = 1;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	99 a3       	std	Y+33, r25	; 0x21
     8a4:	88 a3       	std	Y+32, r24	; 0x20
     8a6:	3f c0       	rjmp	.+126    	; 0x926 <__stack+0xc7>
	else if (__tmp > 65535)
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	3f ef       	ldi	r19, 0xFF	; 255
     8ac:	4f e7       	ldi	r20, 0x7F	; 127
     8ae:	57 e4       	ldi	r21, 0x47	; 71
     8b0:	6c 8d       	ldd	r22, Y+28	; 0x1c
     8b2:	7d 8d       	ldd	r23, Y+29	; 0x1d
     8b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8b8:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     8bc:	18 16       	cp	r1, r24
     8be:	4c f5       	brge	.+82     	; 0x912 <__stack+0xb3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e2       	ldi	r20, 0x20	; 32
     8c6:	51 e4       	ldi	r21, 0x41	; 65
     8c8:	6a 85       	ldd	r22, Y+10	; 0x0a
     8ca:	7b 85       	ldd	r23, Y+11	; 0x0b
     8cc:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ce:	9d 85       	ldd	r25, Y+13	; 0x0d
     8d0:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	bc 01       	movw	r22, r24
     8da:	cd 01       	movw	r24, r26
     8dc:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     8e0:	dc 01       	movw	r26, r24
     8e2:	cb 01       	movw	r24, r22
     8e4:	99 a3       	std	Y+33, r25	; 0x21
     8e6:	88 a3       	std	Y+32, r24	; 0x20
     8e8:	0f c0       	rjmp	.+30     	; 0x908 <__stack+0xa9>
     8ea:	80 e9       	ldi	r24, 0x90	; 144
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	9b a3       	std	Y+35, r25	; 0x23
     8f0:	8a a3       	std	Y+34, r24	; 0x22
     8f2:	8a a1       	ldd	r24, Y+34	; 0x22
     8f4:	9b a1       	ldd	r25, Y+35	; 0x23
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <__stack+0x97>
     8fa:	9b a3       	std	Y+35, r25	; 0x23
     8fc:	8a a3       	std	Y+34, r24	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fe:	88 a1       	ldd	r24, Y+32	; 0x20
     900:	99 a1       	ldd	r25, Y+33	; 0x21
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	99 a3       	std	Y+33, r25	; 0x21
     906:	88 a3       	std	Y+32, r24	; 0x20
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     908:	88 a1       	ldd	r24, Y+32	; 0x20
     90a:	99 a1       	ldd	r25, Y+33	; 0x21
     90c:	89 2b       	or	r24, r25
     90e:	69 f7       	brne	.-38     	; 0x8ea <__stack+0x8b>
     910:	14 c0       	rjmp	.+40     	; 0x93a <__stack+0xdb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     912:	6c 8d       	ldd	r22, Y+28	; 0x1c
     914:	7d 8d       	ldd	r23, Y+29	; 0x1d
     916:	8e 8d       	ldd	r24, Y+30	; 0x1e
     918:	9f 8d       	ldd	r25, Y+31	; 0x1f
     91a:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     91e:	dc 01       	movw	r26, r24
     920:	cb 01       	movw	r24, r22
     922:	99 a3       	std	Y+33, r25	; 0x21
     924:	88 a3       	std	Y+32, r24	; 0x20
     926:	88 a1       	ldd	r24, Y+32	; 0x20
     928:	99 a1       	ldd	r25, Y+33	; 0x21
     92a:	9d a3       	std	Y+37, r25	; 0x25
     92c:	8c a3       	std	Y+36, r24	; 0x24
     92e:	8c a1       	ldd	r24, Y+36	; 0x24
     930:	9d a1       	ldd	r25, Y+37	; 0x25
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <__stack+0xd3>
     936:	9d a3       	std	Y+37, r25	; 0x25
     938:	8c a3       	std	Y+36, r24	; 0x24
		_delay_ms(WELCOME_SCREEN_DELAY);
		LCD_clear();
     93a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a8 ec       	ldi	r26, 0xC8	; 200
     944:	b3 e4       	ldi	r27, 0x43	; 67
     946:	8e 87       	std	Y+14, r24	; 0x0e
     948:	9f 87       	std	Y+15, r25	; 0x0f
     94a:	a8 8b       	std	Y+16, r26	; 0x10
     94c:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	4a e7       	ldi	r20, 0x7A	; 122
     954:	55 e4       	ldi	r21, 0x45	; 69
     956:	6e 85       	ldd	r22, Y+14	; 0x0e
     958:	7f 85       	ldd	r23, Y+15	; 0x0f
     95a:	88 89       	ldd	r24, Y+16	; 0x10
     95c:	99 89       	ldd	r25, Y+17	; 0x11
     95e:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	8a 8b       	std	Y+18, r24	; 0x12
     968:	9b 8b       	std	Y+19, r25	; 0x13
     96a:	ac 8b       	std	Y+20, r26	; 0x14
     96c:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e8       	ldi	r20, 0x80	; 128
     974:	5f e3       	ldi	r21, 0x3F	; 63
     976:	6a 89       	ldd	r22, Y+18	; 0x12
     978:	7b 89       	ldd	r23, Y+19	; 0x13
     97a:	8c 89       	ldd	r24, Y+20	; 0x14
     97c:	9d 89       	ldd	r25, Y+21	; 0x15
     97e:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	2c f4       	brge	.+10     	; 0x990 <__stack+0x131>
		__ticks = 1;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9f 8b       	std	Y+23, r25	; 0x17
     98c:	8e 8b       	std	Y+22, r24	; 0x16
     98e:	3f c0       	rjmp	.+126    	; 0xa0e <__stack+0x1af>
	else if (__tmp > 65535)
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f e7       	ldi	r20, 0x7F	; 127
     996:	57 e4       	ldi	r21, 0x47	; 71
     998:	6a 89       	ldd	r22, Y+18	; 0x12
     99a:	7b 89       	ldd	r23, Y+19	; 0x13
     99c:	8c 89       	ldd	r24, Y+20	; 0x14
     99e:	9d 89       	ldd	r25, Y+21	; 0x15
     9a0:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     9a4:	18 16       	cp	r1, r24
     9a6:	4c f5       	brge	.+82     	; 0x9fa <__stack+0x19b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e2       	ldi	r20, 0x20	; 32
     9ae:	51 e4       	ldi	r21, 0x41	; 65
     9b0:	6e 85       	ldd	r22, Y+14	; 0x0e
     9b2:	7f 85       	ldd	r23, Y+15	; 0x0f
     9b4:	88 89       	ldd	r24, Y+16	; 0x10
     9b6:	99 89       	ldd	r25, Y+17	; 0x11
     9b8:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	bc 01       	movw	r22, r24
     9c2:	cd 01       	movw	r24, r26
     9c4:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9f 8b       	std	Y+23, r25	; 0x17
     9ce:	8e 8b       	std	Y+22, r24	; 0x16
     9d0:	0f c0       	rjmp	.+30     	; 0x9f0 <__stack+0x191>
     9d2:	80 e9       	ldi	r24, 0x90	; 144
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	99 8f       	std	Y+25, r25	; 0x19
     9d8:	88 8f       	std	Y+24, r24	; 0x18
     9da:	88 8d       	ldd	r24, Y+24	; 0x18
     9dc:	99 8d       	ldd	r25, Y+25	; 0x19
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <__stack+0x17f>
     9e2:	99 8f       	std	Y+25, r25	; 0x19
     9e4:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e6:	8e 89       	ldd	r24, Y+22	; 0x16
     9e8:	9f 89       	ldd	r25, Y+23	; 0x17
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	9f 8b       	std	Y+23, r25	; 0x17
     9ee:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f0:	8e 89       	ldd	r24, Y+22	; 0x16
     9f2:	9f 89       	ldd	r25, Y+23	; 0x17
     9f4:	89 2b       	or	r24, r25
     9f6:	69 f7       	brne	.-38     	; 0x9d2 <__stack+0x173>
     9f8:	14 c0       	rjmp	.+40     	; 0xa22 <__stack+0x1c3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9fa:	6a 89       	ldd	r22, Y+18	; 0x12
     9fc:	7b 89       	ldd	r23, Y+19	; 0x13
     9fe:	8c 89       	ldd	r24, Y+20	; 0x14
     a00:	9d 89       	ldd	r25, Y+21	; 0x15
     a02:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	9f 8b       	std	Y+23, r25	; 0x17
     a0c:	8e 8b       	std	Y+22, r24	; 0x16
     a0e:	8e 89       	ldd	r24, Y+22	; 0x16
     a10:	9f 89       	ldd	r25, Y+23	; 0x17
     a12:	9b 8f       	std	Y+27, r25	; 0x1b
     a14:	8a 8f       	std	Y+26, r24	; 0x1a
     a16:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a18:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <__stack+0x1bb>
     a1e:	9b 8f       	std	Y+27, r25	; 0x1b
     a20:	8a 8f       	std	Y+26, r24	; 0x1a
void APP_questions_show_welcome_screen(){
	uint8 local_u8_screen_counter ;  /* Define counter to determine number of blinking of welcome screen */
	
	/* Display the welcoming screen in twice rows of char LCD certain times */
	
	for(local_u8_screen_counter = NUM_ZERO;local_u8_screen_counter < NUM_OF_REPEAT_WELC_SCREEN ;local_u8_screen_counter++){
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	08 f4       	brcc	.+2      	; 0xa30 <__stack+0x1d1>
     a2e:	15 ce       	rjmp	.-982    	; 0x65a <APP_questions_show_welcome_screen+0x18>
		LCD_sendString_RowCol("Welcome Nerds",CHAR_LCD_ROW_TWO,CHAR_LCD_THIRD_COL);
		_delay_ms(WELCOME_SCREEN_DELAY);
		LCD_clear();
		_delay_ms(WELCOME_SCREEN_DELAY);				
	}
}
     a30:	00 00       	nop
     a32:	e9 96       	adiw	r28, 0x39	; 57
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <APP_questions_press_any_btn_to_start>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void APP_questions_press_any_btn_to_start(){
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	6c 97       	sbiw	r28, 0x1c	; 28
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
	/* check the stage ID */
	if(Global_u8_APP_questions_stages == PRESS_ANY_KEY_STAGE){
     a58:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     a5c:	88 23       	and	r24, r24
     a5e:	09 f0       	breq	.+2      	; 0xa62 <APP_questions_press_any_btn_to_start+0x1e>
     a60:	10 c1       	rjmp	.+544    	; 0xc82 <APP_questions_press_any_btn_to_start+0x23e>
		LCD_sendString_RowCol("Press Any Key",1,2);
     a62:	42 e0       	ldi	r20, 0x02	; 2
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	83 ee       	ldi	r24, 0xE3	; 227
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
		/* If any button pressed move to the next stage (question 1) and clear the screen */ 
		if( DIO_ReadPin(APP_QUESTIONS_YES_BTN_NUM) == HIGH){
     a6e:	84 e1       	ldi	r24, 0x14	; 20
     a70:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadPin>
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	09 f0       	breq	.+2      	; 0xa7a <APP_questions_press_any_btn_to_start+0x36>
     a78:	80 c0       	rjmp	.+256    	; 0xb7a <APP_questions_press_any_btn_to_start+0x136>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 ef       	ldi	r26, 0xF0	; 240
     a80:	b1 e4       	ldi	r27, 0x41	; 65
     a82:	8d 83       	std	Y+5, r24	; 0x05
     a84:	9e 83       	std	Y+6, r25	; 0x06
     a86:	af 83       	std	Y+7, r26	; 0x07
     a88:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	4a e7       	ldi	r20, 0x7A	; 122
     a90:	55 e4       	ldi	r21, 0x45	; 69
     a92:	6d 81       	ldd	r22, Y+5	; 0x05
     a94:	7e 81       	ldd	r23, Y+6	; 0x06
     a96:	8f 81       	ldd	r24, Y+7	; 0x07
     a98:	98 85       	ldd	r25, Y+8	; 0x08
     a9a:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	89 87       	std	Y+9, r24	; 0x09
     aa4:	9a 87       	std	Y+10, r25	; 0x0a
     aa6:	ab 87       	std	Y+11, r26	; 0x0b
     aa8:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e8       	ldi	r20, 0x80	; 128
     ab0:	5f e3       	ldi	r21, 0x3F	; 63
     ab2:	69 85       	ldd	r22, Y+9	; 0x09
     ab4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
     aba:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     abe:	88 23       	and	r24, r24
     ac0:	2c f4       	brge	.+10     	; 0xacc <APP_questions_press_any_btn_to_start+0x88>
		__ticks = 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	9e 87       	std	Y+14, r25	; 0x0e
     ac8:	8d 87       	std	Y+13, r24	; 0x0d
     aca:	3f c0       	rjmp	.+126    	; 0xb4a <APP_questions_press_any_btn_to_start+0x106>
	else if (__tmp > 65535)
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	3f ef       	ldi	r19, 0xFF	; 255
     ad0:	4f e7       	ldi	r20, 0x7F	; 127
     ad2:	57 e4       	ldi	r21, 0x47	; 71
     ad4:	69 85       	ldd	r22, Y+9	; 0x09
     ad6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ad8:	8b 85       	ldd	r24, Y+11	; 0x0b
     ada:	9c 85       	ldd	r25, Y+12	; 0x0c
     adc:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     ae0:	18 16       	cp	r1, r24
     ae2:	4c f5       	brge	.+82     	; 0xb36 <APP_questions_press_any_btn_to_start+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e2       	ldi	r20, 0x20	; 32
     aea:	51 e4       	ldi	r21, 0x41	; 65
     aec:	6d 81       	ldd	r22, Y+5	; 0x05
     aee:	7e 81       	ldd	r23, Y+6	; 0x06
     af0:	8f 81       	ldd	r24, Y+7	; 0x07
     af2:	98 85       	ldd	r25, Y+8	; 0x08
     af4:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	bc 01       	movw	r22, r24
     afe:	cd 01       	movw	r24, r26
     b00:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	9e 87       	std	Y+14, r25	; 0x0e
     b0a:	8d 87       	std	Y+13, r24	; 0x0d
     b0c:	0f c0       	rjmp	.+30     	; 0xb2c <APP_questions_press_any_btn_to_start+0xe8>
     b0e:	80 e9       	ldi	r24, 0x90	; 144
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	98 8b       	std	Y+16, r25	; 0x10
     b14:	8f 87       	std	Y+15, r24	; 0x0f
     b16:	8f 85       	ldd	r24, Y+15	; 0x0f
     b18:	98 89       	ldd	r25, Y+16	; 0x10
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <APP_questions_press_any_btn_to_start+0xd6>
     b1e:	98 8b       	std	Y+16, r25	; 0x10
     b20:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b22:	8d 85       	ldd	r24, Y+13	; 0x0d
     b24:	9e 85       	ldd	r25, Y+14	; 0x0e
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	9e 87       	std	Y+14, r25	; 0x0e
     b2a:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b30:	89 2b       	or	r24, r25
     b32:	69 f7       	brne	.-38     	; 0xb0e <APP_questions_press_any_btn_to_start+0xca>
     b34:	14 c0       	rjmp	.+40     	; 0xb5e <APP_questions_press_any_btn_to_start+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b36:	69 85       	ldd	r22, Y+9	; 0x09
     b38:	7a 85       	ldd	r23, Y+10	; 0x0a
     b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b3e:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     b42:	dc 01       	movw	r26, r24
     b44:	cb 01       	movw	r24, r22
     b46:	9e 87       	std	Y+14, r25	; 0x0e
     b48:	8d 87       	std	Y+13, r24	; 0x0d
     b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b4e:	9a 8b       	std	Y+18, r25	; 0x12
     b50:	89 8b       	std	Y+17, r24	; 0x11
     b52:	89 89       	ldd	r24, Y+17	; 0x11
     b54:	9a 89       	ldd	r25, Y+18	; 0x12
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <APP_questions_press_any_btn_to_start+0x112>
     b5a:	9a 8b       	std	Y+18, r25	; 0x12
     b5c:	89 8b       	std	Y+17, r24	; 0x11
			_delay_ms(BTN_DEBOUNCING_DELAY);
			if( DIO_ReadPin(APP_QUESTIONS_YES_BTN_NUM) == HIGH){
     b5e:	84 e1       	ldi	r24, 0x14	; 20
     b60:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadPin>
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	09 f0       	breq	.+2      	; 0xb6a <APP_questions_press_any_btn_to_start+0x126>
     b68:	8c c0       	rjmp	.+280    	; 0xc82 <APP_questions_press_any_btn_to_start+0x23e>
				LCD_clear();
     b6a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
				Global_u8_APP_questions_stages++ ;
     b6e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     b72:	8f 5f       	subi	r24, 0xFF	; 255
     b74:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
		else{
	
		}
		
	}
}
     b78:	84 c0       	rjmp	.+264    	; 0xc82 <APP_questions_press_any_btn_to_start+0x23e>
			if( DIO_ReadPin(APP_QUESTIONS_YES_BTN_NUM) == HIGH){
				LCD_clear();
				Global_u8_APP_questions_stages++ ;
			}
		}
		else if( DIO_ReadPin(APP_QUESTIONS_NO_BTN_NUM) == HIGH){
     b7a:	8a e0       	ldi	r24, 0x0A	; 10
     b7c:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadPin>
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	09 f0       	breq	.+2      	; 0xb86 <APP_questions_press_any_btn_to_start+0x142>
     b84:	7e c0       	rjmp	.+252    	; 0xc82 <APP_questions_press_any_btn_to_start+0x23e>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 ef       	ldi	r26, 0xF0	; 240
     b8c:	b1 e4       	ldi	r27, 0x41	; 65
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	ab 83       	std	Y+3, r26	; 0x03
     b94:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a e7       	ldi	r20, 0x7A	; 122
     b9c:	55 e4       	ldi	r21, 0x45	; 69
     b9e:	69 81       	ldd	r22, Y+1	; 0x01
     ba0:	7a 81       	ldd	r23, Y+2	; 0x02
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8b 8b       	std	Y+19, r24	; 0x13
     bb0:	9c 8b       	std	Y+20, r25	; 0x14
     bb2:	ad 8b       	std	Y+21, r26	; 0x15
     bb4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	6b 89       	ldd	r22, Y+19	; 0x13
     bc0:	7c 89       	ldd	r23, Y+20	; 0x14
     bc2:	8d 89       	ldd	r24, Y+21	; 0x15
     bc4:	9e 89       	ldd	r25, Y+22	; 0x16
     bc6:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     bca:	88 23       	and	r24, r24
     bcc:	2c f4       	brge	.+10     	; 0xbd8 <APP_questions_press_any_btn_to_start+0x194>
		__ticks = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	98 8f       	std	Y+24, r25	; 0x18
     bd4:	8f 8b       	std	Y+23, r24	; 0x17
     bd6:	3f c0       	rjmp	.+126    	; 0xc56 <APP_questions_press_any_btn_to_start+0x212>
	else if (__tmp > 65535)
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	6b 89       	ldd	r22, Y+19	; 0x13
     be2:	7c 89       	ldd	r23, Y+20	; 0x14
     be4:	8d 89       	ldd	r24, Y+21	; 0x15
     be6:	9e 89       	ldd	r25, Y+22	; 0x16
     be8:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     bec:	18 16       	cp	r1, r24
     bee:	4c f5       	brge	.+82     	; 0xc42 <APP_questions_press_any_btn_to_start+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	69 81       	ldd	r22, Y+1	; 0x01
     bfa:	7a 81       	ldd	r23, Y+2	; 0x02
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	bc 01       	movw	r22, r24
     c0a:	cd 01       	movw	r24, r26
     c0c:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	98 8f       	std	Y+24, r25	; 0x18
     c16:	8f 8b       	std	Y+23, r24	; 0x17
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <APP_questions_press_any_btn_to_start+0x1f4>
     c1a:	80 e9       	ldi	r24, 0x90	; 144
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	9a 8f       	std	Y+26, r25	; 0x1a
     c20:	89 8f       	std	Y+25, r24	; 0x19
     c22:	89 8d       	ldd	r24, Y+25	; 0x19
     c24:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <APP_questions_press_any_btn_to_start+0x1e2>
     c2a:	9a 8f       	std	Y+26, r25	; 0x1a
     c2c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2e:	8f 89       	ldd	r24, Y+23	; 0x17
     c30:	98 8d       	ldd	r25, Y+24	; 0x18
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	98 8f       	std	Y+24, r25	; 0x18
     c36:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c38:	8f 89       	ldd	r24, Y+23	; 0x17
     c3a:	98 8d       	ldd	r25, Y+24	; 0x18
     c3c:	89 2b       	or	r24, r25
     c3e:	69 f7       	brne	.-38     	; 0xc1a <APP_questions_press_any_btn_to_start+0x1d6>
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <APP_questions_press_any_btn_to_start+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c42:	6b 89       	ldd	r22, Y+19	; 0x13
     c44:	7c 89       	ldd	r23, Y+20	; 0x14
     c46:	8d 89       	ldd	r24, Y+21	; 0x15
     c48:	9e 89       	ldd	r25, Y+22	; 0x16
     c4a:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	98 8f       	std	Y+24, r25	; 0x18
     c54:	8f 8b       	std	Y+23, r24	; 0x17
     c56:	8f 89       	ldd	r24, Y+23	; 0x17
     c58:	98 8d       	ldd	r25, Y+24	; 0x18
     c5a:	9c 8f       	std	Y+28, r25	; 0x1c
     c5c:	8b 8f       	std	Y+27, r24	; 0x1b
     c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <APP_questions_press_any_btn_to_start+0x21e>
     c66:	9c 8f       	std	Y+28, r25	; 0x1c
     c68:	8b 8f       	std	Y+27, r24	; 0x1b
			_delay_ms(BTN_DEBOUNCING_DELAY);
			if( DIO_ReadPin(APP_QUESTIONS_NO_BTN_NUM) == HIGH){
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadPin>
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	39 f4       	brne	.+14     	; 0xc82 <APP_questions_press_any_btn_to_start+0x23e>
				LCD_clear();
     c74:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
				Global_u8_APP_questions_stages++ ;
     c78:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
		else{
	
		}
		
	}
}
     c82:	00 00       	nop
     c84:	6c 96       	adiw	r28, 0x1c	; 28
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <APP_questions_questions_stage>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void APP_questions_questions_stage(){
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	
	switch(Global_u8_APP_questions_stages){
     c9e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	91 05       	cpc	r25, r1
     caa:	09 f1       	breq	.+66     	; 0xcee <APP_questions_questions_stage+0x58>
     cac:	84 30       	cpi	r24, 0x04	; 4
     cae:	91 05       	cpc	r25, r1
     cb0:	34 f4       	brge	.+12     	; 0xcbe <APP_questions_questions_stage+0x28>
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	91 05       	cpc	r25, r1
     cb6:	49 f0       	breq	.+18     	; 0xcca <APP_questions_questions_stage+0x34>
     cb8:	02 97       	sbiw	r24, 0x02	; 2
     cba:	81 f0       	breq	.+32     	; 0xcdc <APP_questions_questions_stage+0x46>
		case QUESTION_FIVE_STAGE :
				LCD_sendString_RowCol(Global_arr_questions_ptr[QUESTION_FIVE_STAGE],0,0);
		break;
		default:
		
		break;
     cbc:	33 c0       	rjmp	.+102    	; 0xd24 <APP_questions_questions_stage+0x8e>
Function Return      : N/A

*******************************************************************************/
void APP_questions_questions_stage(){
	
	switch(Global_u8_APP_questions_stages){
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	91 05       	cpc	r25, r1
     cc2:	f1 f0       	breq	.+60     	; 0xd00 <APP_questions_questions_stage+0x6a>
     cc4:	05 97       	sbiw	r24, 0x05	; 5
     cc6:	29 f1       	breq	.+74     	; 0xd12 <APP_questions_questions_stage+0x7c>
		case QUESTION_FIVE_STAGE :
				LCD_sendString_RowCol(Global_arr_questions_ptr[QUESTION_FIVE_STAGE],0,0);
		break;
		default:
		
		break;
     cc8:	2d c0       	rjmp	.+90     	; 0xd24 <APP_questions_questions_stage+0x8e>
*******************************************************************************/
void APP_questions_questions_stage(){
	
	switch(Global_u8_APP_questions_stages){
		case QUESTION_ONE_STAGE :
				LCD_sendString_RowCol(Global_arr_questions_ptr[QUESTION_ONE_STAGE],0,0);
     cca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
     cce:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_start+0x3>
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
		break;
     cda:	24 c0       	rjmp	.+72     	; 0xd24 <APP_questions_questions_stage+0x8e>
		case QUESTION_TWO_STAGE :
				LCD_sendString_RowCol(Global_arr_questions_ptr[QUESTION_TWO_STAGE],0,0);
     cdc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_start+0x4>
     ce0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_start+0x5>
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
		break;
     cec:	1b c0       	rjmp	.+54     	; 0xd24 <APP_questions_questions_stage+0x8e>
		case QUESTION_THREE_STAGE :
				LCD_sendString_RowCol(Global_arr_questions_ptr[QUESTION_THREE_STAGE],0,0);
     cee:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_start+0x6>
     cf2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_start+0x7>
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
		break;
     cfe:	12 c0       	rjmp	.+36     	; 0xd24 <APP_questions_questions_stage+0x8e>
		case QUESTION_FOUR_STAGE :
				LCD_sendString_RowCol(Global_arr_questions_ptr[QUESTION_FOUR_STAGE],0,0);
     d00:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_start+0x8>
     d04:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_start+0x9>
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
		break;
     d10:	09 c0       	rjmp	.+18     	; 0xd24 <APP_questions_questions_stage+0x8e>
		case QUESTION_FIVE_STAGE :
				LCD_sendString_RowCol(Global_arr_questions_ptr[QUESTION_FIVE_STAGE],0,0);
     d12:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_start+0xa>
     d16:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_start+0xb>
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
		break;
     d22:	00 00       	nop
		default:
		
		break;
	}
}
     d24:	00 00       	nop
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <APP_questions_wait_for_answer>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void APP_questions_wait_for_answer(){
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	6c 97       	sbiw	r28, 0x1c	; 28
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
	
	/* check whether the stage is any questions stage */
	if(Global_u8_APP_questions_stages >= QUESTION_ONE_STAGE && Global_u8_APP_questions_stages <= QUESTION_FIVE_STAGE){
     d40:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     d44:	88 23       	and	r24, r24
     d46:	09 f4       	brne	.+2      	; 0xd4a <APP_questions_wait_for_answer+0x1e>
     d48:	07 c1       	rjmp	.+526    	; 0xf58 <APP_questions_wait_for_answer+0x22c>
     d4a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     d4e:	86 30       	cpi	r24, 0x06	; 6
     d50:	08 f0       	brcs	.+2      	; 0xd54 <APP_questions_wait_for_answer+0x28>
     d52:	02 c1       	rjmp	.+516    	; 0xf58 <APP_questions_wait_for_answer+0x22c>
		/* If any button pressed save score and move to the next question */
		if( DIO_ReadPin(APP_QUESTIONS_YES_BTN_NUM) == HIGH){
     d54:	84 e1       	ldi	r24, 0x14	; 20
     d56:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadPin>
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	09 f0       	breq	.+2      	; 0xd60 <APP_questions_wait_for_answer+0x34>
     d5e:	7c c0       	rjmp	.+248    	; 0xe58 <APP_questions_wait_for_answer+0x12c>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 ef       	ldi	r26, 0xF0	; 240
     d66:	b1 e4       	ldi	r27, 0x41	; 65
     d68:	8d 83       	std	Y+5, r24	; 0x05
     d6a:	9e 83       	std	Y+6, r25	; 0x06
     d6c:	af 83       	std	Y+7, r26	; 0x07
     d6e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a e7       	ldi	r20, 0x7A	; 122
     d76:	55 e4       	ldi	r21, 0x45	; 69
     d78:	6d 81       	ldd	r22, Y+5	; 0x05
     d7a:	7e 81       	ldd	r23, Y+6	; 0x06
     d7c:	8f 81       	ldd	r24, Y+7	; 0x07
     d7e:	98 85       	ldd	r25, Y+8	; 0x08
     d80:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	89 87       	std	Y+9, r24	; 0x09
     d8a:	9a 87       	std	Y+10, r25	; 0x0a
     d8c:	ab 87       	std	Y+11, r26	; 0x0b
     d8e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	69 85       	ldd	r22, Y+9	; 0x09
     d9a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     da0:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     da4:	88 23       	and	r24, r24
     da6:	2c f4       	brge	.+10     	; 0xdb2 <APP_questions_wait_for_answer+0x86>
		__ticks = 1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9e 87       	std	Y+14, r25	; 0x0e
     dae:	8d 87       	std	Y+13, r24	; 0x0d
     db0:	3f c0       	rjmp	.+126    	; 0xe30 <APP_questions_wait_for_answer+0x104>
	else if (__tmp > 65535)
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	69 85       	ldd	r22, Y+9	; 0x09
     dbc:	7a 85       	ldd	r23, Y+10	; 0x0a
     dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
     dc0:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc2:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	4c f5       	brge	.+82     	; 0xe1c <APP_questions_wait_for_answer+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	6d 81       	ldd	r22, Y+5	; 0x05
     dd4:	7e 81       	ldd	r23, Y+6	; 0x06
     dd6:	8f 81       	ldd	r24, Y+7	; 0x07
     dd8:	98 85       	ldd	r25, Y+8	; 0x08
     dda:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	9e 87       	std	Y+14, r25	; 0x0e
     df0:	8d 87       	std	Y+13, r24	; 0x0d
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <APP_questions_wait_for_answer+0xe6>
     df4:	80 e9       	ldi	r24, 0x90	; 144
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	98 8b       	std	Y+16, r25	; 0x10
     dfa:	8f 87       	std	Y+15, r24	; 0x0f
     dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfe:	98 89       	ldd	r25, Y+16	; 0x10
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <APP_questions_wait_for_answer+0xd4>
     e04:	98 8b       	std	Y+16, r25	; 0x10
     e06:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e08:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	9e 87       	std	Y+14, r25	; 0x0e
     e10:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e12:	8d 85       	ldd	r24, Y+13	; 0x0d
     e14:	9e 85       	ldd	r25, Y+14	; 0x0e
     e16:	89 2b       	or	r24, r25
     e18:	69 f7       	brne	.-38     	; 0xdf4 <APP_questions_wait_for_answer+0xc8>
     e1a:	14 c0       	rjmp	.+40     	; 0xe44 <APP_questions_wait_for_answer+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1c:	69 85       	ldd	r22, Y+9	; 0x09
     e1e:	7a 85       	ldd	r23, Y+10	; 0x0a
     e20:	8b 85       	ldd	r24, Y+11	; 0x0b
     e22:	9c 85       	ldd	r25, Y+12	; 0x0c
     e24:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9e 87       	std	Y+14, r25	; 0x0e
     e2e:	8d 87       	std	Y+13, r24	; 0x0d
     e30:	8d 85       	ldd	r24, Y+13	; 0x0d
     e32:	9e 85       	ldd	r25, Y+14	; 0x0e
     e34:	9a 8b       	std	Y+18, r25	; 0x12
     e36:	89 8b       	std	Y+17, r24	; 0x11
     e38:	89 89       	ldd	r24, Y+17	; 0x11
     e3a:	9a 89       	ldd	r25, Y+18	; 0x12
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <APP_questions_wait_for_answer+0x110>
     e40:	9a 8b       	std	Y+18, r25	; 0x12
     e42:	89 8b       	std	Y+17, r24	; 0x11
			_delay_ms(BTN_DEBOUNCING_DELAY);
			if( DIO_ReadPin(APP_QUESTIONS_YES_BTN_NUM) == HIGH){
     e44:	84 e1       	ldi	r24, 0x14	; 20
     e46:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadPin>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	09 f0       	breq	.+2      	; 0xe50 <APP_questions_wait_for_answer+0x124>
     e4e:	84 c0       	rjmp	.+264    	; 0xf58 <APP_questions_wait_for_answer+0x22c>
				/* check the answer and calculate score */
					APP_questions_check_answer(YES);	
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 b6 07 	call	0xf6c	; 0xf6c <APP_questions_check_answer>
			}
		}else{
			
		}
	}
}
     e56:	80 c0       	rjmp	.+256    	; 0xf58 <APP_questions_wait_for_answer+0x22c>
			_delay_ms(BTN_DEBOUNCING_DELAY);
			if( DIO_ReadPin(APP_QUESTIONS_YES_BTN_NUM) == HIGH){
				/* check the answer and calculate score */
					APP_questions_check_answer(YES);	
				}
		}else if( DIO_ReadPin(APP_QUESTIONS_NO_BTN_NUM) == HIGH){
     e58:	8a e0       	ldi	r24, 0x0A	; 10
     e5a:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadPin>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	09 f0       	breq	.+2      	; 0xe64 <APP_questions_wait_for_answer+0x138>
     e62:	7a c0       	rjmp	.+244    	; 0xf58 <APP_questions_wait_for_answer+0x22c>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 ef       	ldi	r26, 0xF0	; 240
     e6a:	b1 e4       	ldi	r27, 0x41	; 65
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	ab 83       	std	Y+3, r26	; 0x03
     e72:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	4a e7       	ldi	r20, 0x7A	; 122
     e7a:	55 e4       	ldi	r21, 0x45	; 69
     e7c:	69 81       	ldd	r22, Y+1	; 0x01
     e7e:	7a 81       	ldd	r23, Y+2	; 0x02
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	8b 8b       	std	Y+19, r24	; 0x13
     e8e:	9c 8b       	std	Y+20, r25	; 0x14
     e90:	ad 8b       	std	Y+21, r26	; 0x15
     e92:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e8       	ldi	r20, 0x80	; 128
     e9a:	5f e3       	ldi	r21, 0x3F	; 63
     e9c:	6b 89       	ldd	r22, Y+19	; 0x13
     e9e:	7c 89       	ldd	r23, Y+20	; 0x14
     ea0:	8d 89       	ldd	r24, Y+21	; 0x15
     ea2:	9e 89       	ldd	r25, Y+22	; 0x16
     ea4:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     ea8:	88 23       	and	r24, r24
     eaa:	2c f4       	brge	.+10     	; 0xeb6 <APP_questions_wait_for_answer+0x18a>
		__ticks = 1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	98 8f       	std	Y+24, r25	; 0x18
     eb2:	8f 8b       	std	Y+23, r24	; 0x17
     eb4:	3f c0       	rjmp	.+126    	; 0xf34 <APP_questions_wait_for_answer+0x208>
	else if (__tmp > 65535)
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	3f ef       	ldi	r19, 0xFF	; 255
     eba:	4f e7       	ldi	r20, 0x7F	; 127
     ebc:	57 e4       	ldi	r21, 0x47	; 71
     ebe:	6b 89       	ldd	r22, Y+19	; 0x13
     ec0:	7c 89       	ldd	r23, Y+20	; 0x14
     ec2:	8d 89       	ldd	r24, Y+21	; 0x15
     ec4:	9e 89       	ldd	r25, Y+22	; 0x16
     ec6:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
     eca:	18 16       	cp	r1, r24
     ecc:	4c f5       	brge	.+82     	; 0xf20 <APP_questions_wait_for_answer+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e2       	ldi	r20, 0x20	; 32
     ed4:	51 e4       	ldi	r21, 0x41	; 65
     ed6:	69 81       	ldd	r22, Y+1	; 0x01
     ed8:	7a 81       	ldd	r23, Y+2	; 0x02
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	98 8f       	std	Y+24, r25	; 0x18
     ef4:	8f 8b       	std	Y+23, r24	; 0x17
     ef6:	0f c0       	rjmp	.+30     	; 0xf16 <APP_questions_wait_for_answer+0x1ea>
     ef8:	80 e9       	ldi	r24, 0x90	; 144
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	9a 8f       	std	Y+26, r25	; 0x1a
     efe:	89 8f       	std	Y+25, r24	; 0x19
     f00:	89 8d       	ldd	r24, Y+25	; 0x19
     f02:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <APP_questions_wait_for_answer+0x1d8>
     f08:	9a 8f       	std	Y+26, r25	; 0x1a
     f0a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0c:	8f 89       	ldd	r24, Y+23	; 0x17
     f0e:	98 8d       	ldd	r25, Y+24	; 0x18
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	98 8f       	std	Y+24, r25	; 0x18
     f14:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f16:	8f 89       	ldd	r24, Y+23	; 0x17
     f18:	98 8d       	ldd	r25, Y+24	; 0x18
     f1a:	89 2b       	or	r24, r25
     f1c:	69 f7       	brne	.-38     	; 0xef8 <APP_questions_wait_for_answer+0x1cc>
     f1e:	14 c0       	rjmp	.+40     	; 0xf48 <APP_questions_wait_for_answer+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f20:	6b 89       	ldd	r22, Y+19	; 0x13
     f22:	7c 89       	ldd	r23, Y+20	; 0x14
     f24:	8d 89       	ldd	r24, Y+21	; 0x15
     f26:	9e 89       	ldd	r25, Y+22	; 0x16
     f28:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	98 8f       	std	Y+24, r25	; 0x18
     f32:	8f 8b       	std	Y+23, r24	; 0x17
     f34:	8f 89       	ldd	r24, Y+23	; 0x17
     f36:	98 8d       	ldd	r25, Y+24	; 0x18
     f38:	9c 8f       	std	Y+28, r25	; 0x1c
     f3a:	8b 8f       	std	Y+27, r24	; 0x1b
     f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <APP_questions_wait_for_answer+0x214>
     f44:	9c 8f       	std	Y+28, r25	; 0x1c
     f46:	8b 8f       	std	Y+27, r24	; 0x1b
			_delay_ms(BTN_DEBOUNCING_DELAY);
			if( DIO_ReadPin(APP_QUESTIONS_NO_BTN_NUM) == HIGH){
     f48:	8a e0       	ldi	r24, 0x0A	; 10
     f4a:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadPin>
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	19 f4       	brne	.+6      	; 0xf58 <APP_questions_wait_for_answer+0x22c>
				/* check the answer and calculate score */
				APP_questions_check_answer(NO);
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	0e 94 b6 07 	call	0xf6c	; 0xf6c <APP_questions_check_answer>
			}
		}else{
			
		}
	}
}
     f58:	00 00       	nop
     f5a:	6c 96       	adiw	r28, 0x1c	; 28
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <APP_questions_check_answer>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void APP_questions_check_answer(uint8 u8_answer){
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	e9 97       	sbiw	r28, 0x39	; 57
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	89 af       	std	Y+57, r24	; 0x39
	/* check whether the stage is any questions stage */
	if(Global_u8_APP_questions_stages >= QUESTION_ONE_STAGE && Global_u8_APP_questions_stages <= QUESTION_FIVE_STAGE){
     f82:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     f86:	88 23       	and	r24, r24
     f88:	09 f4       	brne	.+2      	; 0xf8c <APP_questions_check_answer+0x20>
     f8a:	09 c2       	rjmp	.+1042   	; 0x139e <APP_questions_check_answer+0x432>
     f8c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     f90:	86 30       	cpi	r24, 0x06	; 6
     f92:	08 f0       	brcs	.+2      	; 0xf96 <APP_questions_check_answer+0x2a>
     f94:	04 c2       	rjmp	.+1032   	; 0x139e <APP_questions_check_answer+0x432>
		/* In case of valid answer */
		if(Glocal_arr_questions_answer[Global_u8_APP_questions_stages] == u8_answer){
     f96:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	84 59       	subi	r24, 0x94	; 148
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	fc 01       	movw	r30, r24
     fa4:	90 81       	ld	r25, Z
     fa6:	89 ad       	ldd	r24, Y+57	; 0x39
     fa8:	98 17       	cp	r25, r24
     faa:	09 f0       	breq	.+2      	; 0xfae <APP_questions_check_answer+0x42>
     fac:	f9 c0       	rjmp	.+498    	; 0x11a0 <APP_questions_check_answer+0x234>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	aa ef       	ldi	r26, 0xFA	; 250
     fb4:	b3 e4       	ldi	r27, 0x43	; 67
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	9e 83       	std	Y+6, r25	; 0x06
     fba:	af 83       	std	Y+7, r26	; 0x07
     fbc:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a e7       	ldi	r20, 0x7A	; 122
     fc4:	55 e4       	ldi	r21, 0x45	; 69
     fc6:	6d 81       	ldd	r22, Y+5	; 0x05
     fc8:	7e 81       	ldd	r23, Y+6	; 0x06
     fca:	8f 81       	ldd	r24, Y+7	; 0x07
     fcc:	98 85       	ldd	r25, Y+8	; 0x08
     fce:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8b 8f       	std	Y+27, r24	; 0x1b
     fd8:	9c 8f       	std	Y+28, r25	; 0x1c
     fda:	ad 8f       	std	Y+29, r26	; 0x1d
     fdc:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	6b 8d       	ldd	r22, Y+27	; 0x1b
     fe8:	7c 8d       	ldd	r23, Y+28	; 0x1c
     fea:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fec:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fee:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	2c f4       	brge	.+10     	; 0x1000 <APP_questions_check_answer+0x94>
		__ticks = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	98 a3       	std	Y+32, r25	; 0x20
     ffc:	8f 8f       	std	Y+31, r24	; 0x1f
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <APP_questions_check_answer+0x112>
	else if (__tmp > 65535)
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	6b 8d       	ldd	r22, Y+27	; 0x1b
    100a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    100c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    100e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1010:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1014:	18 16       	cp	r1, r24
    1016:	4c f5       	brge	.+82     	; 0x106a <APP_questions_check_answer+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	6d 81       	ldd	r22, Y+5	; 0x05
    1022:	7e 81       	ldd	r23, Y+6	; 0x06
    1024:	8f 81       	ldd	r24, Y+7	; 0x07
    1026:	98 85       	ldd	r25, Y+8	; 0x08
    1028:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	98 a3       	std	Y+32, r25	; 0x20
    103e:	8f 8f       	std	Y+31, r24	; 0x1f
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <APP_questions_check_answer+0xf4>
    1042:	80 e9       	ldi	r24, 0x90	; 144
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	9a a3       	std	Y+34, r25	; 0x22
    1048:	89 a3       	std	Y+33, r24	; 0x21
    104a:	89 a1       	ldd	r24, Y+33	; 0x21
    104c:	9a a1       	ldd	r25, Y+34	; 0x22
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <APP_questions_check_answer+0xe2>
    1052:	9a a3       	std	Y+34, r25	; 0x22
    1054:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1058:	98 a1       	ldd	r25, Y+32	; 0x20
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	98 a3       	std	Y+32, r25	; 0x20
    105e:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1060:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1062:	98 a1       	ldd	r25, Y+32	; 0x20
    1064:	89 2b       	or	r24, r25
    1066:	69 f7       	brne	.-38     	; 0x1042 <APP_questions_check_answer+0xd6>
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <APP_questions_check_answer+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    106c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    106e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1070:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1072:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	98 a3       	std	Y+32, r25	; 0x20
    107c:	8f 8f       	std	Y+31, r24	; 0x1f
    107e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1080:	98 a1       	ldd	r25, Y+32	; 0x20
    1082:	9c a3       	std	Y+36, r25	; 0x24
    1084:	8b a3       	std	Y+35, r24	; 0x23
    1086:	8b a1       	ldd	r24, Y+35	; 0x23
    1088:	9c a1       	ldd	r25, Y+36	; 0x24
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <APP_questions_check_answer+0x11e>
    108e:	9c a3       	std	Y+36, r25	; 0x24
    1090:	8b a3       	std	Y+35, r24	; 0x23
			/* increase score and move to the next question */
			_delay_ms(HALF_SECOND_DELAY);
			LCD_clear();
    1092:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
			LCD_gotoRowColumn(0,0);
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_gotoRowColumn>
			True_Emoji();
    109e:	0e 94 01 01 	call	0x202	; 0x202 <True_Emoji>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	aa e7       	ldi	r26, 0x7A	; 122
    10a8:	b4 e4       	ldi	r27, 0x44	; 68
    10aa:	8d 87       	std	Y+13, r24	; 0x0d
    10ac:	9e 87       	std	Y+14, r25	; 0x0e
    10ae:	af 87       	std	Y+15, r26	; 0x0f
    10b0:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	4a e7       	ldi	r20, 0x7A	; 122
    10b8:	55 e4       	ldi	r21, 0x45	; 69
    10ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    10bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    10be:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c0:	98 89       	ldd	r25, Y+16	; 0x10
    10c2:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	89 8b       	std	Y+17, r24	; 0x11
    10cc:	9a 8b       	std	Y+18, r25	; 0x12
    10ce:	ab 8b       	std	Y+19, r26	; 0x13
    10d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e8       	ldi	r20, 0x80	; 128
    10d8:	5f e3       	ldi	r21, 0x3F	; 63
    10da:	69 89       	ldd	r22, Y+17	; 0x11
    10dc:	7a 89       	ldd	r23, Y+18	; 0x12
    10de:	8b 89       	ldd	r24, Y+19	; 0x13
    10e0:	9c 89       	ldd	r25, Y+20	; 0x14
    10e2:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    10e6:	88 23       	and	r24, r24
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <APP_questions_check_answer+0x188>
		__ticks = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9e 8b       	std	Y+22, r25	; 0x16
    10f0:	8d 8b       	std	Y+21, r24	; 0x15
    10f2:	3f c0       	rjmp	.+126    	; 0x1172 <APP_questions_check_answer+0x206>
	else if (__tmp > 65535)
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	3f ef       	ldi	r19, 0xFF	; 255
    10f8:	4f e7       	ldi	r20, 0x7F	; 127
    10fa:	57 e4       	ldi	r21, 0x47	; 71
    10fc:	69 89       	ldd	r22, Y+17	; 0x11
    10fe:	7a 89       	ldd	r23, Y+18	; 0x12
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1108:	18 16       	cp	r1, r24
    110a:	4c f5       	brge	.+82     	; 0x115e <APP_questions_check_answer+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e2       	ldi	r20, 0x20	; 32
    1112:	51 e4       	ldi	r21, 0x41	; 65
    1114:	6d 85       	ldd	r22, Y+13	; 0x0d
    1116:	7e 85       	ldd	r23, Y+14	; 0x0e
    1118:	8f 85       	ldd	r24, Y+15	; 0x0f
    111a:	98 89       	ldd	r25, Y+16	; 0x10
    111c:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	9e 8b       	std	Y+22, r25	; 0x16
    1132:	8d 8b       	std	Y+21, r24	; 0x15
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <APP_questions_check_answer+0x1e8>
    1136:	80 e9       	ldi	r24, 0x90	; 144
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	98 8f       	std	Y+24, r25	; 0x18
    113c:	8f 8b       	std	Y+23, r24	; 0x17
    113e:	8f 89       	ldd	r24, Y+23	; 0x17
    1140:	98 8d       	ldd	r25, Y+24	; 0x18
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <APP_questions_check_answer+0x1d6>
    1146:	98 8f       	std	Y+24, r25	; 0x18
    1148:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114a:	8d 89       	ldd	r24, Y+21	; 0x15
    114c:	9e 89       	ldd	r25, Y+22	; 0x16
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	9e 8b       	std	Y+22, r25	; 0x16
    1152:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1154:	8d 89       	ldd	r24, Y+21	; 0x15
    1156:	9e 89       	ldd	r25, Y+22	; 0x16
    1158:	89 2b       	or	r24, r25
    115a:	69 f7       	brne	.-38     	; 0x1136 <APP_questions_check_answer+0x1ca>
    115c:	14 c0       	rjmp	.+40     	; 0x1186 <APP_questions_check_answer+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115e:	69 89       	ldd	r22, Y+17	; 0x11
    1160:	7a 89       	ldd	r23, Y+18	; 0x12
    1162:	8b 89       	ldd	r24, Y+19	; 0x13
    1164:	9c 89       	ldd	r25, Y+20	; 0x14
    1166:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9e 8b       	std	Y+22, r25	; 0x16
    1170:	8d 8b       	std	Y+21, r24	; 0x15
    1172:	8d 89       	ldd	r24, Y+21	; 0x15
    1174:	9e 89       	ldd	r25, Y+22	; 0x16
    1176:	9a 8f       	std	Y+26, r25	; 0x1a
    1178:	89 8f       	std	Y+25, r24	; 0x19
    117a:	89 8d       	ldd	r24, Y+25	; 0x19
    117c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <APP_questions_check_answer+0x212>
    1182:	9a 8f       	std	Y+26, r25	; 0x1a
    1184:	89 8f       	std	Y+25, r24	; 0x19
			_delay_ms(1000);
			LCD_clear();
    1186:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
			Global_u8_score += POINTS_FOR_EACH_QUESTION ;
    118a:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <Global_u8_score>
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <Global_u8_score>
			Global_u8_APP_questions_stages++ ;
    1194:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
			Global_u8_APP_questions_stages++ ;
		}else{
			
		}	
	}
}
    119e:	ff c0       	rjmp	.+510    	; 0x139e <APP_questions_check_answer+0x432>
			_delay_ms(1000);
			LCD_clear();
			Global_u8_score += POINTS_FOR_EACH_QUESTION ;
			Global_u8_APP_questions_stages++ ;
		/* In case of wrong answer */
		}else if(Glocal_arr_questions_answer[Global_u8_APP_questions_stages] != u8_answer){
    11a0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	84 59       	subi	r24, 0x94	; 148
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	fc 01       	movw	r30, r24
    11ae:	90 81       	ld	r25, Z
    11b0:	89 ad       	ldd	r24, Y+57	; 0x39
    11b2:	98 17       	cp	r25, r24
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <APP_questions_check_answer+0x24c>
    11b6:	f3 c0       	rjmp	.+486    	; 0x139e <APP_questions_check_answer+0x432>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	aa ef       	ldi	r26, 0xFA	; 250
    11be:	b3 e4       	ldi	r27, 0x43	; 67
    11c0:	89 87       	std	Y+9, r24	; 0x09
    11c2:	9a 87       	std	Y+10, r25	; 0x0a
    11c4:	ab 87       	std	Y+11, r26	; 0x0b
    11c6:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	4a e7       	ldi	r20, 0x7A	; 122
    11ce:	55 e4       	ldi	r21, 0x45	; 69
    11d0:	69 85       	ldd	r22, Y+9	; 0x09
    11d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    11d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11d8:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	8f a7       	std	Y+47, r24	; 0x2f
    11e2:	98 ab       	std	Y+48, r25	; 0x30
    11e4:	a9 ab       	std	Y+49, r26	; 0x31
    11e6:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e8       	ldi	r20, 0x80	; 128
    11ee:	5f e3       	ldi	r21, 0x3F	; 63
    11f0:	6f a5       	ldd	r22, Y+47	; 0x2f
    11f2:	78 a9       	ldd	r23, Y+48	; 0x30
    11f4:	89 a9       	ldd	r24, Y+49	; 0x31
    11f6:	9a a9       	ldd	r25, Y+50	; 0x32
    11f8:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	2c f4       	brge	.+10     	; 0x120a <APP_questions_check_answer+0x29e>
		__ticks = 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9c ab       	std	Y+52, r25	; 0x34
    1206:	8b ab       	std	Y+51, r24	; 0x33
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <APP_questions_check_answer+0x31c>
	else if (__tmp > 65535)
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	3f ef       	ldi	r19, 0xFF	; 255
    120e:	4f e7       	ldi	r20, 0x7F	; 127
    1210:	57 e4       	ldi	r21, 0x47	; 71
    1212:	6f a5       	ldd	r22, Y+47	; 0x2f
    1214:	78 a9       	ldd	r23, Y+48	; 0x30
    1216:	89 a9       	ldd	r24, Y+49	; 0x31
    1218:	9a a9       	ldd	r25, Y+50	; 0x32
    121a:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    121e:	18 16       	cp	r1, r24
    1220:	4c f5       	brge	.+82     	; 0x1274 <APP_questions_check_answer+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e2       	ldi	r20, 0x20	; 32
    1228:	51 e4       	ldi	r21, 0x41	; 65
    122a:	69 85       	ldd	r22, Y+9	; 0x09
    122c:	7a 85       	ldd	r23, Y+10	; 0x0a
    122e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1230:	9c 85       	ldd	r25, Y+12	; 0x0c
    1232:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9c ab       	std	Y+52, r25	; 0x34
    1248:	8b ab       	std	Y+51, r24	; 0x33
    124a:	0f c0       	rjmp	.+30     	; 0x126a <APP_questions_check_answer+0x2fe>
    124c:	80 e9       	ldi	r24, 0x90	; 144
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	9e ab       	std	Y+54, r25	; 0x36
    1252:	8d ab       	std	Y+53, r24	; 0x35
    1254:	8d a9       	ldd	r24, Y+53	; 0x35
    1256:	9e a9       	ldd	r25, Y+54	; 0x36
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <APP_questions_check_answer+0x2ec>
    125c:	9e ab       	std	Y+54, r25	; 0x36
    125e:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1260:	8b a9       	ldd	r24, Y+51	; 0x33
    1262:	9c a9       	ldd	r25, Y+52	; 0x34
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	9c ab       	std	Y+52, r25	; 0x34
    1268:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126a:	8b a9       	ldd	r24, Y+51	; 0x33
    126c:	9c a9       	ldd	r25, Y+52	; 0x34
    126e:	89 2b       	or	r24, r25
    1270:	69 f7       	brne	.-38     	; 0x124c <APP_questions_check_answer+0x2e0>
    1272:	14 c0       	rjmp	.+40     	; 0x129c <APP_questions_check_answer+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	6f a5       	ldd	r22, Y+47	; 0x2f
    1276:	78 a9       	ldd	r23, Y+48	; 0x30
    1278:	89 a9       	ldd	r24, Y+49	; 0x31
    127a:	9a a9       	ldd	r25, Y+50	; 0x32
    127c:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9c ab       	std	Y+52, r25	; 0x34
    1286:	8b ab       	std	Y+51, r24	; 0x33
    1288:	8b a9       	ldd	r24, Y+51	; 0x33
    128a:	9c a9       	ldd	r25, Y+52	; 0x34
    128c:	98 af       	std	Y+56, r25	; 0x38
    128e:	8f ab       	std	Y+55, r24	; 0x37
    1290:	8f a9       	ldd	r24, Y+55	; 0x37
    1292:	98 ad       	ldd	r25, Y+56	; 0x38
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <APP_questions_check_answer+0x328>
    1298:	98 af       	std	Y+56, r25	; 0x38
    129a:	8f ab       	std	Y+55, r24	; 0x37
			/* Move to the next question */
			_delay_ms(HALF_SECOND_DELAY);
			LCD_clear();
    129c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
			LCD_gotoRowColumn(0,0);
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_gotoRowColumn>
			False_Emoji();
    12a8:	0e 94 08 02 	call	0x410	; 0x410 <False_Emoji>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	aa e7       	ldi	r26, 0x7A	; 122
    12b2:	b4 e4       	ldi	r27, 0x44	; 68
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	ab 83       	std	Y+3, r26	; 0x03
    12ba:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	4a e7       	ldi	r20, 0x7A	; 122
    12c2:	55 e4       	ldi	r21, 0x45	; 69
    12c4:	69 81       	ldd	r22, Y+1	; 0x01
    12c6:	7a 81       	ldd	r23, Y+2	; 0x02
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8d a3       	std	Y+37, r24	; 0x25
    12d6:	9e a3       	std	Y+38, r25	; 0x26
    12d8:	af a3       	std	Y+39, r26	; 0x27
    12da:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	6d a1       	ldd	r22, Y+37	; 0x25
    12e6:	7e a1       	ldd	r23, Y+38	; 0x26
    12e8:	8f a1       	ldd	r24, Y+39	; 0x27
    12ea:	98 a5       	ldd	r25, Y+40	; 0x28
    12ec:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <APP_questions_check_answer+0x392>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9a a7       	std	Y+42, r25	; 0x2a
    12fa:	89 a7       	std	Y+41, r24	; 0x29
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <APP_questions_check_answer+0x410>
	else if (__tmp > 65535)
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	57 e4       	ldi	r21, 0x47	; 71
    1306:	6d a1       	ldd	r22, Y+37	; 0x25
    1308:	7e a1       	ldd	r23, Y+38	; 0x26
    130a:	8f a1       	ldd	r24, Y+39	; 0x27
    130c:	98 a5       	ldd	r25, Y+40	; 0x28
    130e:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <APP_questions_check_answer+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	69 81       	ldd	r22, Y+1	; 0x01
    1320:	7a 81       	ldd	r23, Y+2	; 0x02
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9a a7       	std	Y+42, r25	; 0x2a
    133c:	89 a7       	std	Y+41, r24	; 0x29
    133e:	0f c0       	rjmp	.+30     	; 0x135e <APP_questions_check_answer+0x3f2>
    1340:	80 e9       	ldi	r24, 0x90	; 144
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	9c a7       	std	Y+44, r25	; 0x2c
    1346:	8b a7       	std	Y+43, r24	; 0x2b
    1348:	8b a5       	ldd	r24, Y+43	; 0x2b
    134a:	9c a5       	ldd	r25, Y+44	; 0x2c
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <APP_questions_check_answer+0x3e0>
    1350:	9c a7       	std	Y+44, r25	; 0x2c
    1352:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	89 a5       	ldd	r24, Y+41	; 0x29
    1356:	9a a5       	ldd	r25, Y+42	; 0x2a
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9a a7       	std	Y+42, r25	; 0x2a
    135c:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	89 a5       	ldd	r24, Y+41	; 0x29
    1360:	9a a5       	ldd	r25, Y+42	; 0x2a
    1362:	89 2b       	or	r24, r25
    1364:	69 f7       	brne	.-38     	; 0x1340 <APP_questions_check_answer+0x3d4>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <APP_questions_check_answer+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	6d a1       	ldd	r22, Y+37	; 0x25
    136a:	7e a1       	ldd	r23, Y+38	; 0x26
    136c:	8f a1       	ldd	r24, Y+39	; 0x27
    136e:	98 a5       	ldd	r25, Y+40	; 0x28
    1370:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9a a7       	std	Y+42, r25	; 0x2a
    137a:	89 a7       	std	Y+41, r24	; 0x29
    137c:	89 a5       	ldd	r24, Y+41	; 0x29
    137e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1380:	9e a7       	std	Y+46, r25	; 0x2e
    1382:	8d a7       	std	Y+45, r24	; 0x2d
    1384:	8d a5       	ldd	r24, Y+45	; 0x2d
    1386:	9e a5       	ldd	r25, Y+46	; 0x2e
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <APP_questions_check_answer+0x41c>
    138c:	9e a7       	std	Y+46, r25	; 0x2e
    138e:	8d a7       	std	Y+45, r24	; 0x2d
			_delay_ms(1000);
			LCD_clear();
    1390:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
			Global_u8_APP_questions_stages++ ;
    1394:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
		}else{
			
		}	
	}
}
    139e:	00 00       	nop
    13a0:	e9 96       	adiw	r28, 0x39	; 57
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <APP_questions_show_score>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void APP_questions_show_score(){
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	if(Global_u8_APP_questions_stages == SCORE_SCREEN_STAGE){
    13ba:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
    13be:	86 30       	cpi	r24, 0x06	; 6
    13c0:	91 f4       	brne	.+36     	; 0x13e6 <APP_questions_show_score+0x34>
		LCD_clear();
    13c2:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_clear>
		LCD_sendString_RowCol("Score = ",0,0);
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	81 ef       	ldi	r24, 0xF1	; 241
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 4e 13 	call	0x269c	; 0x269c <LCD_sendString_RowCol>
		LCD_displayCharacter((Global_u8_score + 48));
    13d2:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <Global_u8_score>
    13d6:	80 5d       	subi	r24, 0xD0	; 208
    13d8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
		Global_u8_APP_questions_stages++ ;
    13dc:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
		
	}
	
    13e6:	00 00       	nop
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <DIO_WritePin>:

Functions Parameters : PinValue (0,1) , PinNum (number of the pin to write into it from 0 to 31)

Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <DIO_WritePin+0x6>
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(PinValue){								/* check the value of the written pin */
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	21 f0       	breq	.+8      	; 0x140e <DIO_WritePin+0x20>
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	09 f4       	brne	.+2      	; 0x140c <DIO_WritePin+0x1e>
    140a:	7a c0       	rjmp	.+244    	; 0x1500 <DIO_WritePin+0x112>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Set_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM)); /* set the pin wanted */
			}			
		break;
		default:
		break;
    140c:	ef c0       	rjmp	.+478    	; 0x15ec <DIO_WritePin+0x1fe>
Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	switch(PinValue){								/* check the value of the written pin */
		case LOW :									/* case the pin has low value */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){	/* check porta pins */
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	88 30       	cpi	r24, 0x08	; 8
    1412:	b0 f4       	brcc	.+44     	; 0x1440 <DIO_WritePin+0x52>
				Clear_Bit(PORT_A,PinNum);				/* clear the pin wanted */
    1414:	8b e3       	ldi	r24, 0x3B	; 59
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	2b e3       	ldi	r18, 0x3B	; 59
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	f9 01       	movw	r30, r18
    141e:	20 81       	ld	r18, Z
    1420:	62 2f       	mov	r22, r18
    1422:	29 81       	ldd	r18, Y+1	; 0x01
    1424:	42 2f       	mov	r20, r18
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	21 e0       	ldi	r18, 0x01	; 1
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_WritePin+0x44>
    142e:	22 0f       	add	r18, r18
    1430:	33 1f       	adc	r19, r19
    1432:	4a 95       	dec	r20
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_WritePin+0x40>
    1436:	20 95       	com	r18
    1438:	26 23       	and	r18, r22
    143a:	fc 01       	movw	r30, r24
    143c:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){	/* check portc pins */
				Clear_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* clear the pin wanted */
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Clear_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM));	/* clear the pin wanted */
			}
		break;
    143e:	d3 c0       	rjmp	.+422    	; 0x15e6 <DIO_WritePin+0x1f8>
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	switch(PinValue){								/* check the value of the written pin */
		case LOW :									/* case the pin has low value */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){	/* check porta pins */
				Clear_Bit(PORT_A,PinNum);				/* clear the pin wanted */
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){ /* check portb pins */
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	e0 f0       	brcs	.+56     	; 0x147e <DIO_WritePin+0x90>
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	80 31       	cpi	r24, 0x10	; 16
    144a:	c8 f4       	brcc	.+50     	; 0x147e <DIO_WritePin+0x90>
				Clear_Bit(PORT_B,(PinNum - PORTB_STARTING_PIN_NUM));	/* clear the pin wanted */
    144c:	88 e3       	ldi	r24, 0x38	; 56
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	28 e3       	ldi	r18, 0x38	; 56
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	f9 01       	movw	r30, r18
    1456:	20 81       	ld	r18, Z
    1458:	62 2f       	mov	r22, r18
    145a:	29 81       	ldd	r18, Y+1	; 0x01
    145c:	22 2f       	mov	r18, r18
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	a9 01       	movw	r20, r18
    1462:	48 50       	subi	r20, 0x08	; 8
    1464:	51 09       	sbc	r21, r1
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_WritePin+0x82>
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	4a 95       	dec	r20
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_WritePin+0x7e>
    1474:	20 95       	com	r18
    1476:	26 23       	and	r18, r22
    1478:	fc 01       	movw	r30, r24
    147a:	20 83       	st	Z, r18
    147c:	40 c0       	rjmp	.+128    	; 0x14fe <DIO_WritePin+0x110>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){	/* check portc pins */
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	80 31       	cpi	r24, 0x10	; 16
    1482:	e0 f0       	brcs	.+56     	; 0x14bc <DIO_WritePin+0xce>
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	88 31       	cpi	r24, 0x18	; 24
    1488:	c8 f4       	brcc	.+50     	; 0x14bc <DIO_WritePin+0xce>
				Clear_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* clear the pin wanted */
    148a:	85 e3       	ldi	r24, 0x35	; 53
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	25 e3       	ldi	r18, 0x35	; 53
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	f9 01       	movw	r30, r18
    1494:	20 81       	ld	r18, Z
    1496:	62 2f       	mov	r22, r18
    1498:	29 81       	ldd	r18, Y+1	; 0x01
    149a:	22 2f       	mov	r18, r18
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	a9 01       	movw	r20, r18
    14a0:	40 51       	subi	r20, 0x10	; 16
    14a2:	51 09       	sbc	r21, r1
    14a4:	21 e0       	ldi	r18, 0x01	; 1
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_WritePin+0xc0>
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	4a 95       	dec	r20
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_WritePin+0xbc>
    14b2:	20 95       	com	r18
    14b4:	26 23       	and	r18, r22
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18
    14ba:	21 c0       	rjmp	.+66     	; 0x14fe <DIO_WritePin+0x110>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	88 31       	cpi	r24, 0x18	; 24
    14c0:	08 f4       	brcc	.+2      	; 0x14c4 <DIO_WritePin+0xd6>
    14c2:	91 c0       	rjmp	.+290    	; 0x15e6 <DIO_WritePin+0x1f8>
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	80 32       	cpi	r24, 0x20	; 32
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <DIO_WritePin+0xde>
    14ca:	8d c0       	rjmp	.+282    	; 0x15e6 <DIO_WritePin+0x1f8>
				Clear_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM));	/* clear the pin wanted */
    14cc:	82 e3       	ldi	r24, 0x32	; 50
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	22 e3       	ldi	r18, 0x32	; 50
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	f9 01       	movw	r30, r18
    14d6:	20 81       	ld	r18, Z
    14d8:	62 2f       	mov	r22, r18
    14da:	29 81       	ldd	r18, Y+1	; 0x01
    14dc:	22 2f       	mov	r18, r18
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	a9 01       	movw	r20, r18
    14e2:	48 51       	subi	r20, 0x18	; 24
    14e4:	51 09       	sbc	r21, r1
    14e6:	21 e0       	ldi	r18, 0x01	; 1
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_WritePin+0x102>
    14ec:	22 0f       	add	r18, r18
    14ee:	33 1f       	adc	r19, r19
    14f0:	4a 95       	dec	r20
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_WritePin+0xfe>
    14f4:	20 95       	com	r18
    14f6:	26 23       	and	r18, r22
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18
			}
		break;
    14fc:	74 c0       	rjmp	.+232    	; 0x15e6 <DIO_WritePin+0x1f8>
    14fe:	73 c0       	rjmp	.+230    	; 0x15e6 <DIO_WritePin+0x1f8>
		case HIGH :		/* case the pin has high value */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){ /* check porta pins */
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	a8 f4       	brcc	.+42     	; 0x1530 <DIO_WritePin+0x142>
				Set_Bit(PORT_A,PinNum);	/* set the pin wanted */
    1506:	8b e3       	ldi	r24, 0x3B	; 59
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	2b e3       	ldi	r18, 0x3B	; 59
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	f9 01       	movw	r30, r18
    1510:	20 81       	ld	r18, Z
    1512:	62 2f       	mov	r22, r18
    1514:	29 81       	ldd	r18, Y+1	; 0x01
    1516:	42 2f       	mov	r20, r18
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	21 e0       	ldi	r18, 0x01	; 1
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_WritePin+0x136>
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	4a 95       	dec	r20
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_WritePin+0x132>
    1528:	26 2b       	or	r18, r22
    152a:	fc 01       	movw	r30, r24
    152c:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){ /* check potc pins */
				Set_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* set the pin wanted */
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Set_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM)); /* set the pin wanted */
			}			
		break;
    152e:	5d c0       	rjmp	.+186    	; 0x15ea <DIO_WritePin+0x1fc>
			}
		break;
		case HIGH :		/* case the pin has high value */
			if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){ /* check porta pins */
				Set_Bit(PORT_A,PinNum);	/* set the pin wanted */
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){ /* check portb pins */
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	88 30       	cpi	r24, 0x08	; 8
    1534:	d8 f0       	brcs	.+54     	; 0x156c <DIO_WritePin+0x17e>
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	80 31       	cpi	r24, 0x10	; 16
    153a:	c0 f4       	brcc	.+48     	; 0x156c <DIO_WritePin+0x17e>
				Set_Bit(PORT_B,(PinNum - PORTB_STARTING_PIN_NUM)); /* set the pin wanted */
    153c:	88 e3       	ldi	r24, 0x38	; 56
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	28 e3       	ldi	r18, 0x38	; 56
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	f9 01       	movw	r30, r18
    1546:	20 81       	ld	r18, Z
    1548:	62 2f       	mov	r22, r18
    154a:	29 81       	ldd	r18, Y+1	; 0x01
    154c:	22 2f       	mov	r18, r18
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	48 50       	subi	r20, 0x08	; 8
    1554:	51 09       	sbc	r21, r1
    1556:	21 e0       	ldi	r18, 0x01	; 1
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_WritePin+0x172>
    155c:	22 0f       	add	r18, r18
    155e:	33 1f       	adc	r19, r19
    1560:	4a 95       	dec	r20
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_WritePin+0x16e>
    1564:	26 2b       	or	r18, r22
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
    156a:	3c c0       	rjmp	.+120    	; 0x15e4 <DIO_WritePin+0x1f6>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){ /* check potc pins */
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	80 31       	cpi	r24, 0x10	; 16
    1570:	d8 f0       	brcs	.+54     	; 0x15a8 <DIO_WritePin+0x1ba>
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	88 31       	cpi	r24, 0x18	; 24
    1576:	c0 f4       	brcc	.+48     	; 0x15a8 <DIO_WritePin+0x1ba>
				Set_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* set the pin wanted */
    1578:	85 e3       	ldi	r24, 0x35	; 53
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	25 e3       	ldi	r18, 0x35	; 53
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	f9 01       	movw	r30, r18
    1582:	20 81       	ld	r18, Z
    1584:	62 2f       	mov	r22, r18
    1586:	29 81       	ldd	r18, Y+1	; 0x01
    1588:	22 2f       	mov	r18, r18
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	a9 01       	movw	r20, r18
    158e:	40 51       	subi	r20, 0x10	; 16
    1590:	51 09       	sbc	r21, r1
    1592:	21 e0       	ldi	r18, 0x01	; 1
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_WritePin+0x1ae>
    1598:	22 0f       	add	r18, r18
    159a:	33 1f       	adc	r19, r19
    159c:	4a 95       	dec	r20
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_WritePin+0x1aa>
    15a0:	26 2b       	or	r18, r22
    15a2:	fc 01       	movw	r30, r24
    15a4:	20 83       	st	Z, r18
    15a6:	1e c0       	rjmp	.+60     	; 0x15e4 <DIO_WritePin+0x1f6>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	88 31       	cpi	r24, 0x18	; 24
    15ac:	f0 f0       	brcs	.+60     	; 0x15ea <DIO_WritePin+0x1fc>
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	80 32       	cpi	r24, 0x20	; 32
    15b2:	d8 f4       	brcc	.+54     	; 0x15ea <DIO_WritePin+0x1fc>
				Set_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM)); /* set the pin wanted */
    15b4:	82 e3       	ldi	r24, 0x32	; 50
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	22 e3       	ldi	r18, 0x32	; 50
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	f9 01       	movw	r30, r18
    15be:	20 81       	ld	r18, Z
    15c0:	62 2f       	mov	r22, r18
    15c2:	29 81       	ldd	r18, Y+1	; 0x01
    15c4:	22 2f       	mov	r18, r18
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	a9 01       	movw	r20, r18
    15ca:	48 51       	subi	r20, 0x18	; 24
    15cc:	51 09       	sbc	r21, r1
    15ce:	21 e0       	ldi	r18, 0x01	; 1
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_WritePin+0x1ea>
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	4a 95       	dec	r20
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_WritePin+0x1e6>
    15dc:	26 2b       	or	r18, r22
    15de:	fc 01       	movw	r30, r24
    15e0:	20 83       	st	Z, r18
			}			
		break;
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <DIO_WritePin+0x1fc>
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_WritePin+0x1fc>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){	/* check portc pins */
				Clear_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* clear the pin wanted */
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Clear_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM));	/* clear the pin wanted */
			}
		break;
    15e6:	00 00       	nop
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <DIO_WritePin+0x1fe>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){ /* check potc pins */
				Set_Bit(PORT_C,(PinNum - PORTC_STARTING_PIN_NUM)); /* set the pin wanted */
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){ /* check portd pins */
				Set_Bit(PORT_D,(PinNum - PORTD_STARTING_PIN_NUM)); /* set the pin wanted */
			}			
		break;
    15ea:	00 00       	nop
		default:
		break;
	}
}
    15ec:	00 00       	nop
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <DIO_SetPinDirection>:

Functions Parameters : PinDirection	 (Input or Output) , PinNum (number of the pin to write into it from 0 to 31)

Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <DIO_SetPinDirection+0x6>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	6a 83       	std	Y+2, r22	; 0x02
	switch(PinDirection){			/* check the direction of the pin wanted */
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	21 f0       	breq	.+8      	; 0x1618 <DIO_SetPinDirection+0x20>
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	09 f4       	brne	.+2      	; 0x1616 <DIO_SetPinDirection+0x1e>
    1614:	7a c0       	rjmp	.+244    	; 0x170a <DIO_SetPinDirection+0x112>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
			Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
		}
		break;
		default:
		break;
    1616:	ef c0       	rjmp	.+478    	; 0x17f6 <DIO_SetPinDirection+0x1fe>
Functions Return     : N/A
*****************************************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){			/* check the direction of the pin wanted */
		case INPUT :				/* case input pin */
		if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){		/* case porta */
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	88 30       	cpi	r24, 0x08	; 8
    161c:	b0 f4       	brcc	.+44     	; 0x164a <DIO_SetPinDirection+0x52>
			Clear_Bit(DDR_A,PinNum);
    161e:	8a e3       	ldi	r24, 0x3A	; 58
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	2a e3       	ldi	r18, 0x3A	; 58
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	f9 01       	movw	r30, r18
    1628:	20 81       	ld	r18, Z
    162a:	62 2f       	mov	r22, r18
    162c:	29 81       	ldd	r18, Y+1	; 0x01
    162e:	42 2f       	mov	r20, r18
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_SetPinDirection+0x44>
    1638:	22 0f       	add	r18, r18
    163a:	33 1f       	adc	r19, r19
    163c:	4a 95       	dec	r20
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_SetPinDirection+0x40>
    1640:	20 95       	com	r18
    1642:	26 23       	and	r18, r22
    1644:	fc 01       	movw	r30, r24
    1646:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
			Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
			Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
		}
		break;
    1648:	d3 c0       	rjmp	.+422    	; 0x17f0 <DIO_SetPinDirection+0x1f8>
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	switch(PinDirection){			/* check the direction of the pin wanted */
		case INPUT :				/* case input pin */
		if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){		/* case porta */
			Clear_Bit(DDR_A,PinNum);
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	88 30       	cpi	r24, 0x08	; 8
    164e:	e0 f0       	brcs	.+56     	; 0x1688 <DIO_SetPinDirection+0x90>
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	80 31       	cpi	r24, 0x10	; 16
    1654:	c8 f4       	brcc	.+50     	; 0x1688 <DIO_SetPinDirection+0x90>
			Clear_Bit(DDR_B,(PinNum - PORTB_STARTING_PIN_NUM));
    1656:	87 e3       	ldi	r24, 0x37	; 55
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	27 e3       	ldi	r18, 0x37	; 55
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	f9 01       	movw	r30, r18
    1660:	20 81       	ld	r18, Z
    1662:	62 2f       	mov	r22, r18
    1664:	29 81       	ldd	r18, Y+1	; 0x01
    1666:	22 2f       	mov	r18, r18
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	a9 01       	movw	r20, r18
    166c:	48 50       	subi	r20, 0x08	; 8
    166e:	51 09       	sbc	r21, r1
    1670:	21 e0       	ldi	r18, 0x01	; 1
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_SetPinDirection+0x82>
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	4a 95       	dec	r20
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_SetPinDirection+0x7e>
    167e:	20 95       	com	r18
    1680:	26 23       	and	r18, r22
    1682:	fc 01       	movw	r30, r24
    1684:	20 83       	st	Z, r18
    1686:	40 c0       	rjmp	.+128    	; 0x1708 <DIO_SetPinDirection+0x110>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	80 31       	cpi	r24, 0x10	; 16
    168c:	e0 f0       	brcs	.+56     	; 0x16c6 <DIO_SetPinDirection+0xce>
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	88 31       	cpi	r24, 0x18	; 24
    1692:	c8 f4       	brcc	.+50     	; 0x16c6 <DIO_SetPinDirection+0xce>
			Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
    1694:	84 e3       	ldi	r24, 0x34	; 52
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	24 e3       	ldi	r18, 0x34	; 52
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	f9 01       	movw	r30, r18
    169e:	20 81       	ld	r18, Z
    16a0:	62 2f       	mov	r22, r18
    16a2:	29 81       	ldd	r18, Y+1	; 0x01
    16a4:	22 2f       	mov	r18, r18
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	a9 01       	movw	r20, r18
    16aa:	40 51       	subi	r20, 0x10	; 16
    16ac:	51 09       	sbc	r21, r1
    16ae:	21 e0       	ldi	r18, 0x01	; 1
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_SetPinDirection+0xc0>
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	4a 95       	dec	r20
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_SetPinDirection+0xbc>
    16bc:	20 95       	com	r18
    16be:	26 23       	and	r18, r22
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 83       	st	Z, r18
    16c4:	21 c0       	rjmp	.+66     	; 0x1708 <DIO_SetPinDirection+0x110>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	88 31       	cpi	r24, 0x18	; 24
    16ca:	08 f4       	brcc	.+2      	; 0x16ce <DIO_SetPinDirection+0xd6>
    16cc:	91 c0       	rjmp	.+290    	; 0x17f0 <DIO_SetPinDirection+0x1f8>
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	80 32       	cpi	r24, 0x20	; 32
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <DIO_SetPinDirection+0xde>
    16d4:	8d c0       	rjmp	.+282    	; 0x17f0 <DIO_SetPinDirection+0x1f8>
			Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
    16d6:	81 e3       	ldi	r24, 0x31	; 49
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	21 e3       	ldi	r18, 0x31	; 49
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	f9 01       	movw	r30, r18
    16e0:	20 81       	ld	r18, Z
    16e2:	62 2f       	mov	r22, r18
    16e4:	29 81       	ldd	r18, Y+1	; 0x01
    16e6:	22 2f       	mov	r18, r18
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	a9 01       	movw	r20, r18
    16ec:	48 51       	subi	r20, 0x18	; 24
    16ee:	51 09       	sbc	r21, r1
    16f0:	21 e0       	ldi	r18, 0x01	; 1
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_SetPinDirection+0x102>
    16f6:	22 0f       	add	r18, r18
    16f8:	33 1f       	adc	r19, r19
    16fa:	4a 95       	dec	r20
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_SetPinDirection+0xfe>
    16fe:	20 95       	com	r18
    1700:	26 23       	and	r18, r22
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18
		}
		break;
    1706:	74 c0       	rjmp	.+232    	; 0x17f0 <DIO_SetPinDirection+0x1f8>
    1708:	73 c0       	rjmp	.+230    	; 0x17f0 <DIO_SetPinDirection+0x1f8>
		case OUTPUT :
		if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 30       	cpi	r24, 0x08	; 8
    170e:	a8 f4       	brcc	.+42     	; 0x173a <DIO_SetPinDirection+0x142>
			Set_Bit(DDR_A,PinNum);
    1710:	8a e3       	ldi	r24, 0x3A	; 58
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	2a e3       	ldi	r18, 0x3A	; 58
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	62 2f       	mov	r22, r18
    171e:	29 81       	ldd	r18, Y+1	; 0x01
    1720:	42 2f       	mov	r20, r18
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	21 e0       	ldi	r18, 0x01	; 1
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_SetPinDirection+0x136>
    172a:	22 0f       	add	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	4a 95       	dec	r20
    1730:	e2 f7       	brpl	.-8      	; 0x172a <DIO_SetPinDirection+0x132>
    1732:	26 2b       	or	r18, r22
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
			Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
			Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
		}
		break;
    1738:	5d c0       	rjmp	.+186    	; 0x17f4 <DIO_SetPinDirection+0x1fc>
		}
		break;
		case OUTPUT :
		if(PinNum >= PORTA_STARTING_PIN_NUM && PinNum <= PORTA_ENDING_PIN_NUM){
			Set_Bit(DDR_A,PinNum);
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	88 30       	cpi	r24, 0x08	; 8
    173e:	d8 f0       	brcs	.+54     	; 0x1776 <DIO_SetPinDirection+0x17e>
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	80 31       	cpi	r24, 0x10	; 16
    1744:	c0 f4       	brcc	.+48     	; 0x1776 <DIO_SetPinDirection+0x17e>
			Set_Bit(DDR_B,(PinNum - PORTB_STARTING_PIN_NUM));
    1746:	87 e3       	ldi	r24, 0x37	; 55
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	27 e3       	ldi	r18, 0x37	; 55
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	f9 01       	movw	r30, r18
    1750:	20 81       	ld	r18, Z
    1752:	62 2f       	mov	r22, r18
    1754:	29 81       	ldd	r18, Y+1	; 0x01
    1756:	22 2f       	mov	r18, r18
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	48 50       	subi	r20, 0x08	; 8
    175e:	51 09       	sbc	r21, r1
    1760:	21 e0       	ldi	r18, 0x01	; 1
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_SetPinDirection+0x172>
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	4a 95       	dec	r20
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_SetPinDirection+0x16e>
    176e:	26 2b       	or	r18, r22
    1770:	fc 01       	movw	r30, r24
    1772:	20 83       	st	Z, r18
    1774:	3c c0       	rjmp	.+120    	; 0x17ee <DIO_SetPinDirection+0x1f6>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	80 31       	cpi	r24, 0x10	; 16
    177a:	d8 f0       	brcs	.+54     	; 0x17b2 <DIO_SetPinDirection+0x1ba>
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	88 31       	cpi	r24, 0x18	; 24
    1780:	c0 f4       	brcc	.+48     	; 0x17b2 <DIO_SetPinDirection+0x1ba>
			Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
    1782:	84 e3       	ldi	r24, 0x34	; 52
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	24 e3       	ldi	r18, 0x34	; 52
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	62 2f       	mov	r22, r18
    1790:	29 81       	ldd	r18, Y+1	; 0x01
    1792:	22 2f       	mov	r18, r18
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	a9 01       	movw	r20, r18
    1798:	40 51       	subi	r20, 0x10	; 16
    179a:	51 09       	sbc	r21, r1
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_SetPinDirection+0x1ae>
    17a2:	22 0f       	add	r18, r18
    17a4:	33 1f       	adc	r19, r19
    17a6:	4a 95       	dec	r20
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_SetPinDirection+0x1aa>
    17aa:	26 2b       	or	r18, r22
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
    17b0:	1e c0       	rjmp	.+60     	; 0x17ee <DIO_SetPinDirection+0x1f6>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	88 31       	cpi	r24, 0x18	; 24
    17b6:	f0 f0       	brcs	.+60     	; 0x17f4 <DIO_SetPinDirection+0x1fc>
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	80 32       	cpi	r24, 0x20	; 32
    17bc:	d8 f4       	brcc	.+54     	; 0x17f4 <DIO_SetPinDirection+0x1fc>
			Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
    17be:	81 e3       	ldi	r24, 0x31	; 49
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	21 e3       	ldi	r18, 0x31	; 49
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	f9 01       	movw	r30, r18
    17c8:	20 81       	ld	r18, Z
    17ca:	62 2f       	mov	r22, r18
    17cc:	29 81       	ldd	r18, Y+1	; 0x01
    17ce:	22 2f       	mov	r18, r18
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	a9 01       	movw	r20, r18
    17d4:	48 51       	subi	r20, 0x18	; 24
    17d6:	51 09       	sbc	r21, r1
    17d8:	21 e0       	ldi	r18, 0x01	; 1
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_SetPinDirection+0x1ea>
    17de:	22 0f       	add	r18, r18
    17e0:	33 1f       	adc	r19, r19
    17e2:	4a 95       	dec	r20
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_SetPinDirection+0x1e6>
    17e6:	26 2b       	or	r18, r22
    17e8:	fc 01       	movw	r30, r24
    17ea:	20 83       	st	Z, r18
		}
		break;
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <DIO_SetPinDirection+0x1fc>
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_SetPinDirection+0x1fc>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
			Clear_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
			Clear_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
		}
		break;
    17f0:	00 00       	nop
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <DIO_SetPinDirection+0x1fe>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
			Set_Bit(DDR_C,(PinNum - PORTC_STARTING_PIN_NUM));
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
			Set_Bit(DDR_D,(PinNum - PORTD_STARTING_PIN_NUM));
		}
		break;
    17f4:	00 00       	nop
		default:
		break;
	}
}
    17f6:	00 00       	nop
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <DIO_ReadPin>:

Functions Parameters : PinNum (number of the pin to write into it from 0 to 31)

Functions Return     : the read value of the pin (HIGH , LOW)
*****************************************************************************************************************************/
uint8 DIO_ReadPin(uint8 PinNum){
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	00 d0       	rcall	.+0      	; 0x1808 <DIO_ReadPin+0x6>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Read_val ;
		if(PinNum >= PORTA_STARTING_PIN_NUM  && PinNum <= PORTA_ENDING_PIN_NUM){
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	88 30       	cpi	r24, 0x08	; 8
    1812:	e0 f4       	brcc	.+56     	; 0x184c <DIO_ReadPin+0x4a>
				Read_val =  Get_Bit(PIN_A,PinNum);
    1814:	89 e3       	ldi	r24, 0x39	; 57
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	fc 01       	movw	r30, r24
    181a:	80 81       	ld	r24, Z
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	48 2f       	mov	r20, r24
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_ReadPin+0x2e>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	4a 95       	dec	r20
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_ReadPin+0x2a>
    1834:	82 23       	and	r24, r18
    1836:	93 23       	and	r25, r19
    1838:	2a 81       	ldd	r18, Y+2	; 0x02
    183a:	22 2f       	mov	r18, r18
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_ReadPin+0x42>
    1840:	95 95       	asr	r25
    1842:	87 95       	ror	r24
    1844:	2a 95       	dec	r18
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_ReadPin+0x3e>
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	74 c0       	rjmp	.+232    	; 0x1934 <DIO_ReadPin+0x132>
			}else if(PinNum >= PORTB_STARTING_PIN_NUM && PinNum <= PORTB_ENDING_PIN_NUM){
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	88 30       	cpi	r24, 0x08	; 8
    1850:	20 f1       	brcs	.+72     	; 0x189a <DIO_ReadPin+0x98>
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	80 31       	cpi	r24, 0x10	; 16
    1856:	08 f5       	brcc	.+66     	; 0x189a <DIO_ReadPin+0x98>
				Read_val = Get_Bit(PIN_B,(PinNum - PORTB_STARTING_PIN_NUM));
    1858:	86 e3       	ldi	r24, 0x36	; 54
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	fc 01       	movw	r30, r24
    185e:	80 81       	ld	r24, Z
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	ac 01       	movw	r20, r24
    186c:	48 50       	subi	r20, 0x08	; 8
    186e:	51 09       	sbc	r21, r1
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_ReadPin+0x78>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	4a 95       	dec	r20
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_ReadPin+0x74>
    187e:	82 23       	and	r24, r18
    1880:	93 23       	and	r25, r19
    1882:	2a 81       	ldd	r18, Y+2	; 0x02
    1884:	22 2f       	mov	r18, r18
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	28 50       	subi	r18, 0x08	; 8
    188a:	31 09       	sbc	r19, r1
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <DIO_ReadPin+0x90>
    188e:	95 95       	asr	r25
    1890:	87 95       	ror	r24
    1892:	2a 95       	dec	r18
    1894:	e2 f7       	brpl	.-8      	; 0x188e <DIO_ReadPin+0x8c>
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	4d c0       	rjmp	.+154    	; 0x1934 <DIO_ReadPin+0x132>
			}else if(PinNum >= PORTC_STARTING_PIN_NUM && PinNum <= PORTC_ENDING_PIN_NUM){
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	80 31       	cpi	r24, 0x10	; 16
    189e:	20 f1       	brcs	.+72     	; 0x18e8 <DIO_ReadPin+0xe6>
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 31       	cpi	r24, 0x18	; 24
    18a4:	08 f5       	brcc	.+66     	; 0x18e8 <DIO_ReadPin+0xe6>
				Read_val = Get_Bit(PIN_C,(PinNum - PORTC_STARTING_PIN_NUM));
    18a6:	83 e3       	ldi	r24, 0x33	; 51
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	ac 01       	movw	r20, r24
    18ba:	40 51       	subi	r20, 0x10	; 16
    18bc:	51 09       	sbc	r21, r1
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_ReadPin+0xc6>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	4a 95       	dec	r20
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_ReadPin+0xc2>
    18cc:	82 23       	and	r24, r18
    18ce:	93 23       	and	r25, r19
    18d0:	2a 81       	ldd	r18, Y+2	; 0x02
    18d2:	22 2f       	mov	r18, r18
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	20 51       	subi	r18, 0x10	; 16
    18d8:	31 09       	sbc	r19, r1
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_ReadPin+0xde>
    18dc:	95 95       	asr	r25
    18de:	87 95       	ror	r24
    18e0:	2a 95       	dec	r18
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_ReadPin+0xda>
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	26 c0       	rjmp	.+76     	; 0x1934 <DIO_ReadPin+0x132>
			}else if(PinNum >= PORTD_STARTING_PIN_NUM && PinNum <= PORTD_ENDING_PIN_NUM){
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 31       	cpi	r24, 0x18	; 24
    18ec:	18 f1       	brcs	.+70     	; 0x1934 <DIO_ReadPin+0x132>
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	80 32       	cpi	r24, 0x20	; 32
    18f2:	00 f5       	brcc	.+64     	; 0x1934 <DIO_ReadPin+0x132>
				Read_val = Get_Bit(PIN_D,(PinNum - PORTD_STARTING_PIN_NUM));
    18f4:	80 e3       	ldi	r24, 0x30	; 48
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	ac 01       	movw	r20, r24
    1908:	48 51       	subi	r20, 0x18	; 24
    190a:	51 09       	sbc	r21, r1
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_ReadPin+0x114>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	4a 95       	dec	r20
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_ReadPin+0x110>
    191a:	82 23       	and	r24, r18
    191c:	93 23       	and	r25, r19
    191e:	2a 81       	ldd	r18, Y+2	; 0x02
    1920:	22 2f       	mov	r18, r18
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	28 51       	subi	r18, 0x18	; 24
    1926:	31 09       	sbc	r19, r1
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_ReadPin+0x12c>
    192a:	95 95       	asr	r25
    192c:	87 95       	ror	r24
    192e:	2a 95       	dec	r18
    1930:	e2 f7       	brpl	.-8      	; 0x192a <DIO_ReadPin+0x128>
    1932:	89 83       	std	Y+1, r24	; 0x01
		 }	
		 return Read_val ;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <LCD_init>:
Function Parameters  : N/A

Function Return      : N/A

*******************************************************************************/
void LCD_init(){
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	2e 97       	sbiw	r28, 0x0e	; 14
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinDirection(CHAR_LCD_RS,OUTPUT);
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <DIO_SetPinDirection>
	DIO_SetPinDirection(CHAR_LCD_RW,OUTPUT);
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <DIO_SetPinDirection>
	DIO_SetPinDirection(CHAR_LCD_E,OUTPUT);
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <DIO_SetPinDirection>
	
	#if(char_lcd_bits_mode == char_LCD_four_bits_mode)
		LCD_sendCommand(char_lcd_four_bits_mode_cmd);
    196c:	88 e2       	ldi	r24, 0x28	; 40
    196e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
		#if(char_lcd_four_bits_pins == char_lcd_four_bits_mode_upper_pins)
			CHAR_LCD_DATA_DDR |= UPPER_FOUR_BITS_HEX ;
    1972:	8a e3       	ldi	r24, 0x3A	; 58
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	2a e3       	ldi	r18, 0x3A	; 58
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	f9 01       	movw	r30, r18
    197c:	20 81       	ld	r18, Z
    197e:	20 6f       	ori	r18, 0xF0	; 240
    1980:	fc 01       	movw	r30, r24
    1982:	20 83       	st	Z, r18
	#else
		#error "YOU MUST DEFINE THE LCD MODE EIGHT OR FOUR BITS "		
	#endif	
	

	LCD_sendCommand(char_lcd_four_bits_mode_cmd);
    1984:	88 e2       	ldi	r24, 0x28	; 40
    1986:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_sendCommand(char_LCD_dsiplay_on_cursor_blink_cmd);
    198a:	8e e0       	ldi	r24, 0x0E	; 14
    198c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
	LCD_sendCommand(char_LCD_Clear_display_screen_cmd);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>

	LCD_sendCommand(char_lcd_cursor_begin_at_1st_line_cmd);
    1996:	80 e8       	ldi	r24, 0x80	; 128
    1998:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 ea       	ldi	r26, 0xA0	; 160
    19a2:	b0 e4       	ldi	r27, 0x40	; 64
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	ab 83       	std	Y+3, r26	; 0x03
    19aa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a e7       	ldi	r20, 0x7A	; 122
    19b2:	55 e4       	ldi	r21, 0x45	; 69
    19b4:	69 81       	ldd	r22, Y+1	; 0x01
    19b6:	7a 81       	ldd	r23, Y+2	; 0x02
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	af 83       	std	Y+7, r26	; 0x07
    19ca:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	6d 81       	ldd	r22, Y+5	; 0x05
    19d6:	7e 81       	ldd	r23, Y+6	; 0x06
    19d8:	8f 81       	ldd	r24, Y+7	; 0x07
    19da:	98 85       	ldd	r25, Y+8	; 0x08
    19dc:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <LCD_init+0xae>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9a 87       	std	Y+10, r25	; 0x0a
    19ea:	89 87       	std	Y+9, r24	; 0x09
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <LCD_init+0x12c>
	else if (__tmp > 65535)
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	6d 81       	ldd	r22, Y+5	; 0x05
    19f8:	7e 81       	ldd	r23, Y+6	; 0x06
    19fa:	8f 81       	ldd	r24, Y+7	; 0x07
    19fc:	98 85       	ldd	r25, Y+8	; 0x08
    19fe:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <LCD_init+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	69 81       	ldd	r22, Y+1	; 0x01
    1a10:	7a 81       	ldd	r23, Y+2	; 0x02
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9a 87       	std	Y+10, r25	; 0x0a
    1a2c:	89 87       	std	Y+9, r24	; 0x09
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <LCD_init+0x10e>
    1a30:	80 e9       	ldi	r24, 0x90	; 144
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	9c 87       	std	Y+12, r25	; 0x0c
    1a36:	8b 87       	std	Y+11, r24	; 0x0b
    1a38:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_init+0xfc>
    1a40:	9c 87       	std	Y+12, r25	; 0x0c
    1a42:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	9a 87       	std	Y+10, r25	; 0x0a
    1a4c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a52:	89 2b       	or	r24, r25
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <LCD_init+0xf0>
	_delay_ms(FIVE_SECONDS);
}
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <LCD_init+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	6d 81       	ldd	r22, Y+5	; 0x05
    1a5a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5e:	98 85       	ldd	r25, Y+8	; 0x08
    1a60:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9a 87       	std	Y+10, r25	; 0x0a
    1a6a:	89 87       	std	Y+9, r24	; 0x09
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	9e 87       	std	Y+14, r25	; 0x0e
    1a72:	8d 87       	std	Y+13, r24	; 0x0d
    1a74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_init+0x138>
    1a7c:	9e 87       	std	Y+14, r25	; 0x0e
    1a7e:	8d 87       	std	Y+13, r24	; 0x0d
    1a80:	00 00       	nop
    1a82:	2e 96       	adiw	r28, 0x0e	; 14
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <LCD_sendCommand>:

Function Return      : N/A

*******************************************************************************/

void LCD_sendCommand(uint8 command){
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	e9 97       	sbiw	r28, 0x39	; 57
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(CHAR_LCD_RS,LOW);
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
	DIO_WritePin(CHAR_LCD_RW,LOW);
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
	
	
	#if(char_lcd_bits_mode == char_LCD_four_bits_mode)
		#if(char_lcd_four_bits_pins == char_lcd_four_bits_mode_upper_pins)
			CHAR_LCD_DATA_PORT = (CHAR_LCD_DATA_PORT & LOWER_FOUR_BITS_HEX ) | (command & UPPER_FOUR_BITS_HEX);
    1aba:	8b e3       	ldi	r24, 0x3B	; 59
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	2b e3       	ldi	r18, 0x3B	; 59
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	f9 01       	movw	r30, r18
    1ac4:	20 81       	ld	r18, Z
    1ac6:	32 2f       	mov	r19, r18
    1ac8:	3f 70       	andi	r19, 0x0F	; 15
    1aca:	29 ad       	ldd	r18, Y+57	; 0x39
    1acc:	20 7f       	andi	r18, 0xF0	; 240
    1ace:	23 2b       	or	r18, r19
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	20 83       	st	Z, r18
		#elif(char_lcd_four_bits_pins == char_lcd_four_bits_mode_lower_pins)
			CHAR_LCD_DATA_PORT = ((command & UPPER_FOUR_BITS_HEX) >> FOUR_BITS ) | CHAR_LCD_DATA_PORT ;
		#endif
	#endif
	
	DIO_WritePin(CHAR_LCD_E,HIGH);
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
    1ad8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e8       	ldi	r26, 0x80	; 128
    1ae2:	bf e3       	ldi	r27, 0x3F	; 63
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	ab 83       	std	Y+3, r26	; 0x03
    1aea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a e7       	ldi	r20, 0x7A	; 122
    1af2:	55 e4       	ldi	r21, 0x45	; 69
    1af4:	69 81       	ldd	r22, Y+1	; 0x01
    1af6:	7a 81       	ldd	r23, Y+2	; 0x02
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8f a7       	std	Y+47, r24	; 0x2f
    1b06:	98 ab       	std	Y+48, r25	; 0x30
    1b08:	a9 ab       	std	Y+49, r26	; 0x31
    1b0a:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	5f e3       	ldi	r21, 0x3F	; 63
    1b14:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b16:	78 a9       	ldd	r23, Y+48	; 0x30
    1b18:	89 a9       	ldd	r24, Y+49	; 0x31
    1b1a:	9a a9       	ldd	r25, Y+50	; 0x32
    1b1c:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <LCD_sendCommand+0x9a>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9c ab       	std	Y+52, r25	; 0x34
    1b2a:	8b ab       	std	Y+51, r24	; 0x33
    1b2c:	3f c0       	rjmp	.+126    	; 0x1bac <LCD_sendCommand+0x118>
	else if (__tmp > 65535)
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	3f ef       	ldi	r19, 0xFF	; 255
    1b32:	4f e7       	ldi	r20, 0x7F	; 127
    1b34:	57 e4       	ldi	r21, 0x47	; 71
    1b36:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b38:	78 a9       	ldd	r23, Y+48	; 0x30
    1b3a:	89 a9       	ldd	r24, Y+49	; 0x31
    1b3c:	9a a9       	ldd	r25, Y+50	; 0x32
    1b3e:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	4c f5       	brge	.+82     	; 0x1b98 <LCD_sendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e2       	ldi	r20, 0x20	; 32
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	69 81       	ldd	r22, Y+1	; 0x01
    1b50:	7a 81       	ldd	r23, Y+2	; 0x02
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9c ab       	std	Y+52, r25	; 0x34
    1b6c:	8b ab       	std	Y+51, r24	; 0x33
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <LCD_sendCommand+0xfa>
    1b70:	80 e9       	ldi	r24, 0x90	; 144
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	9e ab       	std	Y+54, r25	; 0x36
    1b76:	8d ab       	std	Y+53, r24	; 0x35
    1b78:	8d a9       	ldd	r24, Y+53	; 0x35
    1b7a:	9e a9       	ldd	r25, Y+54	; 0x36
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD_sendCommand+0xe8>
    1b80:	9e ab       	std	Y+54, r25	; 0x36
    1b82:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b84:	8b a9       	ldd	r24, Y+51	; 0x33
    1b86:	9c a9       	ldd	r25, Y+52	; 0x34
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	9c ab       	std	Y+52, r25	; 0x34
    1b8c:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b90:	9c a9       	ldd	r25, Y+52	; 0x34
    1b92:	89 2b       	or	r24, r25
    1b94:	69 f7       	brne	.-38     	; 0x1b70 <LCD_sendCommand+0xdc>
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <LCD_sendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b98:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b9a:	78 a9       	ldd	r23, Y+48	; 0x30
    1b9c:	89 a9       	ldd	r24, Y+49	; 0x31
    1b9e:	9a a9       	ldd	r25, Y+50	; 0x32
    1ba0:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9c ab       	std	Y+52, r25	; 0x34
    1baa:	8b ab       	std	Y+51, r24	; 0x33
    1bac:	8b a9       	ldd	r24, Y+51	; 0x33
    1bae:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb0:	98 af       	std	Y+56, r25	; 0x38
    1bb2:	8f ab       	std	Y+55, r24	; 0x37
    1bb4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <LCD_sendCommand+0x124>
    1bbc:	98 af       	std	Y+56, r25	; 0x38
    1bbe:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(CHAR_LCD_DELAY_TIME);
	
	DIO_WritePin(CHAR_LCD_E,LOW);
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e8       	ldi	r26, 0x80	; 128
    1bce:	bf e3       	ldi	r27, 0x3F	; 63
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	af 83       	std	Y+7, r26	; 0x07
    1bd6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a e7       	ldi	r20, 0x7A	; 122
    1bde:	55 e4       	ldi	r21, 0x45	; 69
    1be0:	6d 81       	ldd	r22, Y+5	; 0x05
    1be2:	7e 81       	ldd	r23, Y+6	; 0x06
    1be4:	8f 81       	ldd	r24, Y+7	; 0x07
    1be6:	98 85       	ldd	r25, Y+8	; 0x08
    1be8:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8d a3       	std	Y+37, r24	; 0x25
    1bf2:	9e a3       	std	Y+38, r25	; 0x26
    1bf4:	af a3       	std	Y+39, r26	; 0x27
    1bf6:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	6d a1       	ldd	r22, Y+37	; 0x25
    1c02:	7e a1       	ldd	r23, Y+38	; 0x26
    1c04:	8f a1       	ldd	r24, Y+39	; 0x27
    1c06:	98 a5       	ldd	r25, Y+40	; 0x28
    1c08:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <LCD_sendCommand+0x186>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9a a7       	std	Y+42, r25	; 0x2a
    1c16:	89 a7       	std	Y+41, r24	; 0x29
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <LCD_sendCommand+0x204>
	else if (__tmp > 65535)
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	6d a1       	ldd	r22, Y+37	; 0x25
    1c24:	7e a1       	ldd	r23, Y+38	; 0x26
    1c26:	8f a1       	ldd	r24, Y+39	; 0x27
    1c28:	98 a5       	ldd	r25, Y+40	; 0x28
    1c2a:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <LCD_sendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c3c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c40:	98 85       	ldd	r25, Y+8	; 0x08
    1c42:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9a a7       	std	Y+42, r25	; 0x2a
    1c58:	89 a7       	std	Y+41, r24	; 0x29
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <LCD_sendCommand+0x1e6>
    1c5c:	80 e9       	ldi	r24, 0x90	; 144
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	9c a7       	std	Y+44, r25	; 0x2c
    1c62:	8b a7       	std	Y+43, r24	; 0x2b
    1c64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c66:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_sendCommand+0x1d4>
    1c6c:	9c a7       	std	Y+44, r25	; 0x2c
    1c6e:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	89 a5       	ldd	r24, Y+41	; 0x29
    1c72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9a a7       	std	Y+42, r25	; 0x2a
    1c78:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7e:	89 2b       	or	r24, r25
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <LCD_sendCommand+0x1c8>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <LCD_sendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	6d a1       	ldd	r22, Y+37	; 0x25
    1c86:	7e a1       	ldd	r23, Y+38	; 0x26
    1c88:	8f a1       	ldd	r24, Y+39	; 0x27
    1c8a:	98 a5       	ldd	r25, Y+40	; 0x28
    1c8c:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9a a7       	std	Y+42, r25	; 0x2a
    1c96:	89 a7       	std	Y+41, r24	; 0x29
    1c98:	89 a5       	ldd	r24, Y+41	; 0x29
    1c9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c9c:	9e a7       	std	Y+46, r25	; 0x2e
    1c9e:	8d a7       	std	Y+45, r24	; 0x2d
    1ca0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ca2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_sendCommand+0x210>
    1ca8:	9e a7       	std	Y+46, r25	; 0x2e
    1caa:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(CHAR_LCD_DELAY_TIME);

	#if(char_lcd_bits_mode == char_LCD_four_bits_mode)
		#if(char_lcd_four_bits_pins == char_lcd_four_bits_mode_upper_pins)
			CHAR_LCD_DATA_PORT = (CHAR_LCD_DATA_PORT & LOWER_FOUR_BITS_HEX ) | (command << FOUR_BITS);
    1cac:	8b e3       	ldi	r24, 0x3B	; 59
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	2b e3       	ldi	r18, 0x3B	; 59
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	f9 01       	movw	r30, r18
    1cb6:	20 81       	ld	r18, Z
    1cb8:	42 2f       	mov	r20, r18
    1cba:	4f 70       	andi	r20, 0x0F	; 15
    1cbc:	29 ad       	ldd	r18, Y+57	; 0x39
    1cbe:	22 2f       	mov	r18, r18
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	22 95       	swap	r18
    1cc4:	32 95       	swap	r19
    1cc6:	30 7f       	andi	r19, 0xF0	; 240
    1cc8:	32 27       	eor	r19, r18
    1cca:	20 7f       	andi	r18, 0xF0	; 240
    1ccc:	32 27       	eor	r19, r18
    1cce:	24 2b       	or	r18, r20
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	20 83       	st	Z, r18
		#endif
		#elif(char_LCD_bits_mode == char_LCD_eight_bits_mode)
			CHAR_LCD_DATA_PORT = command ;
	#endif	

	DIO_WritePin(CHAR_LCD_E,HIGH);
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a0 e8       	ldi	r26, 0x80	; 128
    1ce2:	bf e3       	ldi	r27, 0x3F	; 63
    1ce4:	89 87       	std	Y+9, r24	; 0x09
    1ce6:	9a 87       	std	Y+10, r25	; 0x0a
    1ce8:	ab 87       	std	Y+11, r26	; 0x0b
    1cea:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a e7       	ldi	r20, 0x7A	; 122
    1cf2:	55 e4       	ldi	r21, 0x45	; 69
    1cf4:	69 85       	ldd	r22, Y+9	; 0x09
    1cf6:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cf8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cfa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cfc:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	8b 8f       	std	Y+27, r24	; 0x1b
    1d06:	9c 8f       	std	Y+28, r25	; 0x1c
    1d08:	ad 8f       	std	Y+29, r26	; 0x1d
    1d0a:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d16:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d1c:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    1d20:	88 23       	and	r24, r24
    1d22:	2c f4       	brge	.+10     	; 0x1d2e <LCD_sendCommand+0x29a>
		__ticks = 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	98 a3       	std	Y+32, r25	; 0x20
    1d2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d2c:	3f c0       	rjmp	.+126    	; 0x1dac <LCD_sendCommand+0x318>
	else if (__tmp > 65535)
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	3f ef       	ldi	r19, 0xFF	; 255
    1d32:	4f e7       	ldi	r20, 0x7F	; 127
    1d34:	57 e4       	ldi	r21, 0x47	; 71
    1d36:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d38:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d3e:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	4c f5       	brge	.+82     	; 0x1d98 <LCD_sendCommand+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e2       	ldi	r20, 0x20	; 32
    1d4c:	51 e4       	ldi	r21, 0x41	; 65
    1d4e:	69 85       	ldd	r22, Y+9	; 0x09
    1d50:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d54:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d56:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	98 a3       	std	Y+32, r25	; 0x20
    1d6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <LCD_sendCommand+0x2fa>
    1d70:	80 e9       	ldi	r24, 0x90	; 144
    1d72:	91 e0       	ldi	r25, 0x01	; 1
    1d74:	9a a3       	std	Y+34, r25	; 0x22
    1d76:	89 a3       	std	Y+33, r24	; 0x21
    1d78:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LCD_sendCommand+0x2e8>
    1d80:	9a a3       	std	Y+34, r25	; 0x22
    1d82:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d86:	98 a1       	ldd	r25, Y+32	; 0x20
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	98 a3       	std	Y+32, r25	; 0x20
    1d8c:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d90:	98 a1       	ldd	r25, Y+32	; 0x20
    1d92:	89 2b       	or	r24, r25
    1d94:	69 f7       	brne	.-38     	; 0x1d70 <LCD_sendCommand+0x2dc>
    1d96:	14 c0       	rjmp	.+40     	; 0x1dc0 <LCD_sendCommand+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d98:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d9a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da0:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	98 a3       	std	Y+32, r25	; 0x20
    1daa:	8f 8f       	std	Y+31, r24	; 0x1f
    1dac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dae:	98 a1       	ldd	r25, Y+32	; 0x20
    1db0:	9c a3       	std	Y+36, r25	; 0x24
    1db2:	8b a3       	std	Y+35, r24	; 0x23
    1db4:	8b a1       	ldd	r24, Y+35	; 0x23
    1db6:	9c a1       	ldd	r25, Y+36	; 0x24
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <LCD_sendCommand+0x324>
    1dbc:	9c a3       	std	Y+36, r25	; 0x24
    1dbe:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(CHAR_LCD_DELAY_TIME);
	
	DIO_WritePin(CHAR_LCD_E,LOW);
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a0 e8       	ldi	r26, 0x80	; 128
    1dce:	bf e3       	ldi	r27, 0x3F	; 63
    1dd0:	8d 87       	std	Y+13, r24	; 0x0d
    1dd2:	9e 87       	std	Y+14, r25	; 0x0e
    1dd4:	af 87       	std	Y+15, r26	; 0x0f
    1dd6:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	4a e7       	ldi	r20, 0x7A	; 122
    1dde:	55 e4       	ldi	r21, 0x45	; 69
    1de0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1de2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de6:	98 89       	ldd	r25, Y+16	; 0x10
    1de8:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	89 8b       	std	Y+17, r24	; 0x11
    1df2:	9a 8b       	std	Y+18, r25	; 0x12
    1df4:	ab 8b       	std	Y+19, r26	; 0x13
    1df6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e8       	ldi	r20, 0x80	; 128
    1dfe:	5f e3       	ldi	r21, 0x3F	; 63
    1e00:	69 89       	ldd	r22, Y+17	; 0x11
    1e02:	7a 89       	ldd	r23, Y+18	; 0x12
    1e04:	8b 89       	ldd	r24, Y+19	; 0x13
    1e06:	9c 89       	ldd	r25, Y+20	; 0x14
    1e08:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <LCD_sendCommand+0x386>
		__ticks = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9e 8b       	std	Y+22, r25	; 0x16
    1e16:	8d 8b       	std	Y+21, r24	; 0x15
    1e18:	3f c0       	rjmp	.+126    	; 0x1e98 <LCD_sendCommand+0x404>
	else if (__tmp > 65535)
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	57 e4       	ldi	r21, 0x47	; 71
    1e22:	69 89       	ldd	r22, Y+17	; 0x11
    1e24:	7a 89       	ldd	r23, Y+18	; 0x12
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	4c f5       	brge	.+82     	; 0x1e84 <LCD_sendCommand+0x3f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e2       	ldi	r20, 0x20	; 32
    1e38:	51 e4       	ldi	r21, 0x41	; 65
    1e3a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e3c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e40:	98 89       	ldd	r25, Y+16	; 0x10
    1e42:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9e 8b       	std	Y+22, r25	; 0x16
    1e58:	8d 8b       	std	Y+21, r24	; 0x15
    1e5a:	0f c0       	rjmp	.+30     	; 0x1e7a <LCD_sendCommand+0x3e6>
    1e5c:	80 e9       	ldi	r24, 0x90	; 144
    1e5e:	91 e0       	ldi	r25, 0x01	; 1
    1e60:	98 8f       	std	Y+24, r25	; 0x18
    1e62:	8f 8b       	std	Y+23, r24	; 0x17
    1e64:	8f 89       	ldd	r24, Y+23	; 0x17
    1e66:	98 8d       	ldd	r25, Y+24	; 0x18
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_sendCommand+0x3d4>
    1e6c:	98 8f       	std	Y+24, r25	; 0x18
    1e6e:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e70:	8d 89       	ldd	r24, Y+21	; 0x15
    1e72:	9e 89       	ldd	r25, Y+22	; 0x16
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	9e 8b       	std	Y+22, r25	; 0x16
    1e78:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7a:	8d 89       	ldd	r24, Y+21	; 0x15
    1e7c:	9e 89       	ldd	r25, Y+22	; 0x16
    1e7e:	89 2b       	or	r24, r25
    1e80:	69 f7       	brne	.-38     	; 0x1e5c <LCD_sendCommand+0x3c8>
	_delay_ms(CHAR_LCD_DELAY_TIME);	
	
}
    1e82:	14 c0       	rjmp	.+40     	; 0x1eac <LCD_sendCommand+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e84:	69 89       	ldd	r22, Y+17	; 0x11
    1e86:	7a 89       	ldd	r23, Y+18	; 0x12
    1e88:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8c:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9e 8b       	std	Y+22, r25	; 0x16
    1e96:	8d 8b       	std	Y+21, r24	; 0x15
    1e98:	8d 89       	ldd	r24, Y+21	; 0x15
    1e9a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e9e:	89 8f       	std	Y+25, r24	; 0x19
    1ea0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ea2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_sendCommand+0x410>
    1ea8:	9a 8f       	std	Y+26, r25	; 0x1a
    1eaa:	89 8f       	std	Y+25, r24	; 0x19
    1eac:	00 00       	nop
    1eae:	e9 96       	adiw	r28, 0x39	; 57
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	08 95       	ret

00001ec0 <LCD_displayCharacter>:

Function Return      : N/A

*******************************************************************************/

void LCD_displayCharacter(uint8 character){
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	c5 55       	subi	r28, 0x55	; 85
    1ece:	d1 09       	sbc	r29, r1
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	9e 01       	movw	r18, r28
    1edc:	2b 5a       	subi	r18, 0xAB	; 171
    1ede:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee0:	f9 01       	movw	r30, r18
    1ee2:	80 83       	st	Z, r24
	DIO_WritePin(CHAR_LCD_RS,HIGH);
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
	DIO_WritePin(CHAR_LCD_RW,LOW);
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
	
	#if(char_lcd_bits_mode == char_LCD_four_bits_mode)
		#if(char_lcd_four_bits_pins == char_lcd_four_bits_mode_upper_pins)
	CHAR_LCD_DATA_PORT = (CHAR_LCD_DATA_PORT & LOWER_FOUR_BITS_HEX ) |(character & UPPER_FOUR_BITS_HEX);
    1ef4:	8b e3       	ldi	r24, 0x3B	; 59
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	2b e3       	ldi	r18, 0x3B	; 59
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	f9 01       	movw	r30, r18
    1efe:	20 81       	ld	r18, Z
    1f00:	42 2f       	mov	r20, r18
    1f02:	4f 70       	andi	r20, 0x0F	; 15
    1f04:	9e 01       	movw	r18, r28
    1f06:	2b 5a       	subi	r18, 0xAB	; 171
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	20 81       	ld	r18, Z
    1f0e:	20 7f       	andi	r18, 0xF0	; 240
    1f10:	24 2b       	or	r18, r20
    1f12:	fc 01       	movw	r30, r24
    1f14:	20 83       	st	Z, r18
			CHAR_LCD_DATA_PORT = ((character & UPPER_FOUR_BITS_HEX) >> FOUR_BITS ) | CHAR_LCD_DATA_PORT ;
		#endif
	#endif
		

	DIO_WritePin(CHAR_LCD_E,HIGH);
    1f16:	61 e0       	ldi	r22, 0x01	; 1
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e8       	ldi	r26, 0x80	; 128
    1f24:	bf e3       	ldi	r27, 0x3F	; 63
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	ab 83       	std	Y+3, r26	; 0x03
    1f2c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	8e 01       	movw	r16, r28
    1f30:	05 5b       	subi	r16, 0xB5	; 181
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	55 e4       	ldi	r21, 0x45	; 69
    1f3c:	69 81       	ldd	r22, Y+1	; 0x01
    1f3e:	7a 81       	ldd	r23, Y+2	; 0x02
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	80 83       	st	Z, r24
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	a2 83       	std	Z+2, r26	; 0x02
    1f54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f56:	ce 01       	movw	r24, r28
    1f58:	85 5b       	subi	r24, 0xB5	; 181
    1f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	fc 01       	movw	r30, r24
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	4c f4       	brge	.+18     	; 0x1f88 <LCD_displayCharacter+0xc8>
		__ticks = 1;
    1f76:	ce 01       	movw	r24, r28
    1f78:	81 5b       	subi	r24, 0xB1	; 177
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	21 e0       	ldi	r18, 0x01	; 1
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	fc 01       	movw	r30, r24
    1f82:	31 83       	std	Z+1, r19	; 0x01
    1f84:	20 83       	st	Z, r18
    1f86:	69 c0       	rjmp	.+210    	; 0x205a <LCD_displayCharacter+0x19a>
	else if (__tmp > 65535)
    1f88:	ce 01       	movw	r24, r28
    1f8a:	85 5b       	subi	r24, 0xB5	; 181
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	fc 01       	movw	r30, r24
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	0c f0       	brlt	.+2      	; 0x1faa <LCD_displayCharacter+0xea>
    1fa8:	46 c0       	rjmp	.+140    	; 0x2036 <LCD_displayCharacter+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	69 81       	ldd	r22, Y+1	; 0x01
    1fb4:	7a 81       	ldd	r23, Y+2	; 0x02
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8e 01       	movw	r16, r28
    1fc4:	01 5b       	subi	r16, 0xB1	; 177
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	80 83       	st	Z, r24
    1fda:	24 c0       	rjmp	.+72     	; 0x2024 <LCD_displayCharacter+0x164>
    1fdc:	ce 01       	movw	r24, r28
    1fde:	8f 5a       	subi	r24, 0xAF	; 175
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	20 e9       	ldi	r18, 0x90	; 144
    1fe4:	31 e0       	ldi	r19, 0x01	; 1
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	31 83       	std	Z+1, r19	; 0x01
    1fea:	20 83       	st	Z, r18
    1fec:	ce 01       	movw	r24, r28
    1fee:	8f 5a       	subi	r24, 0xAF	; 175
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_displayCharacter+0x138>
    1ffc:	9e 01       	movw	r18, r28
    1ffe:	2f 5a       	subi	r18, 0xAF	; 175
    2000:	3f 4f       	sbci	r19, 0xFF	; 255
    2002:	f9 01       	movw	r30, r18
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	ce 01       	movw	r24, r28
    200a:	81 5b       	subi	r24, 0xB1	; 177
    200c:	9f 4f       	sbci	r25, 0xFF	; 255
    200e:	9e 01       	movw	r18, r28
    2010:	21 5b       	subi	r18, 0xB1	; 177
    2012:	3f 4f       	sbci	r19, 0xFF	; 255
    2014:	f9 01       	movw	r30, r18
    2016:	20 81       	ld	r18, Z
    2018:	31 81       	ldd	r19, Z+1	; 0x01
    201a:	21 50       	subi	r18, 0x01	; 1
    201c:	31 09       	sbc	r19, r1
    201e:	fc 01       	movw	r30, r24
    2020:	31 83       	std	Z+1, r19	; 0x01
    2022:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2024:	ce 01       	movw	r24, r28
    2026:	81 5b       	subi	r24, 0xB1	; 177
    2028:	9f 4f       	sbci	r25, 0xFF	; 255
    202a:	fc 01       	movw	r30, r24
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	89 2b       	or	r24, r25
    2032:	a1 f6       	brne	.-88     	; 0x1fdc <LCD_displayCharacter+0x11c>
    2034:	2c c0       	rjmp	.+88     	; 0x208e <LCD_displayCharacter+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	8e 01       	movw	r16, r28
    2038:	01 5b       	subi	r16, 0xB1	; 177
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	ce 01       	movw	r24, r28
    203e:	85 5b       	subi	r24, 0xB5	; 181
    2040:	9f 4f       	sbci	r25, 0xFF	; 255
    2042:	fc 01       	movw	r30, r24
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	f8 01       	movw	r30, r16
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
    205a:	ce 01       	movw	r24, r28
    205c:	8d 5a       	subi	r24, 0xAD	; 173
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	9e 01       	movw	r18, r28
    2062:	21 5b       	subi	r18, 0xB1	; 177
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	f9 01       	movw	r30, r18
    2068:	20 81       	ld	r18, Z
    206a:	31 81       	ldd	r19, Z+1	; 0x01
    206c:	fc 01       	movw	r30, r24
    206e:	31 83       	std	Z+1, r19	; 0x01
    2070:	20 83       	st	Z, r18
    2072:	ce 01       	movw	r24, r28
    2074:	8d 5a       	subi	r24, 0xAD	; 173
    2076:	9f 4f       	sbci	r25, 0xFF	; 255
    2078:	fc 01       	movw	r30, r24
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_displayCharacter+0x1be>
    2082:	9e 01       	movw	r18, r28
    2084:	2d 5a       	subi	r18, 0xAD	; 173
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	f9 01       	movw	r30, r18
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf e3       	ldi	r27, 0x3F	; 63
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	af 83       	std	Y+7, r26	; 0x07
    209c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    209e:	8e 01       	movw	r16, r28
    20a0:	0f 5b       	subi	r16, 0xBF	; 191
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a e7       	ldi	r20, 0x7A	; 122
    20aa:	55 e4       	ldi	r21, 0x45	; 69
    20ac:	6d 81       	ldd	r22, Y+5	; 0x05
    20ae:	7e 81       	ldd	r23, Y+6	; 0x06
    20b0:	8f 81       	ldd	r24, Y+7	; 0x07
    20b2:	98 85       	ldd	r25, Y+8	; 0x08
    20b4:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	f8 01       	movw	r30, r16
    20be:	80 83       	st	Z, r24
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	a2 83       	std	Z+2, r26	; 0x02
    20c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c6:	ce 01       	movw	r24, r28
    20c8:	8f 5b       	subi	r24, 0xBF	; 191
    20ca:	9f 4f       	sbci	r25, 0xFF	; 255
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	fc 01       	movw	r30, r24
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	4c f4       	brge	.+18     	; 0x20f8 <LCD_displayCharacter+0x238>
		__ticks = 1;
    20e6:	ce 01       	movw	r24, r28
    20e8:	8b 5b       	subi	r24, 0xBB	; 187
    20ea:	9f 4f       	sbci	r25, 0xFF	; 255
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	fc 01       	movw	r30, r24
    20f2:	31 83       	std	Z+1, r19	; 0x01
    20f4:	20 83       	st	Z, r18
    20f6:	69 c0       	rjmp	.+210    	; 0x21ca <LCD_displayCharacter+0x30a>
	else if (__tmp > 65535)
    20f8:	ce 01       	movw	r24, r28
    20fa:	8f 5b       	subi	r24, 0xBF	; 191
    20fc:	9f 4f       	sbci	r25, 0xFF	; 255
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	fc 01       	movw	r30, r24
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    2114:	18 16       	cp	r1, r24
    2116:	0c f0       	brlt	.+2      	; 0x211a <LCD_displayCharacter+0x25a>
    2118:	46 c0       	rjmp	.+140    	; 0x21a6 <LCD_displayCharacter+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	6d 81       	ldd	r22, Y+5	; 0x05
    2124:	7e 81       	ldd	r23, Y+6	; 0x06
    2126:	8f 81       	ldd	r24, Y+7	; 0x07
    2128:	98 85       	ldd	r25, Y+8	; 0x08
    212a:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8e 01       	movw	r16, r28
    2134:	0b 5b       	subi	r16, 0xBB	; 187
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	f8 01       	movw	r30, r16
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
    214a:	24 c0       	rjmp	.+72     	; 0x2194 <LCD_displayCharacter+0x2d4>
    214c:	ce 01       	movw	r24, r28
    214e:	89 5b       	subi	r24, 0xB9	; 185
    2150:	9f 4f       	sbci	r25, 0xFF	; 255
    2152:	20 e9       	ldi	r18, 0x90	; 144
    2154:	31 e0       	ldi	r19, 0x01	; 1
    2156:	fc 01       	movw	r30, r24
    2158:	31 83       	std	Z+1, r19	; 0x01
    215a:	20 83       	st	Z, r18
    215c:	ce 01       	movw	r24, r28
    215e:	89 5b       	subi	r24, 0xB9	; 185
    2160:	9f 4f       	sbci	r25, 0xFF	; 255
    2162:	fc 01       	movw	r30, r24
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_displayCharacter+0x2a8>
    216c:	9e 01       	movw	r18, r28
    216e:	29 5b       	subi	r18, 0xB9	; 185
    2170:	3f 4f       	sbci	r19, 0xFF	; 255
    2172:	f9 01       	movw	r30, r18
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	ce 01       	movw	r24, r28
    217a:	8b 5b       	subi	r24, 0xBB	; 187
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	9e 01       	movw	r18, r28
    2180:	2b 5b       	subi	r18, 0xBB	; 187
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
    2184:	f9 01       	movw	r30, r18
    2186:	20 81       	ld	r18, Z
    2188:	31 81       	ldd	r19, Z+1	; 0x01
    218a:	21 50       	subi	r18, 0x01	; 1
    218c:	31 09       	sbc	r19, r1
    218e:	fc 01       	movw	r30, r24
    2190:	31 83       	std	Z+1, r19	; 0x01
    2192:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	ce 01       	movw	r24, r28
    2196:	8b 5b       	subi	r24, 0xBB	; 187
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	fc 01       	movw	r30, r24
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	89 2b       	or	r24, r25
    21a2:	a1 f6       	brne	.-88     	; 0x214c <LCD_displayCharacter+0x28c>
    21a4:	2c c0       	rjmp	.+88     	; 0x21fe <LCD_displayCharacter+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	8e 01       	movw	r16, r28
    21a8:	0b 5b       	subi	r16, 0xBB	; 187
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
    21ac:	ce 01       	movw	r24, r28
    21ae:	8f 5b       	subi	r24, 0xBF	; 191
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	fc 01       	movw	r30, r24
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	f8 01       	movw	r30, r16
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
    21ca:	ce 01       	movw	r24, r28
    21cc:	87 5b       	subi	r24, 0xB7	; 183
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	9e 01       	movw	r18, r28
    21d2:	2b 5b       	subi	r18, 0xBB	; 187
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	f9 01       	movw	r30, r18
    21d8:	20 81       	ld	r18, Z
    21da:	31 81       	ldd	r19, Z+1	; 0x01
    21dc:	fc 01       	movw	r30, r24
    21de:	31 83       	std	Z+1, r19	; 0x01
    21e0:	20 83       	st	Z, r18
    21e2:	ce 01       	movw	r24, r28
    21e4:	87 5b       	subi	r24, 0xB7	; 183
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	fc 01       	movw	r30, r24
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_displayCharacter+0x32e>
    21f2:	9e 01       	movw	r18, r28
    21f4:	27 5b       	subi	r18, 0xB7	; 183
    21f6:	3f 4f       	sbci	r19, 0xFF	; 255
    21f8:	f9 01       	movw	r30, r18
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	80 83       	st	Z, r24
	_delay_ms(CHAR_LCD_DELAY_TIME);
	
	_delay_ms(CHAR_LCD_DELAY_TIME);
	DIO_WritePin(CHAR_LCD_E,LOW);
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	83 e0       	ldi	r24, 0x03	; 3
    2202:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e8       	ldi	r26, 0x80	; 128
    220c:	bf e3       	ldi	r27, 0x3F	; 63
    220e:	89 87       	std	Y+9, r24	; 0x09
    2210:	9a 87       	std	Y+10, r25	; 0x0a
    2212:	ab 87       	std	Y+11, r26	; 0x0b
    2214:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	55 e4       	ldi	r21, 0x45	; 69
    221e:	69 85       	ldd	r22, Y+9	; 0x09
    2220:	7a 85       	ldd	r23, Y+10	; 0x0a
    2222:	8b 85       	ldd	r24, Y+11	; 0x0b
    2224:	9c 85       	ldd	r25, Y+12	; 0x0c
    2226:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	8f ab       	std	Y+55, r24	; 0x37
    2230:	98 af       	std	Y+56, r25	; 0x38
    2232:	a9 af       	std	Y+57, r26	; 0x39
    2234:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	6f a9       	ldd	r22, Y+55	; 0x37
    2240:	78 ad       	ldd	r23, Y+56	; 0x38
    2242:	89 ad       	ldd	r24, Y+57	; 0x39
    2244:	9a ad       	ldd	r25, Y+58	; 0x3a
    2246:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    224a:	88 23       	and	r24, r24
    224c:	2c f4       	brge	.+10     	; 0x2258 <LCD_displayCharacter+0x398>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9c af       	std	Y+60, r25	; 0x3c
    2254:	8b af       	std	Y+59, r24	; 0x3b
    2256:	3f c0       	rjmp	.+126    	; 0x22d6 <LCD_displayCharacter+0x416>
	else if (__tmp > 65535)
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	6f a9       	ldd	r22, Y+55	; 0x37
    2262:	78 ad       	ldd	r23, Y+56	; 0x38
    2264:	89 ad       	ldd	r24, Y+57	; 0x39
    2266:	9a ad       	ldd	r25, Y+58	; 0x3a
    2268:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    226c:	18 16       	cp	r1, r24
    226e:	4c f5       	brge	.+82     	; 0x22c2 <LCD_displayCharacter+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	69 85       	ldd	r22, Y+9	; 0x09
    227a:	7a 85       	ldd	r23, Y+10	; 0x0a
    227c:	8b 85       	ldd	r24, Y+11	; 0x0b
    227e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2280:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9c af       	std	Y+60, r25	; 0x3c
    2296:	8b af       	std	Y+59, r24	; 0x3b
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <LCD_displayCharacter+0x3f8>
    229a:	80 e9       	ldi	r24, 0x90	; 144
    229c:	91 e0       	ldi	r25, 0x01	; 1
    229e:	9e af       	std	Y+62, r25	; 0x3e
    22a0:	8d af       	std	Y+61, r24	; 0x3d
    22a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    22a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <LCD_displayCharacter+0x3e6>
    22aa:	9e af       	std	Y+62, r25	; 0x3e
    22ac:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    22b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	9c af       	std	Y+60, r25	; 0x3c
    22b6:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    22ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    22bc:	89 2b       	or	r24, r25
    22be:	69 f7       	brne	.-38     	; 0x229a <LCD_displayCharacter+0x3da>
    22c0:	1e c0       	rjmp	.+60     	; 0x22fe <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	6f a9       	ldd	r22, Y+55	; 0x37
    22c4:	78 ad       	ldd	r23, Y+56	; 0x38
    22c6:	89 ad       	ldd	r24, Y+57	; 0x39
    22c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    22ca:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9c af       	std	Y+60, r25	; 0x3c
    22d4:	8b af       	std	Y+59, r24	; 0x3b
    22d6:	2b ad       	ldd	r18, Y+59	; 0x3b
    22d8:	3c ad       	ldd	r19, Y+60	; 0x3c
    22da:	ce 01       	movw	r24, r28
    22dc:	cf 96       	adiw	r24, 0x3f	; 63
    22de:	fc 01       	movw	r30, r24
    22e0:	31 83       	std	Z+1, r19	; 0x01
    22e2:	20 83       	st	Z, r18
    22e4:	ce 01       	movw	r24, r28
    22e6:	cf 96       	adiw	r24, 0x3f	; 63
    22e8:	fc 01       	movw	r30, r24
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_displayCharacter+0x42e>
    22f2:	9e 01       	movw	r18, r28
    22f4:	21 5c       	subi	r18, 0xC1	; 193
    22f6:	3f 4f       	sbci	r19, 0xFF	; 255
    22f8:	f9 01       	movw	r30, r18
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	80 83       	st	Z, r24
	_delay_ms(CHAR_LCD_DELAY_TIME);
	
	#if(char_lcd_bits_mode == char_LCD_four_bits_mode)
		#if(char_lcd_four_bits_pins == char_lcd_four_bits_mode_upper_pins)
			CHAR_LCD_DATA_PORT = (CHAR_LCD_DATA_PORT & LOWER_FOUR_BITS_HEX ) |(character << FOUR_BITS);
    22fe:	8b e3       	ldi	r24, 0x3B	; 59
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	2b e3       	ldi	r18, 0x3B	; 59
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	f9 01       	movw	r30, r18
    2308:	20 81       	ld	r18, Z
    230a:	42 2f       	mov	r20, r18
    230c:	4f 70       	andi	r20, 0x0F	; 15
    230e:	9e 01       	movw	r18, r28
    2310:	2b 5a       	subi	r18, 0xAB	; 171
    2312:	3f 4f       	sbci	r19, 0xFF	; 255
    2314:	f9 01       	movw	r30, r18
    2316:	20 81       	ld	r18, Z
    2318:	22 2f       	mov	r18, r18
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	22 95       	swap	r18
    231e:	32 95       	swap	r19
    2320:	30 7f       	andi	r19, 0xF0	; 240
    2322:	32 27       	eor	r19, r18
    2324:	20 7f       	andi	r18, 0xF0	; 240
    2326:	32 27       	eor	r19, r18
    2328:	24 2b       	or	r18, r20
    232a:	fc 01       	movw	r30, r24
    232c:	20 83       	st	Z, r18
		#elif(char_LCD_bits_mode == char_LCD_eight_bits_mode)
			CHAR_LCD_DATA_PORT = character ;
	#endif
		

	DIO_WritePin(CHAR_LCD_E,HIGH);
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a0 e8       	ldi	r26, 0x80	; 128
    233c:	bf e3       	ldi	r27, 0x3F	; 63
    233e:	8d 87       	std	Y+13, r24	; 0x0d
    2340:	9e 87       	std	Y+14, r25	; 0x0e
    2342:	af 87       	std	Y+15, r26	; 0x0f
    2344:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	4a e7       	ldi	r20, 0x7A	; 122
    234c:	55 e4       	ldi	r21, 0x45	; 69
    234e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2350:	7e 85       	ldd	r23, Y+14	; 0x0e
    2352:	8f 85       	ldd	r24, Y+15	; 0x0f
    2354:	98 89       	ldd	r25, Y+16	; 0x10
    2356:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	8d a7       	std	Y+45, r24	; 0x2d
    2360:	9e a7       	std	Y+46, r25	; 0x2e
    2362:	af a7       	std	Y+47, r26	; 0x2f
    2364:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2370:	7e a5       	ldd	r23, Y+46	; 0x2e
    2372:	8f a5       	ldd	r24, Y+47	; 0x2f
    2374:	98 a9       	ldd	r25, Y+48	; 0x30
    2376:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    237a:	88 23       	and	r24, r24
    237c:	2c f4       	brge	.+10     	; 0x2388 <LCD_displayCharacter+0x4c8>
		__ticks = 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9a ab       	std	Y+50, r25	; 0x32
    2384:	89 ab       	std	Y+49, r24	; 0x31
    2386:	3f c0       	rjmp	.+126    	; 0x2406 <LCD_displayCharacter+0x546>
	else if (__tmp > 65535)
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	6d a5       	ldd	r22, Y+45	; 0x2d
    2392:	7e a5       	ldd	r23, Y+46	; 0x2e
    2394:	8f a5       	ldd	r24, Y+47	; 0x2f
    2396:	98 a9       	ldd	r25, Y+48	; 0x30
    2398:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    239c:	18 16       	cp	r1, r24
    239e:	4c f5       	brge	.+82     	; 0x23f2 <LCD_displayCharacter+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    23aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    23ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ae:	98 89       	ldd	r25, Y+16	; 0x10
    23b0:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9a ab       	std	Y+50, r25	; 0x32
    23c6:	89 ab       	std	Y+49, r24	; 0x31
    23c8:	0f c0       	rjmp	.+30     	; 0x23e8 <LCD_displayCharacter+0x528>
    23ca:	80 e9       	ldi	r24, 0x90	; 144
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	9c ab       	std	Y+52, r25	; 0x34
    23d0:	8b ab       	std	Y+51, r24	; 0x33
    23d2:	8b a9       	ldd	r24, Y+51	; 0x33
    23d4:	9c a9       	ldd	r25, Y+52	; 0x34
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <LCD_displayCharacter+0x516>
    23da:	9c ab       	std	Y+52, r25	; 0x34
    23dc:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	89 a9       	ldd	r24, Y+49	; 0x31
    23e0:	9a a9       	ldd	r25, Y+50	; 0x32
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	9a ab       	std	Y+50, r25	; 0x32
    23e6:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e8:	89 a9       	ldd	r24, Y+49	; 0x31
    23ea:	9a a9       	ldd	r25, Y+50	; 0x32
    23ec:	89 2b       	or	r24, r25
    23ee:	69 f7       	brne	.-38     	; 0x23ca <LCD_displayCharacter+0x50a>
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <LCD_displayCharacter+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    23f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    23f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f8:	98 a9       	ldd	r25, Y+48	; 0x30
    23fa:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9a ab       	std	Y+50, r25	; 0x32
    2404:	89 ab       	std	Y+49, r24	; 0x31
    2406:	89 a9       	ldd	r24, Y+49	; 0x31
    2408:	9a a9       	ldd	r25, Y+50	; 0x32
    240a:	9e ab       	std	Y+54, r25	; 0x36
    240c:	8d ab       	std	Y+53, r24	; 0x35
    240e:	8d a9       	ldd	r24, Y+53	; 0x35
    2410:	9e a9       	ldd	r25, Y+54	; 0x36
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <LCD_displayCharacter+0x552>
    2416:	9e ab       	std	Y+54, r25	; 0x36
    2418:	8d ab       	std	Y+53, r24	; 0x35
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e8       	ldi	r26, 0x80	; 128
    2420:	bf e3       	ldi	r27, 0x3F	; 63
    2422:	89 8b       	std	Y+17, r24	; 0x11
    2424:	9a 8b       	std	Y+18, r25	; 0x12
    2426:	ab 8b       	std	Y+19, r26	; 0x13
    2428:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a e7       	ldi	r20, 0x7A	; 122
    2430:	55 e4       	ldi	r21, 0x45	; 69
    2432:	69 89       	ldd	r22, Y+17	; 0x11
    2434:	7a 89       	ldd	r23, Y+18	; 0x12
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8b a3       	std	Y+35, r24	; 0x23
    2444:	9c a3       	std	Y+36, r25	; 0x24
    2446:	ad a3       	std	Y+37, r26	; 0x25
    2448:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	6b a1       	ldd	r22, Y+35	; 0x23
    2454:	7c a1       	ldd	r23, Y+36	; 0x24
    2456:	8d a1       	ldd	r24, Y+37	; 0x25
    2458:	9e a1       	ldd	r25, Y+38	; 0x26
    245a:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_displayCharacter+0x5ac>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	98 a7       	std	Y+40, r25	; 0x28
    2468:	8f a3       	std	Y+39, r24	; 0x27
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <LCD_displayCharacter+0x62a>
	else if (__tmp > 65535)
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	6b a1       	ldd	r22, Y+35	; 0x23
    2476:	7c a1       	ldd	r23, Y+36	; 0x24
    2478:	8d a1       	ldd	r24, Y+37	; 0x25
    247a:	9e a1       	ldd	r25, Y+38	; 0x26
    247c:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <LCD_displayCharacter+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	69 89       	ldd	r22, Y+17	; 0x11
    248e:	7a 89       	ldd	r23, Y+18	; 0x12
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	98 a7       	std	Y+40, r25	; 0x28
    24aa:	8f a3       	std	Y+39, r24	; 0x27
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <LCD_displayCharacter+0x60c>
    24ae:	80 e9       	ldi	r24, 0x90	; 144
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	9a a7       	std	Y+42, r25	; 0x2a
    24b4:	89 a7       	std	Y+41, r24	; 0x29
    24b6:	89 a5       	ldd	r24, Y+41	; 0x29
    24b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_displayCharacter+0x5fa>
    24be:	9a a7       	std	Y+42, r25	; 0x2a
    24c0:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	8f a1       	ldd	r24, Y+39	; 0x27
    24c4:	98 a5       	ldd	r25, Y+40	; 0x28
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	98 a7       	std	Y+40, r25	; 0x28
    24ca:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	8f a1       	ldd	r24, Y+39	; 0x27
    24ce:	98 a5       	ldd	r25, Y+40	; 0x28
    24d0:	89 2b       	or	r24, r25
    24d2:	69 f7       	brne	.-38     	; 0x24ae <LCD_displayCharacter+0x5ee>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <LCD_displayCharacter+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	6b a1       	ldd	r22, Y+35	; 0x23
    24d8:	7c a1       	ldd	r23, Y+36	; 0x24
    24da:	8d a1       	ldd	r24, Y+37	; 0x25
    24dc:	9e a1       	ldd	r25, Y+38	; 0x26
    24de:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	98 a7       	std	Y+40, r25	; 0x28
    24e8:	8f a3       	std	Y+39, r24	; 0x27
    24ea:	8f a1       	ldd	r24, Y+39	; 0x27
    24ec:	98 a5       	ldd	r25, Y+40	; 0x28
    24ee:	9c a7       	std	Y+44, r25	; 0x2c
    24f0:	8b a7       	std	Y+43, r24	; 0x2b
    24f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <LCD_displayCharacter+0x636>
    24fa:	9c a7       	std	Y+44, r25	; 0x2c
    24fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(CHAR_LCD_DELAY_TIME);
	
	_delay_ms(CHAR_LCD_DELAY_TIME);
	DIO_WritePin(CHAR_LCD_E,LOW);
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_WritePin>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e8       	ldi	r26, 0x80	; 128
    250c:	bf e3       	ldi	r27, 0x3F	; 63
    250e:	8d 8b       	std	Y+21, r24	; 0x15
    2510:	9e 8b       	std	Y+22, r25	; 0x16
    2512:	af 8b       	std	Y+23, r26	; 0x17
    2514:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a e7       	ldi	r20, 0x7A	; 122
    251c:	55 e4       	ldi	r21, 0x45	; 69
    251e:	6d 89       	ldd	r22, Y+21	; 0x15
    2520:	7e 89       	ldd	r23, Y+22	; 0x16
    2522:	8f 89       	ldd	r24, Y+23	; 0x17
    2524:	98 8d       	ldd	r25, Y+24	; 0x18
    2526:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	89 8f       	std	Y+25, r24	; 0x19
    2530:	9a 8f       	std	Y+26, r25	; 0x1a
    2532:	ab 8f       	std	Y+27, r26	; 0x1b
    2534:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e8       	ldi	r20, 0x80	; 128
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	69 8d       	ldd	r22, Y+25	; 0x19
    2540:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2542:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2544:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2546:	0e 94 84 13 	call	0x2708	; 0x2708 <__cmpsf2>
    254a:	88 23       	and	r24, r24
    254c:	2c f4       	brge	.+10     	; 0x2558 <LCD_displayCharacter+0x698>
		__ticks = 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9e 8f       	std	Y+30, r25	; 0x1e
    2554:	8d 8f       	std	Y+29, r24	; 0x1d
    2556:	3f c0       	rjmp	.+126    	; 0x25d6 <LCD_displayCharacter+0x716>
	else if (__tmp > 65535)
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	4f e7       	ldi	r20, 0x7F	; 127
    255e:	57 e4       	ldi	r21, 0x47	; 71
    2560:	69 8d       	ldd	r22, Y+25	; 0x19
    2562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2568:	0e 94 05 14 	call	0x280a	; 0x280a <__gesf2>
    256c:	18 16       	cp	r1, r24
    256e:	4c f5       	brge	.+82     	; 0x25c2 <LCD_displayCharacter+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	6d 89       	ldd	r22, Y+21	; 0x15
    257a:	7e 89       	ldd	r23, Y+22	; 0x16
    257c:	8f 89       	ldd	r24, Y+23	; 0x17
    257e:	98 8d       	ldd	r25, Y+24	; 0x18
    2580:	0e 94 0a 14 	call	0x2814	; 0x2814 <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 8f       	std	Y+30, r25	; 0x1e
    2596:	8d 8f       	std	Y+29, r24	; 0x1d
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <LCD_displayCharacter+0x6f8>
    259a:	80 e9       	ldi	r24, 0x90	; 144
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	98 a3       	std	Y+32, r25	; 0x20
    25a0:	8f 8f       	std	Y+31, r24	; 0x1f
    25a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25a4:	98 a1       	ldd	r25, Y+32	; 0x20
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_displayCharacter+0x6e6>
    25aa:	98 a3       	std	Y+32, r25	; 0x20
    25ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9e 8f       	std	Y+30, r25	; 0x1e
    25b6:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25bc:	89 2b       	or	r24, r25
    25be:	69 f7       	brne	.-38     	; 0x259a <LCD_displayCharacter+0x6da>
	_delay_ms(CHAR_LCD_DELAY_TIME);	
}
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <LCD_displayCharacter+0x72a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c2:	69 8d       	ldd	r22, Y+25	; 0x19
    25c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ca:	0e 94 89 13 	call	0x2712	; 0x2712 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9e 8f       	std	Y+30, r25	; 0x1e
    25d4:	8d 8f       	std	Y+29, r24	; 0x1d
    25d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25da:	9a a3       	std	Y+34, r25	; 0x22
    25dc:	89 a3       	std	Y+33, r24	; 0x21
    25de:	89 a1       	ldd	r24, Y+33	; 0x21
    25e0:	9a a1       	ldd	r25, Y+34	; 0x22
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_displayCharacter+0x722>
    25e6:	9a a3       	std	Y+34, r25	; 0x22
    25e8:	89 a3       	std	Y+33, r24	; 0x21
    25ea:	00 00       	nop
    25ec:	cb 5a       	subi	r28, 0xAB	; 171
    25ee:	df 4f       	sbci	r29, 0xFF	; 255
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <LCD_display_string>:

Function Return      : N/A

*******************************************************************************/

void LCD_display_string(uint8 *string){
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	00 d0       	rcall	.+0      	; 0x260a <LCD_display_string+0x6>
    260a:	1f 92       	push	r1
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	9b 83       	std	Y+3, r25	; 0x03
    2612:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_u8_char_counter = 0 ;
    2614:	19 82       	std	Y+1, r1	; 0x01
	while(string[local_u8_char_counter] != NULL){
    2616:	0e c0       	rjmp	.+28     	; 0x2634 <LCD_display_string+0x30>
		LCD_displayCharacter(string[local_u8_char_counter]);
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	2a 81       	ldd	r18, Y+2	; 0x02
    2620:	3b 81       	ldd	r19, Y+3	; 0x03
    2622:	82 0f       	add	r24, r18
    2624:	93 1f       	adc	r25, r19
    2626:	fc 01       	movw	r30, r24
    2628:	80 81       	ld	r24, Z
    262a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_displayCharacter>
		local_u8_char_counter++ ;
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	89 83       	std	Y+1, r24	; 0x01

*******************************************************************************/

void LCD_display_string(uint8 *string){
	uint8 local_u8_char_counter = 0 ;
	while(string[local_u8_char_counter] != NULL){
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	2a 81       	ldd	r18, Y+2	; 0x02
    263c:	3b 81       	ldd	r19, Y+3	; 0x03
    263e:	82 0f       	add	r24, r18
    2640:	93 1f       	adc	r25, r19
    2642:	fc 01       	movw	r30, r24
    2644:	80 81       	ld	r24, Z
    2646:	88 23       	and	r24, r24
    2648:	39 f7       	brne	.-50     	; 0x2618 <LCD_display_string+0x14>
		LCD_displayCharacter(string[local_u8_char_counter]);
		local_u8_char_counter++ ;
	}
}
    264a:	00 00       	nop
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <LCD_gotoRowColumn>:
					   col : col wanted to move the cursor to it

Function Return      : N/A

*******************************************************************************/
void LCD_gotoRowColumn(uint8 row,uint8 col){
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	00 d0       	rcall	.+0      	; 0x265e <LCD_gotoRowColumn+0x6>
    265e:	1f 92       	push	r1
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	8a 83       	std	Y+2, r24	; 0x02
    2666:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_u8_char_lcd_address ;
	switch(row){
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	88 2f       	mov	r24, r24
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	19 f0       	breq	.+6      	; 0x2678 <LCD_gotoRowColumn+0x20>
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	21 f0       	breq	.+8      	; 0x267e <LCD_gotoRowColumn+0x26>
		case CHAR_LCD_SECOND_ROW :
				local_u8_char_lcd_address = col + CHAR_LCD_STARTING_ADDRESS ;
		break;
		default:
		
		break;
    2676:	07 c0       	rjmp	.+14     	; 0x2686 <LCD_gotoRowColumn+0x2e>
*******************************************************************************/
void LCD_gotoRowColumn(uint8 row,uint8 col){
	uint8 local_u8_char_lcd_address ;
	switch(row){
		case CHAR_LCD_FIRST_ROW :
				local_u8_char_lcd_address = col ; 
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	89 83       	std	Y+1, r24	; 0x01
		break;
    267c:	04 c0       	rjmp	.+8      	; 0x2686 <LCD_gotoRowColumn+0x2e>
		case CHAR_LCD_SECOND_ROW :
				local_u8_char_lcd_address = col + CHAR_LCD_STARTING_ADDRESS ;
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	80 5c       	subi	r24, 0xC0	; 192
    2682:	89 83       	std	Y+1, r24	; 0x01
		break;
    2684:	00 00       	nop
		default:
		
		break;
	}
	
	LCD_sendCommand(local_u8_char_lcd_address | char_lcd_cursor_begin_at_1st_line_cmd);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	80 68       	ori	r24, 0x80	; 128
    268a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
}
    268e:	00 00       	nop
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	08 95       	ret

0000269c <LCD_sendString_RowCol>:
					   col	  : col wanted to move the cursor to it

Function Return      : N/A

*******************************************************************************/
void LCD_sendString_RowCol(uint8 *string,uint8 row,uint8 col){
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <LCD_sendString_RowCol+0x6>
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <LCD_sendString_RowCol+0x8>
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	6b 83       	std	Y+3, r22	; 0x03
    26ae:	4c 83       	std	Y+4, r20	; 0x04
	LCD_gotoRowColumn(row,col);
    26b0:	6c 81       	ldd	r22, Y+4	; 0x04
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_gotoRowColumn>
	LCD_display_string(string);
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_display_string>
}
    26c0:	00 00       	nop
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <LCD_clear>:

Function Return      : N/A

*******************************************************************************/

void LCD_clear(){
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(char_LCD_Clear_display_screen_cmd);
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_sendCommand>
    26de:	00 00       	nop
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	08 95       	ret

000026e6 <main>:
#include "util/delay.h"
#include "HAL/headers/LCD.h"
#include "APP/Questions/questions.h"

int main(void)
{
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	APP_questions_init();
    26ee:	0e 94 0f 03 	call	0x61e	; 0x61e <APP_questions_init>
	APP_questions_show_welcome_screen();
    26f2:	0e 94 21 03 	call	0x642	; 0x642 <APP_questions_show_welcome_screen>
    while(1) 
    {
		APP_questions_press_any_btn_to_start();
    26f6:	0e 94 22 05 	call	0xa44	; 0xa44 <APP_questions_press_any_btn_to_start>
		APP_questions_questions_stage();
    26fa:	0e 94 4b 06 	call	0xc96	; 0xc96 <APP_questions_questions_stage>
		APP_questions_wait_for_answer();
    26fe:	0e 94 96 06 	call	0xd2c	; 0xd2c <APP_questions_wait_for_answer>
		APP_questions_show_score();
    2702:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <APP_questions_show_score>
		
	}
    2706:	f7 cf       	rjmp	.-18     	; 0x26f6 <main+0x10>

00002708 <__cmpsf2>:
    2708:	0e 94 b8 13 	call	0x2770	; 0x2770 <__fp_cmp>
    270c:	08 f4       	brcc	.+2      	; 0x2710 <__cmpsf2+0x8>
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	08 95       	ret

00002712 <__fixunssfsi>:
    2712:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__fp_splitA>
    2716:	88 f0       	brcs	.+34     	; 0x273a <__fixunssfsi+0x28>
    2718:	9f 57       	subi	r25, 0x7F	; 127
    271a:	98 f0       	brcs	.+38     	; 0x2742 <__fixunssfsi+0x30>
    271c:	b9 2f       	mov	r27, r25
    271e:	99 27       	eor	r25, r25
    2720:	b7 51       	subi	r27, 0x17	; 23
    2722:	b0 f0       	brcs	.+44     	; 0x2750 <__fixunssfsi+0x3e>
    2724:	e1 f0       	breq	.+56     	; 0x275e <__fixunssfsi+0x4c>
    2726:	66 0f       	add	r22, r22
    2728:	77 1f       	adc	r23, r23
    272a:	88 1f       	adc	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	1a f0       	brmi	.+6      	; 0x2736 <__fixunssfsi+0x24>
    2730:	ba 95       	dec	r27
    2732:	c9 f7       	brne	.-14     	; 0x2726 <__fixunssfsi+0x14>
    2734:	14 c0       	rjmp	.+40     	; 0x275e <__fixunssfsi+0x4c>
    2736:	b1 30       	cpi	r27, 0x01	; 1
    2738:	91 f0       	breq	.+36     	; 0x275e <__fixunssfsi+0x4c>
    273a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fp_zero>
    273e:	b1 e0       	ldi	r27, 0x01	; 1
    2740:	08 95       	ret
    2742:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__fp_zero>
    2746:	67 2f       	mov	r22, r23
    2748:	78 2f       	mov	r23, r24
    274a:	88 27       	eor	r24, r24
    274c:	b8 5f       	subi	r27, 0xF8	; 248
    274e:	39 f0       	breq	.+14     	; 0x275e <__fixunssfsi+0x4c>
    2750:	b9 3f       	cpi	r27, 0xF9	; 249
    2752:	cc f3       	brlt	.-14     	; 0x2746 <__fixunssfsi+0x34>
    2754:	86 95       	lsr	r24
    2756:	77 95       	ror	r23
    2758:	67 95       	ror	r22
    275a:	b3 95       	inc	r27
    275c:	d9 f7       	brne	.-10     	; 0x2754 <__fixunssfsi+0x42>
    275e:	3e f4       	brtc	.+14     	; 0x276e <__fixunssfsi+0x5c>
    2760:	90 95       	com	r25
    2762:	80 95       	com	r24
    2764:	70 95       	com	r23
    2766:	61 95       	neg	r22
    2768:	7f 4f       	sbci	r23, 0xFF	; 255
    276a:	8f 4f       	sbci	r24, 0xFF	; 255
    276c:	9f 4f       	sbci	r25, 0xFF	; 255
    276e:	08 95       	ret

00002770 <__fp_cmp>:
    2770:	99 0f       	add	r25, r25
    2772:	00 08       	sbc	r0, r0
    2774:	55 0f       	add	r21, r21
    2776:	aa 0b       	sbc	r26, r26
    2778:	e0 e8       	ldi	r30, 0x80	; 128
    277a:	fe ef       	ldi	r31, 0xFE	; 254
    277c:	16 16       	cp	r1, r22
    277e:	17 06       	cpc	r1, r23
    2780:	e8 07       	cpc	r30, r24
    2782:	f9 07       	cpc	r31, r25
    2784:	c0 f0       	brcs	.+48     	; 0x27b6 <__fp_cmp+0x46>
    2786:	12 16       	cp	r1, r18
    2788:	13 06       	cpc	r1, r19
    278a:	e4 07       	cpc	r30, r20
    278c:	f5 07       	cpc	r31, r21
    278e:	98 f0       	brcs	.+38     	; 0x27b6 <__fp_cmp+0x46>
    2790:	62 1b       	sub	r22, r18
    2792:	73 0b       	sbc	r23, r19
    2794:	84 0b       	sbc	r24, r20
    2796:	95 0b       	sbc	r25, r21
    2798:	39 f4       	brne	.+14     	; 0x27a8 <__fp_cmp+0x38>
    279a:	0a 26       	eor	r0, r26
    279c:	61 f0       	breq	.+24     	; 0x27b6 <__fp_cmp+0x46>
    279e:	23 2b       	or	r18, r19
    27a0:	24 2b       	or	r18, r20
    27a2:	25 2b       	or	r18, r21
    27a4:	21 f4       	brne	.+8      	; 0x27ae <__fp_cmp+0x3e>
    27a6:	08 95       	ret
    27a8:	0a 26       	eor	r0, r26
    27aa:	09 f4       	brne	.+2      	; 0x27ae <__fp_cmp+0x3e>
    27ac:	a1 40       	sbci	r26, 0x01	; 1
    27ae:	a6 95       	lsr	r26
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	81 1d       	adc	r24, r1
    27b4:	81 1d       	adc	r24, r1
    27b6:	08 95       	ret

000027b8 <__fp_split3>:
    27b8:	57 fd       	sbrc	r21, 7
    27ba:	90 58       	subi	r25, 0x80	; 128
    27bc:	44 0f       	add	r20, r20
    27be:	55 1f       	adc	r21, r21
    27c0:	59 f0       	breq	.+22     	; 0x27d8 <__fp_splitA+0x10>
    27c2:	5f 3f       	cpi	r21, 0xFF	; 255
    27c4:	71 f0       	breq	.+28     	; 0x27e2 <__fp_splitA+0x1a>
    27c6:	47 95       	ror	r20

000027c8 <__fp_splitA>:
    27c8:	88 0f       	add	r24, r24
    27ca:	97 fb       	bst	r25, 7
    27cc:	99 1f       	adc	r25, r25
    27ce:	61 f0       	breq	.+24     	; 0x27e8 <__fp_splitA+0x20>
    27d0:	9f 3f       	cpi	r25, 0xFF	; 255
    27d2:	79 f0       	breq	.+30     	; 0x27f2 <__fp_splitA+0x2a>
    27d4:	87 95       	ror	r24
    27d6:	08 95       	ret
    27d8:	12 16       	cp	r1, r18
    27da:	13 06       	cpc	r1, r19
    27dc:	14 06       	cpc	r1, r20
    27de:	55 1f       	adc	r21, r21
    27e0:	f2 cf       	rjmp	.-28     	; 0x27c6 <__fp_split3+0xe>
    27e2:	46 95       	lsr	r20
    27e4:	f1 df       	rcall	.-30     	; 0x27c8 <__fp_splitA>
    27e6:	08 c0       	rjmp	.+16     	; 0x27f8 <__fp_splitA+0x30>
    27e8:	16 16       	cp	r1, r22
    27ea:	17 06       	cpc	r1, r23
    27ec:	18 06       	cpc	r1, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	f1 cf       	rjmp	.-30     	; 0x27d4 <__fp_splitA+0xc>
    27f2:	86 95       	lsr	r24
    27f4:	71 05       	cpc	r23, r1
    27f6:	61 05       	cpc	r22, r1
    27f8:	08 94       	sec
    27fa:	08 95       	ret

000027fc <__fp_zero>:
    27fc:	e8 94       	clt

000027fe <__fp_szero>:
    27fe:	bb 27       	eor	r27, r27
    2800:	66 27       	eor	r22, r22
    2802:	77 27       	eor	r23, r23
    2804:	cb 01       	movw	r24, r22
    2806:	97 f9       	bld	r25, 7
    2808:	08 95       	ret

0000280a <__gesf2>:
    280a:	0e 94 b8 13 	call	0x2770	; 0x2770 <__fp_cmp>
    280e:	08 f4       	brcc	.+2      	; 0x2812 <__gesf2+0x8>
    2810:	8f ef       	ldi	r24, 0xFF	; 255
    2812:	08 95       	ret

00002814 <__mulsf3>:
    2814:	0e 94 1d 14 	call	0x283a	; 0x283a <__mulsf3x>
    2818:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_round>
    281c:	0e 94 80 14 	call	0x2900	; 0x2900 <__fp_pscA>
    2820:	38 f0       	brcs	.+14     	; 0x2830 <__mulsf3+0x1c>
    2822:	0e 94 87 14 	call	0x290e	; 0x290e <__fp_pscB>
    2826:	20 f0       	brcs	.+8      	; 0x2830 <__mulsf3+0x1c>
    2828:	95 23       	and	r25, r21
    282a:	11 f0       	breq	.+4      	; 0x2830 <__mulsf3+0x1c>
    282c:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__fp_inf>
    2830:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__fp_nan>
    2834:	11 24       	eor	r1, r1
    2836:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__fp_szero>

0000283a <__mulsf3x>:
    283a:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__fp_split3>
    283e:	70 f3       	brcs	.-36     	; 0x281c <__mulsf3+0x8>

00002840 <__mulsf3_pse>:
    2840:	95 9f       	mul	r25, r21
    2842:	c1 f3       	breq	.-16     	; 0x2834 <__mulsf3+0x20>
    2844:	95 0f       	add	r25, r21
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	55 1f       	adc	r21, r21
    284a:	62 9f       	mul	r22, r18
    284c:	f0 01       	movw	r30, r0
    284e:	72 9f       	mul	r23, r18
    2850:	bb 27       	eor	r27, r27
    2852:	f0 0d       	add	r31, r0
    2854:	b1 1d       	adc	r27, r1
    2856:	63 9f       	mul	r22, r19
    2858:	aa 27       	eor	r26, r26
    285a:	f0 0d       	add	r31, r0
    285c:	b1 1d       	adc	r27, r1
    285e:	aa 1f       	adc	r26, r26
    2860:	64 9f       	mul	r22, r20
    2862:	66 27       	eor	r22, r22
    2864:	b0 0d       	add	r27, r0
    2866:	a1 1d       	adc	r26, r1
    2868:	66 1f       	adc	r22, r22
    286a:	82 9f       	mul	r24, r18
    286c:	22 27       	eor	r18, r18
    286e:	b0 0d       	add	r27, r0
    2870:	a1 1d       	adc	r26, r1
    2872:	62 1f       	adc	r22, r18
    2874:	73 9f       	mul	r23, r19
    2876:	b0 0d       	add	r27, r0
    2878:	a1 1d       	adc	r26, r1
    287a:	62 1f       	adc	r22, r18
    287c:	83 9f       	mul	r24, r19
    287e:	a0 0d       	add	r26, r0
    2880:	61 1d       	adc	r22, r1
    2882:	22 1f       	adc	r18, r18
    2884:	74 9f       	mul	r23, r20
    2886:	33 27       	eor	r19, r19
    2888:	a0 0d       	add	r26, r0
    288a:	61 1d       	adc	r22, r1
    288c:	23 1f       	adc	r18, r19
    288e:	84 9f       	mul	r24, r20
    2890:	60 0d       	add	r22, r0
    2892:	21 1d       	adc	r18, r1
    2894:	82 2f       	mov	r24, r18
    2896:	76 2f       	mov	r23, r22
    2898:	6a 2f       	mov	r22, r26
    289a:	11 24       	eor	r1, r1
    289c:	9f 57       	subi	r25, 0x7F	; 127
    289e:	50 40       	sbci	r21, 0x00	; 0
    28a0:	9a f0       	brmi	.+38     	; 0x28c8 <__mulsf3_pse+0x88>
    28a2:	f1 f0       	breq	.+60     	; 0x28e0 <__mulsf3_pse+0xa0>
    28a4:	88 23       	and	r24, r24
    28a6:	4a f0       	brmi	.+18     	; 0x28ba <__mulsf3_pse+0x7a>
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	bb 1f       	adc	r27, r27
    28ae:	66 1f       	adc	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	88 1f       	adc	r24, r24
    28b4:	91 50       	subi	r25, 0x01	; 1
    28b6:	50 40       	sbci	r21, 0x00	; 0
    28b8:	a9 f7       	brne	.-22     	; 0x28a4 <__mulsf3_pse+0x64>
    28ba:	9e 3f       	cpi	r25, 0xFE	; 254
    28bc:	51 05       	cpc	r21, r1
    28be:	80 f0       	brcs	.+32     	; 0x28e0 <__mulsf3_pse+0xa0>
    28c0:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__fp_inf>
    28c4:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__fp_szero>
    28c8:	5f 3f       	cpi	r21, 0xFF	; 255
    28ca:	e4 f3       	brlt	.-8      	; 0x28c4 <__mulsf3_pse+0x84>
    28cc:	98 3e       	cpi	r25, 0xE8	; 232
    28ce:	d4 f3       	brlt	.-12     	; 0x28c4 <__mulsf3_pse+0x84>
    28d0:	86 95       	lsr	r24
    28d2:	77 95       	ror	r23
    28d4:	67 95       	ror	r22
    28d6:	b7 95       	ror	r27
    28d8:	f7 95       	ror	r31
    28da:	e7 95       	ror	r30
    28dc:	9f 5f       	subi	r25, 0xFF	; 255
    28de:	c1 f7       	brne	.-16     	; 0x28d0 <__mulsf3_pse+0x90>
    28e0:	fe 2b       	or	r31, r30
    28e2:	88 0f       	add	r24, r24
    28e4:	91 1d       	adc	r25, r1
    28e6:	96 95       	lsr	r25
    28e8:	87 95       	ror	r24
    28ea:	97 f9       	bld	r25, 7
    28ec:	08 95       	ret

000028ee <__fp_inf>:
    28ee:	97 f9       	bld	r25, 7
    28f0:	9f 67       	ori	r25, 0x7F	; 127
    28f2:	80 e8       	ldi	r24, 0x80	; 128
    28f4:	70 e0       	ldi	r23, 0x00	; 0
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	08 95       	ret

000028fa <__fp_nan>:
    28fa:	9f ef       	ldi	r25, 0xFF	; 255
    28fc:	80 ec       	ldi	r24, 0xC0	; 192
    28fe:	08 95       	ret

00002900 <__fp_pscA>:
    2900:	00 24       	eor	r0, r0
    2902:	0a 94       	dec	r0
    2904:	16 16       	cp	r1, r22
    2906:	17 06       	cpc	r1, r23
    2908:	18 06       	cpc	r1, r24
    290a:	09 06       	cpc	r0, r25
    290c:	08 95       	ret

0000290e <__fp_pscB>:
    290e:	00 24       	eor	r0, r0
    2910:	0a 94       	dec	r0
    2912:	12 16       	cp	r1, r18
    2914:	13 06       	cpc	r1, r19
    2916:	14 06       	cpc	r1, r20
    2918:	05 06       	cpc	r0, r21
    291a:	08 95       	ret

0000291c <__fp_round>:
    291c:	09 2e       	mov	r0, r25
    291e:	03 94       	inc	r0
    2920:	00 0c       	add	r0, r0
    2922:	11 f4       	brne	.+4      	; 0x2928 <__fp_round+0xc>
    2924:	88 23       	and	r24, r24
    2926:	52 f0       	brmi	.+20     	; 0x293c <__fp_round+0x20>
    2928:	bb 0f       	add	r27, r27
    292a:	40 f4       	brcc	.+16     	; 0x293c <__fp_round+0x20>
    292c:	bf 2b       	or	r27, r31
    292e:	11 f4       	brne	.+4      	; 0x2934 <__fp_round+0x18>
    2930:	60 ff       	sbrs	r22, 0
    2932:	04 c0       	rjmp	.+8      	; 0x293c <__fp_round+0x20>
    2934:	6f 5f       	subi	r22, 0xFF	; 255
    2936:	7f 4f       	sbci	r23, 0xFF	; 255
    2938:	8f 4f       	sbci	r24, 0xFF	; 255
    293a:	9f 4f       	sbci	r25, 0xFF	; 255
    293c:	08 95       	ret

0000293e <_exit>:
    293e:	f8 94       	cli

00002940 <__stop_program>:
    2940:	ff cf       	rjmp	.-2      	; 0x2940 <__stop_program>
