
KeyPad and SEVEN SEG final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004440  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  00004440  000044b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000459c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000045cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00004608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e6b  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000815  00000000  00000000  00006563  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001936  00000000  00000000  00006d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000086b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053a  00000000  00000000  00008970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000559  00000000  00000000  00008eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00009403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <main>
      7a:	0c 94 1e 22 	jmp	0x443c	; 0x443c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WritePin>:
 *
 * Description: function to set or clear a predefined pin
 *
 *
 ********************************************************************************/
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	00 d0       	rcall	.+0      	; 0x88 <DIO_WritePin+0x6>
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62
      8c:	89 83       	std	Y+1, r24	; 0x01
      8e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue == LOW)
      90:	8a 81       	ldd	r24, Y+2	; 0x02
      92:	88 23       	and	r24, r24
      94:	09 f0       	breq	.+2      	; 0x98 <DIO_WritePin+0x16>
      96:	72 c0       	rjmp	.+228    	; 0x17c <DIO_WritePin+0xfa>
	{
		if (PinNum <= SEVEN_AS_PORT1_MAX)
      98:	89 81       	ldd	r24, Y+1	; 0x01
      9a:	88 30       	cpi	r24, 0x08	; 8
      9c:	b0 f4       	brcc	.+44     	; 0xca <DIO_WritePin+0x48>
		{
			Clear_Bit(PortA,PinNum);		
      9e:	8b e3       	ldi	r24, 0x3B	; 59
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	2b e3       	ldi	r18, 0x3B	; 59
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	f9 01       	movw	r30, r18
      a8:	20 81       	ld	r18, Z
      aa:	62 2f       	mov	r22, r18
      ac:	29 81       	ldd	r18, Y+1	; 0x01
      ae:	42 2f       	mov	r20, r18
      b0:	50 e0       	ldi	r21, 0x00	; 0
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	02 c0       	rjmp	.+4      	; 0xbc <DIO_WritePin+0x3a>
      b8:	22 0f       	add	r18, r18
      ba:	33 1f       	adc	r19, r19
      bc:	4a 95       	dec	r20
      be:	e2 f7       	brpl	.-8      	; 0xb8 <DIO_WritePin+0x36>
      c0:	20 95       	com	r18
      c2:	26 23       	and	r18, r22
      c4:	fc 01       	movw	r30, r24
      c6:	20 83       	st	Z, r18
		}
		else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
			Set_Bit(PortD,(PinNum-PORT3_MAX));
		}
	}
}
      c8:	c9 c0       	rjmp	.+402    	; 0x25c <DIO_WritePin+0x1da>
	{
		if (PinNum <= SEVEN_AS_PORT1_MAX)
		{
			Clear_Bit(PortA,PinNum);		
		}
		else if ((PinNum > SEVEN_AS_PORT1_MAX) && (PinNum <= FIFTEEN_AS_PORT2_MAX) )
      ca:	89 81       	ldd	r24, Y+1	; 0x01
      cc:	88 30       	cpi	r24, 0x08	; 8
      ce:	d0 f0       	brcs	.+52     	; 0x104 <DIO_WritePin+0x82>
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	80 31       	cpi	r24, 0x10	; 16
      d4:	b8 f4       	brcc	.+46     	; 0x104 <DIO_WritePin+0x82>
		{
			Clear_Bit(PortB,(PinNum-PORT1_MAX));
      d6:	88 e3       	ldi	r24, 0x38	; 56
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	28 e3       	ldi	r18, 0x38	; 56
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	62 2f       	mov	r22, r18
      e4:	29 81       	ldd	r18, Y+1	; 0x01
      e6:	28 50       	subi	r18, 0x08	; 8
      e8:	42 2f       	mov	r20, r18
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	21 e0       	ldi	r18, 0x01	; 1
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_WritePin+0x74>
      f2:	22 0f       	add	r18, r18
      f4:	33 1f       	adc	r19, r19
      f6:	4a 95       	dec	r20
      f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_WritePin+0x70>
      fa:	20 95       	com	r18
      fc:	26 23       	and	r18, r22
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
     102:	ac c0       	rjmp	.+344    	; 0x25c <DIO_WritePin+0x1da>
		}
		else if ((PinNum > FIFTEEN_AS_PORT2_MAX) && (PinNum <= TWENTY_THREE_AS_PORT3_MAX) ){
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	80 31       	cpi	r24, 0x10	; 16
     108:	d0 f0       	brcs	.+52     	; 0x13e <DIO_WritePin+0xbc>
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	88 31       	cpi	r24, 0x18	; 24
     10e:	b8 f4       	brcc	.+46     	; 0x13e <DIO_WritePin+0xbc>
				Clear_Bit(PortC,(PinNum-PORT2_MAX));
     110:	85 e3       	ldi	r24, 0x35	; 53
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	25 e3       	ldi	r18, 0x35	; 53
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	f9 01       	movw	r30, r18
     11a:	20 81       	ld	r18, Z
     11c:	62 2f       	mov	r22, r18
     11e:	29 81       	ldd	r18, Y+1	; 0x01
     120:	20 51       	subi	r18, 0x10	; 16
     122:	42 2f       	mov	r20, r18
     124:	50 e0       	ldi	r21, 0x00	; 0
     126:	21 e0       	ldi	r18, 0x01	; 1
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_WritePin+0xae>
     12c:	22 0f       	add	r18, r18
     12e:	33 1f       	adc	r19, r19
     130:	4a 95       	dec	r20
     132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_WritePin+0xaa>
     134:	20 95       	com	r18
     136:	26 23       	and	r18, r22
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
     13c:	8f c0       	rjmp	.+286    	; 0x25c <DIO_WritePin+0x1da>
		}
		else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	88 31       	cpi	r24, 0x18	; 24
     142:	08 f4       	brcc	.+2      	; 0x146 <DIO_WritePin+0xc4>
     144:	8b c0       	rjmp	.+278    	; 0x25c <DIO_WritePin+0x1da>
     146:	89 81       	ldd	r24, Y+1	; 0x01
     148:	80 32       	cpi	r24, 0x20	; 32
     14a:	08 f0       	brcs	.+2      	; 0x14e <DIO_WritePin+0xcc>
     14c:	87 c0       	rjmp	.+270    	; 0x25c <DIO_WritePin+0x1da>
			Clear_Bit(PortD,(PinNum-PORT3_MAX));
     14e:	82 e3       	ldi	r24, 0x32	; 50
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	22 e3       	ldi	r18, 0x32	; 50
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	f9 01       	movw	r30, r18
     158:	20 81       	ld	r18, Z
     15a:	62 2f       	mov	r22, r18
     15c:	29 81       	ldd	r18, Y+1	; 0x01
     15e:	28 51       	subi	r18, 0x18	; 24
     160:	42 2f       	mov	r20, r18
     162:	50 e0       	ldi	r21, 0x00	; 0
     164:	21 e0       	ldi	r18, 0x01	; 1
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_WritePin+0xec>
     16a:	22 0f       	add	r18, r18
     16c:	33 1f       	adc	r19, r19
     16e:	4a 95       	dec	r20
     170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_WritePin+0xe8>
     172:	20 95       	com	r18
     174:	26 23       	and	r18, r22
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
		}
		else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
			Set_Bit(PortD,(PinNum-PORT3_MAX));
		}
	}
}
     17a:	70 c0       	rjmp	.+224    	; 0x25c <DIO_WritePin+0x1da>
		}
		else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
			Clear_Bit(PortD,(PinNum-PORT3_MAX));
		}
	}
	else if (PinValue == HIGH){
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	09 f0       	breq	.+2      	; 0x184 <DIO_WritePin+0x102>
     182:	6c c0       	rjmp	.+216    	; 0x25c <DIO_WritePin+0x1da>
		if (PinNum <= SEVEN_AS_PORT1_MAX)
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	88 30       	cpi	r24, 0x08	; 8
     188:	a8 f4       	brcc	.+42     	; 0x1b4 <DIO_WritePin+0x132>
		{
			Set_Bit(PortA,PinNum);
     18a:	8b e3       	ldi	r24, 0x3B	; 59
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	2b e3       	ldi	r18, 0x3B	; 59
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	62 2f       	mov	r22, r18
     198:	29 81       	ldd	r18, Y+1	; 0x01
     19a:	42 2f       	mov	r20, r18
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_WritePin+0x126>
     1a4:	22 0f       	add	r18, r18
     1a6:	33 1f       	adc	r19, r19
     1a8:	4a 95       	dec	r20
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_WritePin+0x122>
     1ac:	26 2b       	or	r18, r22
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
		}
		else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
			Set_Bit(PortD,(PinNum-PORT3_MAX));
		}
	}
}
     1b2:	54 c0       	rjmp	.+168    	; 0x25c <DIO_WritePin+0x1da>
	else if (PinValue == HIGH){
		if (PinNum <= SEVEN_AS_PORT1_MAX)
		{
			Set_Bit(PortA,PinNum);
		}
		else if ((PinNum > SEVEN_AS_PORT1_MAX) && (PinNum <= FIFTEEN_AS_PORT2_MAX) )
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	88 30       	cpi	r24, 0x08	; 8
     1b8:	c8 f0       	brcs	.+50     	; 0x1ec <DIO_WritePin+0x16a>
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	80 31       	cpi	r24, 0x10	; 16
     1be:	b0 f4       	brcc	.+44     	; 0x1ec <DIO_WritePin+0x16a>
		{
			Set_Bit(PortB,(PinNum-PORT1_MAX));
     1c0:	88 e3       	ldi	r24, 0x38	; 56
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	28 e3       	ldi	r18, 0x38	; 56
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	62 2f       	mov	r22, r18
     1ce:	29 81       	ldd	r18, Y+1	; 0x01
     1d0:	28 50       	subi	r18, 0x08	; 8
     1d2:	42 2f       	mov	r20, r18
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_WritePin+0x15e>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	4a 95       	dec	r20
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_WritePin+0x15a>
     1e4:	26 2b       	or	r18, r22
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18
     1ea:	38 c0       	rjmp	.+112    	; 0x25c <DIO_WritePin+0x1da>
		}
		else if ((PinNum > FIFTEEN_AS_PORT2_MAX) && (PinNum <= TWENTY_THREE_AS_PORT3_MAX) ){
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	80 31       	cpi	r24, 0x10	; 16
     1f0:	c8 f0       	brcs	.+50     	; 0x224 <DIO_WritePin+0x1a2>
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	88 31       	cpi	r24, 0x18	; 24
     1f6:	b0 f4       	brcc	.+44     	; 0x224 <DIO_WritePin+0x1a2>
			Set_Bit(PortC,(PinNum-PORT2_MAX));
     1f8:	85 e3       	ldi	r24, 0x35	; 53
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	25 e3       	ldi	r18, 0x35	; 53
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	f9 01       	movw	r30, r18
     202:	20 81       	ld	r18, Z
     204:	62 2f       	mov	r22, r18
     206:	29 81       	ldd	r18, Y+1	; 0x01
     208:	20 51       	subi	r18, 0x10	; 16
     20a:	42 2f       	mov	r20, r18
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_WritePin+0x196>
     214:	22 0f       	add	r18, r18
     216:	33 1f       	adc	r19, r19
     218:	4a 95       	dec	r20
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_WritePin+0x192>
     21c:	26 2b       	or	r18, r22
     21e:	fc 01       	movw	r30, r24
     220:	20 83       	st	Z, r18
     222:	1c c0       	rjmp	.+56     	; 0x25c <DIO_WritePin+0x1da>
		}
		else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	88 31       	cpi	r24, 0x18	; 24
     228:	c8 f0       	brcs	.+50     	; 0x25c <DIO_WritePin+0x1da>
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	80 32       	cpi	r24, 0x20	; 32
     22e:	b0 f4       	brcc	.+44     	; 0x25c <DIO_WritePin+0x1da>
			Set_Bit(PortD,(PinNum-PORT3_MAX));
     230:	82 e3       	ldi	r24, 0x32	; 50
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	22 e3       	ldi	r18, 0x32	; 50
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	f9 01       	movw	r30, r18
     23a:	20 81       	ld	r18, Z
     23c:	62 2f       	mov	r22, r18
     23e:	29 81       	ldd	r18, Y+1	; 0x01
     240:	28 51       	subi	r18, 0x18	; 24
     242:	42 2f       	mov	r20, r18
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_WritePin+0x1ce>
     24c:	22 0f       	add	r18, r18
     24e:	33 1f       	adc	r19, r19
     250:	4a 95       	dec	r20
     252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_WritePin+0x1ca>
     254:	26 2b       	or	r18, r22
     256:	fc 01       	movw	r30, r24
     258:	20 83       	st	Z, r18
		}
	}
}
     25a:	00 c0       	rjmp	.+0      	; 0x25c <DIO_WritePin+0x1da>
     25c:	00 00       	nop
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <DIO_ReadPin>:
 *
 * Description: function to return the logic state of a predefined pin
 *
 *
 ********************************************************************************/
uint8 DIO_ReadPin(uint8 PinNum){
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	1f 92       	push	r1
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	89 83       	std	Y+1, r24	; 0x01
	
		if (PinNum <= SEVEN_AS_PORT1_MAX)
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	88 30       	cpi	r24, 0x08	; 8
     278:	d8 f4       	brcc	.+54     	; 0x2b0 <DIO_ReadPin+0x48>
		{
		return (Get_Bit(PINA,PinNum)) >>PinNum;		
     27a:	89 e3       	ldi	r24, 0x39	; 57
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	fc 01       	movw	r30, r24
     280:	80 81       	ld	r24, Z
     282:	28 2f       	mov	r18, r24
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	48 2f       	mov	r20, r24
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_ReadPin+0x2e>
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	4a 95       	dec	r20
     298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_ReadPin+0x2a>
     29a:	82 23       	and	r24, r18
     29c:	93 23       	and	r25, r19
     29e:	29 81       	ldd	r18, Y+1	; 0x01
     2a0:	22 2f       	mov	r18, r18
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_ReadPin+0x42>
     2a6:	95 95       	asr	r25
     2a8:	87 95       	ror	r24
     2aa:	2a 95       	dec	r18
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_ReadPin+0x3e>
     2ae:	6c c0       	rjmp	.+216    	; 0x388 <DIO_ReadPin+0x120>
		}
		else if ((PinNum > SEVEN_AS_PORT1_MAX) && (PinNum <= FIFTEEN_AS_PORT2_MAX) )
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	88 30       	cpi	r24, 0x08	; 8
     2b4:	08 f1       	brcs	.+66     	; 0x2f8 <DIO_ReadPin+0x90>
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	80 31       	cpi	r24, 0x10	; 16
     2ba:	f0 f4       	brcc	.+60     	; 0x2f8 <DIO_ReadPin+0x90>
		{
		return (Get_Bit(PINB,(PinNum-PORT1_MAX))) >>(PinNum-PORT1_MAX);
     2bc:	86 e3       	ldi	r24, 0x36	; 54
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	80 81       	ld	r24, Z
     2c4:	28 2f       	mov	r18, r24
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	88 50       	subi	r24, 0x08	; 8
     2cc:	48 2f       	mov	r20, r24
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_ReadPin+0x72>
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	4a 95       	dec	r20
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_ReadPin+0x6e>
     2de:	82 23       	and	r24, r18
     2e0:	93 23       	and	r25, r19
     2e2:	29 81       	ldd	r18, Y+1	; 0x01
     2e4:	22 2f       	mov	r18, r18
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	28 50       	subi	r18, 0x08	; 8
     2ea:	31 09       	sbc	r19, r1
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_ReadPin+0x8a>
     2ee:	95 95       	asr	r25
     2f0:	87 95       	ror	r24
     2f2:	2a 95       	dec	r18
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_ReadPin+0x86>
     2f6:	48 c0       	rjmp	.+144    	; 0x388 <DIO_ReadPin+0x120>
		}
		else if ((PinNum > FIFTEEN_AS_PORT2_MAX) && (PinNum <= TWENTY_THREE_AS_PORT3_MAX) ){
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	80 31       	cpi	r24, 0x10	; 16
     2fc:	08 f1       	brcs	.+66     	; 0x340 <DIO_ReadPin+0xd8>
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	88 31       	cpi	r24, 0x18	; 24
     302:	f0 f4       	brcc	.+60     	; 0x340 <DIO_ReadPin+0xd8>
		return (Get_Bit(PINC,(PinNum-PORT2_MAX))) >> (PinNum-PORT2_MAX);
     304:	83 e3       	ldi	r24, 0x33	; 51
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	fc 01       	movw	r30, r24
     30a:	80 81       	ld	r24, Z
     30c:	28 2f       	mov	r18, r24
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	80 51       	subi	r24, 0x10	; 16
     314:	48 2f       	mov	r20, r24
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_ReadPin+0xba>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	4a 95       	dec	r20
     324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_ReadPin+0xb6>
     326:	82 23       	and	r24, r18
     328:	93 23       	and	r25, r19
     32a:	29 81       	ldd	r18, Y+1	; 0x01
     32c:	22 2f       	mov	r18, r18
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	20 51       	subi	r18, 0x10	; 16
     332:	31 09       	sbc	r19, r1
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_ReadPin+0xd2>
     336:	95 95       	asr	r25
     338:	87 95       	ror	r24
     33a:	2a 95       	dec	r18
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_ReadPin+0xce>
     33e:	24 c0       	rjmp	.+72     	; 0x388 <DIO_ReadPin+0x120>
		}
		
		else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	88 31       	cpi	r24, 0x18	; 24
     344:	08 f1       	brcs	.+66     	; 0x388 <DIO_ReadPin+0x120>
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	80 32       	cpi	r24, 0x20	; 32
     34a:	f0 f4       	brcc	.+60     	; 0x388 <DIO_ReadPin+0x120>
		return (Get_Bit(PIND,(PinNum-PORT3_MAX))) >> (PinNum-PORT3_MAX);
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	88 51       	subi	r24, 0x18	; 24
     35c:	48 2f       	mov	r20, r24
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_ReadPin+0x102>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	4a 95       	dec	r20
     36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_ReadPin+0xfe>
     36e:	82 23       	and	r24, r18
     370:	93 23       	and	r25, r19
     372:	29 81       	ldd	r18, Y+1	; 0x01
     374:	22 2f       	mov	r18, r18
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	28 51       	subi	r18, 0x18	; 24
     37a:	31 09       	sbc	r19, r1
     37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_ReadPin+0x11a>
     37e:	95 95       	asr	r25
     380:	87 95       	ror	r24
     382:	2a 95       	dec	r18
     384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_ReadPin+0x116>
     386:	00 c0       	rjmp	.+0      	; 0x388 <DIO_ReadPin+0x120>
		}
	}
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <DIO_SetPinDirection>:
 *
 * Description: function to determine the direction predefined pin as either INPUT or OUTPUT
 *
 *
 ********************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <DIO_SetPinDirection+0x6>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	89 83       	std	Y+1, r24	; 0x01
     39c:	6a 83       	std	Y+2, r22	; 0x02

if(PinDirection == INPUT)
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	88 23       	and	r24, r24
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <DIO_SetPinDirection+0x16>
     3a4:	72 c0       	rjmp	.+228    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
{
	if (PinNum <= SEVEN_AS_PORT1_MAX)
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	88 30       	cpi	r24, 0x08	; 8
     3aa:	b0 f4       	brcc	.+44     	; 0x3d8 <DIO_SetPinDirection+0x48>
	{
		Clear_Bit(DDRA,PinNum);
     3ac:	8a e3       	ldi	r24, 0x3A	; 58
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	2a e3       	ldi	r18, 0x3A	; 58
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	f9 01       	movw	r30, r18
     3b6:	20 81       	ld	r18, Z
     3b8:	62 2f       	mov	r22, r18
     3ba:	29 81       	ldd	r18, Y+1	; 0x01
     3bc:	42 2f       	mov	r20, r18
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_SetPinDirection+0x3a>
     3c6:	22 0f       	add	r18, r18
     3c8:	33 1f       	adc	r19, r19
     3ca:	4a 95       	dec	r20
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_SetPinDirection+0x36>
     3ce:	20 95       	com	r18
     3d0:	26 23       	and	r18, r22
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
	}
	else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
		Set_Bit(DDRD,(PinNum-PORT3_MAX));
	}
}
     3d6:	c9 c0       	rjmp	.+402    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
{
	if (PinNum <= SEVEN_AS_PORT1_MAX)
	{
		Clear_Bit(DDRA,PinNum);
	}
	else if ((PinNum > SEVEN_AS_PORT1_MAX) && (PinNum <= FIFTEEN_AS_PORT2_MAX) )
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	88 30       	cpi	r24, 0x08	; 8
     3dc:	d0 f0       	brcs	.+52     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	80 31       	cpi	r24, 0x10	; 16
     3e2:	b8 f4       	brcc	.+46     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		Clear_Bit(DDRB,(PinNum-PORT1_MAX));
     3e4:	87 e3       	ldi	r24, 0x37	; 55
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	27 e3       	ldi	r18, 0x37	; 55
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	f9 01       	movw	r30, r18
     3ee:	20 81       	ld	r18, Z
     3f0:	62 2f       	mov	r22, r18
     3f2:	29 81       	ldd	r18, Y+1	; 0x01
     3f4:	28 50       	subi	r18, 0x08	; 8
     3f6:	42 2f       	mov	r20, r18
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	4a 95       	dec	r20
     406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	20 95       	com	r18
     40a:	26 23       	and	r18, r22
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18
     410:	ac c0       	rjmp	.+344    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}
	else if ((PinNum > FIFTEEN_AS_PORT2_MAX) && (PinNum <= TWENTY_THREE_AS_PORT3_MAX) ){
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	80 31       	cpi	r24, 0x10	; 16
     416:	d0 f0       	brcs	.+52     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	88 31       	cpi	r24, 0x18	; 24
     41c:	b8 f4       	brcc	.+46     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		Clear_Bit(DDRC,(PinNum-PORT2_MAX));
     41e:	84 e3       	ldi	r24, 0x34	; 52
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	24 e3       	ldi	r18, 0x34	; 52
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	f9 01       	movw	r30, r18
     428:	20 81       	ld	r18, Z
     42a:	62 2f       	mov	r22, r18
     42c:	29 81       	ldd	r18, Y+1	; 0x01
     42e:	20 51       	subi	r18, 0x10	; 16
     430:	42 2f       	mov	r20, r18
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	22 0f       	add	r18, r18
     43c:	33 1f       	adc	r19, r19
     43e:	4a 95       	dec	r20
     440:	e2 f7       	brpl	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     442:	20 95       	com	r18
     444:	26 23       	and	r18, r22
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
     44a:	8f c0       	rjmp	.+286    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}
	else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	88 31       	cpi	r24, 0x18	; 24
     450:	08 f4       	brcc	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	8b c0       	rjmp	.+278    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	80 32       	cpi	r24, 0x20	; 32
     458:	08 f0       	brcs	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	87 c0       	rjmp	.+270    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
		Clear_Bit(DDRD,(PinNum-24));
     45c:	81 e3       	ldi	r24, 0x31	; 49
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	21 e3       	ldi	r18, 0x31	; 49
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	f9 01       	movw	r30, r18
     466:	20 81       	ld	r18, Z
     468:	62 2f       	mov	r22, r18
     46a:	29 81       	ldd	r18, Y+1	; 0x01
     46c:	28 51       	subi	r18, 0x18	; 24
     46e:	42 2f       	mov	r20, r18
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	21 e0       	ldi	r18, 0x01	; 1
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     478:	22 0f       	add	r18, r18
     47a:	33 1f       	adc	r19, r19
     47c:	4a 95       	dec	r20
     47e:	e2 f7       	brpl	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     480:	20 95       	com	r18
     482:	26 23       	and	r18, r22
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
	}
	else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
		Set_Bit(DDRD,(PinNum-PORT3_MAX));
	}
}
     488:	70 c0       	rjmp	.+224    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}
	else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
		Clear_Bit(DDRD,(PinNum-24));
	}
}
else if (PinDirection == OUTPUT){
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	09 f0       	breq	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	6c c0       	rjmp	.+216    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	if (PinNum <= SEVEN_AS_PORT1_MAX)
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	88 30       	cpi	r24, 0x08	; 8
     496:	a8 f4       	brcc	.+42     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	{
		Set_Bit(DDRA,PinNum);
     498:	8a e3       	ldi	r24, 0x3A	; 58
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	2a e3       	ldi	r18, 0x3A	; 58
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	f9 01       	movw	r30, r18
     4a2:	20 81       	ld	r18, Z
     4a4:	62 2f       	mov	r22, r18
     4a6:	29 81       	ldd	r18, Y+1	; 0x01
     4a8:	42 2f       	mov	r20, r18
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	22 0f       	add	r18, r18
     4b4:	33 1f       	adc	r19, r19
     4b6:	4a 95       	dec	r20
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ba:	26 2b       	or	r18, r22
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18
	}
	else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
		Set_Bit(DDRD,(PinNum-PORT3_MAX));
	}
}
     4c0:	54 c0       	rjmp	.+168    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
else if (PinDirection == OUTPUT){
	if (PinNum <= SEVEN_AS_PORT1_MAX)
	{
		Set_Bit(DDRA,PinNum);
	}
	else if ((PinNum > SEVEN_AS_PORT1_MAX) && (PinNum <= FIFTEEN_AS_PORT2_MAX) )
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	88 30       	cpi	r24, 0x08	; 8
     4c6:	c8 f0       	brcs	.+50     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	80 31       	cpi	r24, 0x10	; 16
     4cc:	b0 f4       	brcc	.+44     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	{
		Set_Bit(DDRB,(PinNum-PORT1_MAX));
     4ce:	87 e3       	ldi	r24, 0x37	; 55
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	27 e3       	ldi	r18, 0x37	; 55
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	f9 01       	movw	r30, r18
     4d8:	20 81       	ld	r18, Z
     4da:	62 2f       	mov	r22, r18
     4dc:	29 81       	ldd	r18, Y+1	; 0x01
     4de:	28 50       	subi	r18, 0x08	; 8
     4e0:	42 2f       	mov	r20, r18
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	21 e0       	ldi	r18, 0x01	; 1
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ea:	22 0f       	add	r18, r18
     4ec:	33 1f       	adc	r19, r19
     4ee:	4a 95       	dec	r20
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f2:	26 2b       	or	r18, r22
     4f4:	fc 01       	movw	r30, r24
     4f6:	20 83       	st	Z, r18
     4f8:	38 c0       	rjmp	.+112    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}
	else if ((PinNum > FIFTEEN_AS_PORT2_MAX) && (PinNum <= TWENTY_THREE_AS_PORT3_MAX) ){
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	80 31       	cpi	r24, 0x10	; 16
     4fe:	c8 f0       	brcs	.+50     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	88 31       	cpi	r24, 0x18	; 24
     504:	b0 f4       	brcc	.+44     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		Set_Bit(DDRC,(PinNum-PORT2_MAX));
     506:	84 e3       	ldi	r24, 0x34	; 52
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	24 e3       	ldi	r18, 0x34	; 52
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	f9 01       	movw	r30, r18
     510:	20 81       	ld	r18, Z
     512:	62 2f       	mov	r22, r18
     514:	29 81       	ldd	r18, Y+1	; 0x01
     516:	20 51       	subi	r18, 0x10	; 16
     518:	42 2f       	mov	r20, r18
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	21 e0       	ldi	r18, 0x01	; 1
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     522:	22 0f       	add	r18, r18
     524:	33 1f       	adc	r19, r19
     526:	4a 95       	dec	r20
     528:	e2 f7       	brpl	.-8      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     52a:	26 2b       	or	r18, r22
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
     530:	1c c0       	rjmp	.+56     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	}
	else if ((PinNum > TWENTY_THREE_AS_PORT3_MAX) && (PinNum <= THIRTY_ONE_AS_PORT3_MAX) ){
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	88 31       	cpi	r24, 0x18	; 24
     536:	c8 f0       	brcs	.+50     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	80 32       	cpi	r24, 0x20	; 32
     53c:	b0 f4       	brcc	.+44     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
		Set_Bit(DDRD,(PinNum-PORT3_MAX));
     53e:	81 e3       	ldi	r24, 0x31	; 49
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	21 e3       	ldi	r18, 0x31	; 49
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	f9 01       	movw	r30, r18
     548:	20 81       	ld	r18, Z
     54a:	62 2f       	mov	r22, r18
     54c:	29 81       	ldd	r18, Y+1	; 0x01
     54e:	28 51       	subi	r18, 0x18	; 24
     550:	42 2f       	mov	r20, r18
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	02 c0       	rjmp	.+4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	4a 95       	dec	r20
     560:	e2 f7       	brpl	.-8      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     562:	26 2b       	or	r18, r22
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
	}
}
     568:	00 c0       	rjmp	.+0      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     56a:	00 00       	nop
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <LCD_init>:
 *
 * Description: function to initialize the pins of the LCD as output and gives the LCD
 * its initial commands
 *
 ********************************************************************************/
void LCD_init(){
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	c6 54       	subi	r28, 0x46	; 70
     584:	d1 09       	sbc	r29, r1
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
	
	DIO_SetPinDirection(LCD_RS,OUTPUT);
     590:	61 e0       	ldi	r22, 0x01	; 1
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW,OUTPUT);
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN,OUTPUT);	
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D4,OUTPUT);
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	84 e0       	ldi	r24, 0x04	; 4
     5ac:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5,OUTPUT);
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	85 e0       	ldi	r24, 0x05	; 5
     5b4:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6,OUTPUT);
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7,OUTPUT);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	87 e0       	ldi	r24, 0x07	; 7
     5c4:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>


LCD_sendCommand(CMD_LCD4BIT33);
     5c8:	83 e3       	ldi	r24, 0x33	; 51
     5ca:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	a0 e0       	ldi	r26, 0x00	; 0
     5d4:	b0 e4       	ldi	r27, 0x40	; 64
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	ab 83       	std	Y+3, r26	; 0x03
     5dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4a e7       	ldi	r20, 0x7A	; 122
     5e4:	53 e4       	ldi	r21, 0x43	; 67
     5e6:	69 81       	ldd	r22, Y+1	; 0x01
     5e8:	7a 81       	ldd	r23, Y+2	; 0x02
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	9e 01       	movw	r18, r28
     5f8:	23 5c       	subi	r18, 0xC3	; 195
     5fa:	3f 4f       	sbci	r19, 0xFF	; 255
     5fc:	f9 01       	movw	r30, r18
     5fe:	80 83       	st	Z, r24
     600:	91 83       	std	Z+1, r25	; 0x01
     602:	a2 83       	std	Z+2, r26	; 0x02
     604:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 e8       	ldi	r20, 0x80	; 128
     60c:	5f e3       	ldi	r21, 0x3F	; 63
     60e:	ce 01       	movw	r24, r28
     610:	cd 96       	adiw	r24, 0x3d	; 61
     612:	fc 01       	movw	r30, r24
     614:	60 81       	ld	r22, Z
     616:	71 81       	ldd	r23, Z+1	; 0x01
     618:	82 81       	ldd	r24, Z+2	; 0x02
     61a:	93 81       	ldd	r25, Z+3	; 0x03
     61c:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     620:	88 23       	and	r24, r24
     622:	4c f4       	brge	.+18     	; 0x636 <LCD_init+0xc0>
		__ticks = 1;
     624:	ce 01       	movw	r24, r28
     626:	8f 5b       	subi	r24, 0xBF	; 191
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	31 83       	std	Z+1, r19	; 0x01
     632:	20 83       	st	Z, r18
     634:	67 c0       	rjmp	.+206    	; 0x704 <LCD_init+0x18e>
	else if (__tmp > 65535)
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	3f ef       	ldi	r19, 0xFF	; 255
     63a:	4f e7       	ldi	r20, 0x7F	; 127
     63c:	57 e4       	ldi	r21, 0x47	; 71
     63e:	ce 01       	movw	r24, r28
     640:	cd 96       	adiw	r24, 0x3d	; 61
     642:	fc 01       	movw	r30, r24
     644:	60 81       	ld	r22, Z
     646:	71 81       	ldd	r23, Z+1	; 0x01
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	93 81       	ldd	r25, Z+3	; 0x03
     64c:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     650:	18 16       	cp	r1, r24
     652:	0c f0       	brlt	.+2      	; 0x656 <LCD_init+0xe0>
     654:	46 c0       	rjmp	.+140    	; 0x6e2 <LCD_init+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e2       	ldi	r20, 0x20	; 32
     65c:	51 e4       	ldi	r21, 0x41	; 65
     65e:	69 81       	ldd	r22, Y+1	; 0x01
     660:	7a 81       	ldd	r23, Y+2	; 0x02
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	8e 01       	movw	r16, r28
     670:	0f 5b       	subi	r16, 0xBF	; 191
     672:	1f 4f       	sbci	r17, 0xFF	; 255
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	f8 01       	movw	r30, r16
     682:	91 83       	std	Z+1, r25	; 0x01
     684:	80 83       	st	Z, r24
     686:	24 c0       	rjmp	.+72     	; 0x6d0 <LCD_init+0x15a>
     688:	ce 01       	movw	r24, r28
     68a:	8d 5b       	subi	r24, 0xBD	; 189
     68c:	9f 4f       	sbci	r25, 0xFF	; 255
     68e:	29 e1       	ldi	r18, 0x19	; 25
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	fc 01       	movw	r30, r24
     694:	31 83       	std	Z+1, r19	; 0x01
     696:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     698:	ce 01       	movw	r24, r28
     69a:	8d 5b       	subi	r24, 0xBD	; 189
     69c:	9f 4f       	sbci	r25, 0xFF	; 255
     69e:	fc 01       	movw	r30, r24
     6a0:	80 81       	ld	r24, Z
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <LCD_init+0x12e>
     6a8:	9e 01       	movw	r18, r28
     6aa:	2d 5b       	subi	r18, 0xBD	; 189
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	f9 01       	movw	r30, r18
     6b0:	91 83       	std	Z+1, r25	; 0x01
     6b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b4:	ce 01       	movw	r24, r28
     6b6:	8f 5b       	subi	r24, 0xBF	; 191
     6b8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ba:	9e 01       	movw	r18, r28
     6bc:	2f 5b       	subi	r18, 0xBF	; 191
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
     6c0:	f9 01       	movw	r30, r18
     6c2:	20 81       	ld	r18, Z
     6c4:	31 81       	ldd	r19, Z+1	; 0x01
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	31 09       	sbc	r19, r1
     6ca:	fc 01       	movw	r30, r24
     6cc:	31 83       	std	Z+1, r19	; 0x01
     6ce:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d0:	ce 01       	movw	r24, r28
     6d2:	8f 5b       	subi	r24, 0xBF	; 191
     6d4:	9f 4f       	sbci	r25, 0xFF	; 255
     6d6:	fc 01       	movw	r30, r24
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	89 2b       	or	r24, r25
     6de:	a1 f6       	brne	.-88     	; 0x688 <LCD_init+0x112>
     6e0:	2b c0       	rjmp	.+86     	; 0x738 <LCD_init+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e2:	8e 01       	movw	r16, r28
     6e4:	0f 5b       	subi	r16, 0xBF	; 191
     6e6:	1f 4f       	sbci	r17, 0xFF	; 255
     6e8:	ce 01       	movw	r24, r28
     6ea:	cd 96       	adiw	r24, 0x3d	; 61
     6ec:	fc 01       	movw	r30, r24
     6ee:	60 81       	ld	r22, Z
     6f0:	71 81       	ldd	r23, Z+1	; 0x01
     6f2:	82 81       	ldd	r24, Z+2	; 0x02
     6f4:	93 81       	ldd	r25, Z+3	; 0x03
     6f6:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     6fa:	dc 01       	movw	r26, r24
     6fc:	cb 01       	movw	r24, r22
     6fe:	f8 01       	movw	r30, r16
     700:	91 83       	std	Z+1, r25	; 0x01
     702:	80 83       	st	Z, r24
     704:	ce 01       	movw	r24, r28
     706:	8b 5b       	subi	r24, 0xBB	; 187
     708:	9f 4f       	sbci	r25, 0xFF	; 255
     70a:	9e 01       	movw	r18, r28
     70c:	2f 5b       	subi	r18, 0xBF	; 191
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	31 81       	ldd	r19, Z+1	; 0x01
     716:	fc 01       	movw	r30, r24
     718:	31 83       	std	Z+1, r19	; 0x01
     71a:	20 83       	st	Z, r18
     71c:	ce 01       	movw	r24, r28
     71e:	8b 5b       	subi	r24, 0xBB	; 187
     720:	9f 4f       	sbci	r25, 0xFF	; 255
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <LCD_init+0x1b2>
     72c:	9e 01       	movw	r18, r28
     72e:	2b 5b       	subi	r18, 0xBB	; 187
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	f9 01       	movw	r30, r18
     734:	91 83       	std	Z+1, r25	; 0x01
     736:	80 83       	st	Z, r24
_delay_ms(TWO_MS);
LCD_sendCommand(CMD_LCD4BIT32);
     738:	82 e3       	ldi	r24, 0x32	; 50
     73a:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	a0 e0       	ldi	r26, 0x00	; 0
     744:	b0 e4       	ldi	r27, 0x40	; 64
     746:	8d 83       	std	Y+5, r24	; 0x05
     748:	9e 83       	std	Y+6, r25	; 0x06
     74a:	af 83       	std	Y+7, r26	; 0x07
     74c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	4a e7       	ldi	r20, 0x7A	; 122
     754:	53 e4       	ldi	r21, 0x43	; 67
     756:	6d 81       	ldd	r22, Y+5	; 0x05
     758:	7e 81       	ldd	r23, Y+6	; 0x06
     75a:	8f 81       	ldd	r24, Y+7	; 0x07
     75c:	98 85       	ldd	r25, Y+8	; 0x08
     75e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	8b ab       	std	Y+51, r24	; 0x33
     768:	9c ab       	std	Y+52, r25	; 0x34
     76a:	ad ab       	std	Y+53, r26	; 0x35
     76c:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 e8       	ldi	r20, 0x80	; 128
     774:	5f e3       	ldi	r21, 0x3F	; 63
     776:	6b a9       	ldd	r22, Y+51	; 0x33
     778:	7c a9       	ldd	r23, Y+52	; 0x34
     77a:	8d a9       	ldd	r24, Y+53	; 0x35
     77c:	9e a9       	ldd	r25, Y+54	; 0x36
     77e:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     782:	88 23       	and	r24, r24
     784:	2c f4       	brge	.+10     	; 0x790 <LCD_init+0x21a>
		__ticks = 1;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	98 af       	std	Y+56, r25	; 0x38
     78c:	8f ab       	std	Y+55, r24	; 0x37
     78e:	3f c0       	rjmp	.+126    	; 0x80e <LCD_init+0x298>
	else if (__tmp > 65535)
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	3f ef       	ldi	r19, 0xFF	; 255
     794:	4f e7       	ldi	r20, 0x7F	; 127
     796:	57 e4       	ldi	r21, 0x47	; 71
     798:	6b a9       	ldd	r22, Y+51	; 0x33
     79a:	7c a9       	ldd	r23, Y+52	; 0x34
     79c:	8d a9       	ldd	r24, Y+53	; 0x35
     79e:	9e a9       	ldd	r25, Y+54	; 0x36
     7a0:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	4c f5       	brge	.+82     	; 0x7fa <LCD_init+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e2       	ldi	r20, 0x20	; 32
     7ae:	51 e4       	ldi	r21, 0x41	; 65
     7b0:	6d 81       	ldd	r22, Y+5	; 0x05
     7b2:	7e 81       	ldd	r23, Y+6	; 0x06
     7b4:	8f 81       	ldd	r24, Y+7	; 0x07
     7b6:	98 85       	ldd	r25, Y+8	; 0x08
     7b8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	bc 01       	movw	r22, r24
     7c2:	cd 01       	movw	r24, r26
     7c4:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 af       	std	Y+56, r25	; 0x38
     7ce:	8f ab       	std	Y+55, r24	; 0x37
     7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <LCD_init+0x27a>
     7d2:	89 e1       	ldi	r24, 0x19	; 25
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	9a af       	std	Y+58, r25	; 0x3a
     7d8:	89 af       	std	Y+57, r24	; 0x39
     7da:	89 ad       	ldd	r24, Y+57	; 0x39
     7dc:	9a ad       	ldd	r25, Y+58	; 0x3a
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <LCD_init+0x268>
     7e2:	9a af       	std	Y+58, r25	; 0x3a
     7e4:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e6:	8f a9       	ldd	r24, Y+55	; 0x37
     7e8:	98 ad       	ldd	r25, Y+56	; 0x38
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	98 af       	std	Y+56, r25	; 0x38
     7ee:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f0:	8f a9       	ldd	r24, Y+55	; 0x37
     7f2:	98 ad       	ldd	r25, Y+56	; 0x38
     7f4:	89 2b       	or	r24, r25
     7f6:	69 f7       	brne	.-38     	; 0x7d2 <LCD_init+0x25c>
     7f8:	14 c0       	rjmp	.+40     	; 0x822 <LCD_init+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fa:	6b a9       	ldd	r22, Y+51	; 0x33
     7fc:	7c a9       	ldd	r23, Y+52	; 0x34
     7fe:	8d a9       	ldd	r24, Y+53	; 0x35
     800:	9e a9       	ldd	r25, Y+54	; 0x36
     802:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	98 af       	std	Y+56, r25	; 0x38
     80c:	8f ab       	std	Y+55, r24	; 0x37
     80e:	8f a9       	ldd	r24, Y+55	; 0x37
     810:	98 ad       	ldd	r25, Y+56	; 0x38
     812:	9c af       	std	Y+60, r25	; 0x3c
     814:	8b af       	std	Y+59, r24	; 0x3b
     816:	8b ad       	ldd	r24, Y+59	; 0x3b
     818:	9c ad       	ldd	r25, Y+60	; 0x3c
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <LCD_init+0x2a4>
     81e:	9c af       	std	Y+60, r25	; 0x3c
     820:	8b af       	std	Y+59, r24	; 0x3b
_delay_ms(TWO_MS);
LCD_sendCommand(CMD_LCD_2_LINES_5X7);
     822:	88 e2       	ldi	r24, 0x28	; 40
     824:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	b0 e4       	ldi	r27, 0x40	; 64
     830:	89 87       	std	Y+9, r24	; 0x09
     832:	9a 87       	std	Y+10, r25	; 0x0a
     834:	ab 87       	std	Y+11, r26	; 0x0b
     836:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	4a e7       	ldi	r20, 0x7A	; 122
     83e:	53 e4       	ldi	r21, 0x43	; 67
     840:	69 85       	ldd	r22, Y+9	; 0x09
     842:	7a 85       	ldd	r23, Y+10	; 0x0a
     844:	8b 85       	ldd	r24, Y+11	; 0x0b
     846:	9c 85       	ldd	r25, Y+12	; 0x0c
     848:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	89 a7       	std	Y+41, r24	; 0x29
     852:	9a a7       	std	Y+42, r25	; 0x2a
     854:	ab a7       	std	Y+43, r26	; 0x2b
     856:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e8       	ldi	r20, 0x80	; 128
     85e:	5f e3       	ldi	r21, 0x3F	; 63
     860:	69 a5       	ldd	r22, Y+41	; 0x29
     862:	7a a5       	ldd	r23, Y+42	; 0x2a
     864:	8b a5       	ldd	r24, Y+43	; 0x2b
     866:	9c a5       	ldd	r25, Y+44	; 0x2c
     868:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     86c:	88 23       	and	r24, r24
     86e:	2c f4       	brge	.+10     	; 0x87a <__stack+0x1b>
		__ticks = 1;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	9e a7       	std	Y+46, r25	; 0x2e
     876:	8d a7       	std	Y+45, r24	; 0x2d
     878:	3f c0       	rjmp	.+126    	; 0x8f8 <__stack+0x99>
	else if (__tmp > 65535)
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	3f ef       	ldi	r19, 0xFF	; 255
     87e:	4f e7       	ldi	r20, 0x7F	; 127
     880:	57 e4       	ldi	r21, 0x47	; 71
     882:	69 a5       	ldd	r22, Y+41	; 0x29
     884:	7a a5       	ldd	r23, Y+42	; 0x2a
     886:	8b a5       	ldd	r24, Y+43	; 0x2b
     888:	9c a5       	ldd	r25, Y+44	; 0x2c
     88a:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     88e:	18 16       	cp	r1, r24
     890:	4c f5       	brge	.+82     	; 0x8e4 <__stack+0x85>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e2       	ldi	r20, 0x20	; 32
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	69 85       	ldd	r22, Y+9	; 0x09
     89c:	7a 85       	ldd	r23, Y+10	; 0x0a
     89e:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a2:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     8a6:	dc 01       	movw	r26, r24
     8a8:	cb 01       	movw	r24, r22
     8aa:	bc 01       	movw	r22, r24
     8ac:	cd 01       	movw	r24, r26
     8ae:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	9e a7       	std	Y+46, r25	; 0x2e
     8b8:	8d a7       	std	Y+45, r24	; 0x2d
     8ba:	0f c0       	rjmp	.+30     	; 0x8da <__stack+0x7b>
     8bc:	89 e1       	ldi	r24, 0x19	; 25
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	98 ab       	std	Y+48, r25	; 0x30
     8c2:	8f a7       	std	Y+47, r24	; 0x2f
     8c4:	8f a5       	ldd	r24, Y+47	; 0x2f
     8c6:	98 a9       	ldd	r25, Y+48	; 0x30
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <__stack+0x69>
     8cc:	98 ab       	std	Y+48, r25	; 0x30
     8ce:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d0:	8d a5       	ldd	r24, Y+45	; 0x2d
     8d2:	9e a5       	ldd	r25, Y+46	; 0x2e
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	9e a7       	std	Y+46, r25	; 0x2e
     8d8:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8da:	8d a5       	ldd	r24, Y+45	; 0x2d
     8dc:	9e a5       	ldd	r25, Y+46	; 0x2e
     8de:	89 2b       	or	r24, r25
     8e0:	69 f7       	brne	.-38     	; 0x8bc <__stack+0x5d>
     8e2:	14 c0       	rjmp	.+40     	; 0x90c <__stack+0xad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e4:	69 a5       	ldd	r22, Y+41	; 0x29
     8e6:	7a a5       	ldd	r23, Y+42	; 0x2a
     8e8:	8b a5       	ldd	r24, Y+43	; 0x2b
     8ea:	9c a5       	ldd	r25, Y+44	; 0x2c
     8ec:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	9e a7       	std	Y+46, r25	; 0x2e
     8f6:	8d a7       	std	Y+45, r24	; 0x2d
     8f8:	8d a5       	ldd	r24, Y+45	; 0x2d
     8fa:	9e a5       	ldd	r25, Y+46	; 0x2e
     8fc:	9a ab       	std	Y+50, r25	; 0x32
     8fe:	89 ab       	std	Y+49, r24	; 0x31
     900:	89 a9       	ldd	r24, Y+49	; 0x31
     902:	9a a9       	ldd	r25, Y+50	; 0x32
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0xa5>
     908:	9a ab       	std	Y+50, r25	; 0x32
     90a:	89 ab       	std	Y+49, r24	; 0x31
_delay_ms(TWO_MS);
LCD_sendCommand(CMD_CURSOR_ON);
     90c:	8e e0       	ldi	r24, 0x0E	; 14
     90e:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e4       	ldi	r27, 0x40	; 64
     91a:	8d 87       	std	Y+13, r24	; 0x0d
     91c:	9e 87       	std	Y+14, r25	; 0x0e
     91e:	af 87       	std	Y+15, r26	; 0x0f
     920:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	4a e7       	ldi	r20, 0x7A	; 122
     928:	53 e4       	ldi	r21, 0x43	; 67
     92a:	6d 85       	ldd	r22, Y+13	; 0x0d
     92c:	7e 85       	ldd	r23, Y+14	; 0x0e
     92e:	8f 85       	ldd	r24, Y+15	; 0x0f
     930:	98 89       	ldd	r25, Y+16	; 0x10
     932:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     936:	dc 01       	movw	r26, r24
     938:	cb 01       	movw	r24, r22
     93a:	8f 8f       	std	Y+31, r24	; 0x1f
     93c:	98 a3       	std	Y+32, r25	; 0x20
     93e:	a9 a3       	std	Y+33, r26	; 0x21
     940:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e8       	ldi	r20, 0x80	; 128
     948:	5f e3       	ldi	r21, 0x3F	; 63
     94a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     94c:	78 a1       	ldd	r23, Y+32	; 0x20
     94e:	89 a1       	ldd	r24, Y+33	; 0x21
     950:	9a a1       	ldd	r25, Y+34	; 0x22
     952:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     956:	88 23       	and	r24, r24
     958:	2c f4       	brge	.+10     	; 0x964 <__stack+0x105>
		__ticks = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9c a3       	std	Y+36, r25	; 0x24
     960:	8b a3       	std	Y+35, r24	; 0x23
     962:	3f c0       	rjmp	.+126    	; 0x9e2 <__stack+0x183>
	else if (__tmp > 65535)
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	3f ef       	ldi	r19, 0xFF	; 255
     968:	4f e7       	ldi	r20, 0x7F	; 127
     96a:	57 e4       	ldi	r21, 0x47	; 71
     96c:	6f 8d       	ldd	r22, Y+31	; 0x1f
     96e:	78 a1       	ldd	r23, Y+32	; 0x20
     970:	89 a1       	ldd	r24, Y+33	; 0x21
     972:	9a a1       	ldd	r25, Y+34	; 0x22
     974:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     978:	18 16       	cp	r1, r24
     97a:	4c f5       	brge	.+82     	; 0x9ce <__stack+0x16f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e2       	ldi	r20, 0x20	; 32
     982:	51 e4       	ldi	r21, 0x41	; 65
     984:	6d 85       	ldd	r22, Y+13	; 0x0d
     986:	7e 85       	ldd	r23, Y+14	; 0x0e
     988:	8f 85       	ldd	r24, Y+15	; 0x0f
     98a:	98 89       	ldd	r25, Y+16	; 0x10
     98c:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	bc 01       	movw	r22, r24
     996:	cd 01       	movw	r24, r26
     998:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     99c:	dc 01       	movw	r26, r24
     99e:	cb 01       	movw	r24, r22
     9a0:	9c a3       	std	Y+36, r25	; 0x24
     9a2:	8b a3       	std	Y+35, r24	; 0x23
     9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <__stack+0x165>
     9a6:	89 e1       	ldi	r24, 0x19	; 25
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	9e a3       	std	Y+38, r25	; 0x26
     9ac:	8d a3       	std	Y+37, r24	; 0x25
     9ae:	8d a1       	ldd	r24, Y+37	; 0x25
     9b0:	9e a1       	ldd	r25, Y+38	; 0x26
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <__stack+0x153>
     9b6:	9e a3       	std	Y+38, r25	; 0x26
     9b8:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ba:	8b a1       	ldd	r24, Y+35	; 0x23
     9bc:	9c a1       	ldd	r25, Y+36	; 0x24
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	9c a3       	std	Y+36, r25	; 0x24
     9c2:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c4:	8b a1       	ldd	r24, Y+35	; 0x23
     9c6:	9c a1       	ldd	r25, Y+36	; 0x24
     9c8:	89 2b       	or	r24, r25
     9ca:	69 f7       	brne	.-38     	; 0x9a6 <__stack+0x147>
     9cc:	14 c0       	rjmp	.+40     	; 0x9f6 <__stack+0x197>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9d0:	78 a1       	ldd	r23, Y+32	; 0x20
     9d2:	89 a1       	ldd	r24, Y+33	; 0x21
     9d4:	9a a1       	ldd	r25, Y+34	; 0x22
     9d6:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	9c a3       	std	Y+36, r25	; 0x24
     9e0:	8b a3       	std	Y+35, r24	; 0x23
     9e2:	8b a1       	ldd	r24, Y+35	; 0x23
     9e4:	9c a1       	ldd	r25, Y+36	; 0x24
     9e6:	98 a7       	std	Y+40, r25	; 0x28
     9e8:	8f a3       	std	Y+39, r24	; 0x27
     9ea:	8f a1       	ldd	r24, Y+39	; 0x27
     9ec:	98 a5       	ldd	r25, Y+40	; 0x28
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <__stack+0x18f>
     9f2:	98 a7       	std	Y+40, r25	; 0x28
     9f4:	8f a3       	std	Y+39, r24	; 0x27
_delay_ms(TWO_MS);
LCD_sendCommand(CMD_RESET);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	b0 e4       	ldi	r27, 0x40	; 64
     a04:	89 8b       	std	Y+17, r24	; 0x11
     a06:	9a 8b       	std	Y+18, r25	; 0x12
     a08:	ab 8b       	std	Y+19, r26	; 0x13
     a0a:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	4a e7       	ldi	r20, 0x7A	; 122
     a12:	53 e4       	ldi	r21, 0x43	; 67
     a14:	69 89       	ldd	r22, Y+17	; 0x11
     a16:	7a 89       	ldd	r23, Y+18	; 0x12
     a18:	8b 89       	ldd	r24, Y+19	; 0x13
     a1a:	9c 89       	ldd	r25, Y+20	; 0x14
     a1c:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	8d 8b       	std	Y+21, r24	; 0x15
     a26:	9e 8b       	std	Y+22, r25	; 0x16
     a28:	af 8b       	std	Y+23, r26	; 0x17
     a2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e8       	ldi	r20, 0x80	; 128
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	6d 89       	ldd	r22, Y+21	; 0x15
     a36:	7e 89       	ldd	r23, Y+22	; 0x16
     a38:	8f 89       	ldd	r24, Y+23	; 0x17
     a3a:	98 8d       	ldd	r25, Y+24	; 0x18
     a3c:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     a40:	88 23       	and	r24, r24
     a42:	2c f4       	brge	.+10     	; 0xa4e <__stack+0x1ef>
		__ticks = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	9a 8f       	std	Y+26, r25	; 0x1a
     a4a:	89 8f       	std	Y+25, r24	; 0x19
     a4c:	3f c0       	rjmp	.+126    	; 0xacc <__stack+0x26d>
	else if (__tmp > 65535)
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	3f ef       	ldi	r19, 0xFF	; 255
     a52:	4f e7       	ldi	r20, 0x7F	; 127
     a54:	57 e4       	ldi	r21, 0x47	; 71
     a56:	6d 89       	ldd	r22, Y+21	; 0x15
     a58:	7e 89       	ldd	r23, Y+22	; 0x16
     a5a:	8f 89       	ldd	r24, Y+23	; 0x17
     a5c:	98 8d       	ldd	r25, Y+24	; 0x18
     a5e:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     a62:	18 16       	cp	r1, r24
     a64:	4c f5       	brge	.+82     	; 0xab8 <__stack+0x259>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e2       	ldi	r20, 0x20	; 32
     a6c:	51 e4       	ldi	r21, 0x41	; 65
     a6e:	69 89       	ldd	r22, Y+17	; 0x11
     a70:	7a 89       	ldd	r23, Y+18	; 0x12
     a72:	8b 89       	ldd	r24, Y+19	; 0x13
     a74:	9c 89       	ldd	r25, Y+20	; 0x14
     a76:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     a7a:	dc 01       	movw	r26, r24
     a7c:	cb 01       	movw	r24, r22
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     a86:	dc 01       	movw	r26, r24
     a88:	cb 01       	movw	r24, r22
     a8a:	9a 8f       	std	Y+26, r25	; 0x1a
     a8c:	89 8f       	std	Y+25, r24	; 0x19
     a8e:	0f c0       	rjmp	.+30     	; 0xaae <__stack+0x24f>
     a90:	89 e1       	ldi	r24, 0x19	; 25
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9c 8f       	std	Y+28, r25	; 0x1c
     a96:	8b 8f       	std	Y+27, r24	; 0x1b
     a98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <__stack+0x23d>
     aa0:	9c 8f       	std	Y+28, r25	; 0x1c
     aa2:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa4:	89 8d       	ldd	r24, Y+25	; 0x19
     aa6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	9a 8f       	std	Y+26, r25	; 0x1a
     aac:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aae:	89 8d       	ldd	r24, Y+25	; 0x19
     ab0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ab2:	89 2b       	or	r24, r25
     ab4:	69 f7       	brne	.-38     	; 0xa90 <__stack+0x231>
     ab6:	14 c0       	rjmp	.+40     	; 0xae0 <__stack+0x281>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab8:	6d 89       	ldd	r22, Y+21	; 0x15
     aba:	7e 89       	ldd	r23, Y+22	; 0x16
     abc:	8f 89       	ldd	r24, Y+23	; 0x17
     abe:	98 8d       	ldd	r25, Y+24	; 0x18
     ac0:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	9a 8f       	std	Y+26, r25	; 0x1a
     aca:	89 8f       	std	Y+25, r24	; 0x19
     acc:	89 8d       	ldd	r24, Y+25	; 0x19
     ace:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ad0:	9e 8f       	std	Y+30, r25	; 0x1e
     ad2:	8d 8f       	std	Y+29, r24	; 0x1d
     ad4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ad6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <__stack+0x279>
     adc:	9e 8f       	std	Y+30, r25	; 0x1e
     ade:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(TWO_MS);
LCD_sendCommand(CMD_SHIFT_DISPLAY_LEFT);
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
}
     ae6:	00 00       	nop
     ae8:	ca 5b       	subi	r28, 0xBA	; 186
     aea:	df 4f       	sbci	r29, 0xFF	; 255
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	08 95       	ret

00000b00 <LCD_sendCommand>:
 *
 * Description: function to send commands to the LCD
 *
 *
 ********************************************************************************/
void LCD_sendCommand(uint8 cmd){
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	ab 97       	sbiw	r28, 0x2b	; 43
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	8b a7       	std	Y+43, r24	; 0x2b

/*    Write The MOST significant bits of the command in the 4 bits of the LCD	*/
DIO_WritePin(LCD_D4,(Get_Bit(cmd,BIT4) >> BIT4));    
     b16:	8b a5       	ldd	r24, Y+43	; 0x2b
     b18:	88 2f       	mov	r24, r24
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	80 71       	andi	r24, 0x10	; 16
     b1e:	99 27       	eor	r25, r25
     b20:	95 95       	asr	r25
     b22:	87 95       	ror	r24
     b24:	95 95       	asr	r25
     b26:	87 95       	ror	r24
     b28:	95 95       	asr	r25
     b2a:	87 95       	ror	r24
     b2c:	95 95       	asr	r25
     b2e:	87 95       	ror	r24
     b30:	68 2f       	mov	r22, r24
     b32:	84 e0       	ldi	r24, 0x04	; 4
     b34:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D5,(Get_Bit(cmd,BIT5) >> BIT5));
     b38:	8b a5       	ldd	r24, Y+43	; 0x2b
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	80 72       	andi	r24, 0x20	; 32
     b40:	99 27       	eor	r25, r25
     b42:	95 95       	asr	r25
     b44:	87 95       	ror	r24
     b46:	95 95       	asr	r25
     b48:	87 95       	ror	r24
     b4a:	95 95       	asr	r25
     b4c:	87 95       	ror	r24
     b4e:	95 95       	asr	r25
     b50:	87 95       	ror	r24
     b52:	95 95       	asr	r25
     b54:	87 95       	ror	r24
     b56:	68 2f       	mov	r22, r24
     b58:	85 e0       	ldi	r24, 0x05	; 5
     b5a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D6,(Get_Bit(cmd,BIT6) >> BIT6));
     b5e:	8b a5       	ldd	r24, Y+43	; 0x2b
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	80 74       	andi	r24, 0x40	; 64
     b66:	99 27       	eor	r25, r25
     b68:	08 2e       	mov	r0, r24
     b6a:	89 2f       	mov	r24, r25
     b6c:	00 0c       	add	r0, r0
     b6e:	88 1f       	adc	r24, r24
     b70:	99 0b       	sbc	r25, r25
     b72:	00 0c       	add	r0, r0
     b74:	88 1f       	adc	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	68 2f       	mov	r22, r24
     b7a:	86 e0       	ldi	r24, 0x06	; 6
     b7c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D7,(Get_Bit(cmd,BIT7) >> BIT7));
     b80:	8b a5       	ldd	r24, Y+43	; 0x2b
     b82:	88 1f       	adc	r24, r24
     b84:	88 27       	eor	r24, r24
     b86:	88 1f       	adc	r24, r24
     b88:	68 2f       	mov	r22, r24
     b8a:	87 e0       	ldi	r24, 0x07	; 7
     b8c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>

DIO_WritePin(LCD_RS,LOW);
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_RW,LOW);
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_EN,HIGH);
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e4       	ldi	r27, 0x40	; 64
     bb0:	89 83       	std	Y+1, r24	; 0x01
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	ab 83       	std	Y+3, r26	; 0x03
     bb6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4a e7       	ldi	r20, 0x7A	; 122
     bbe:	53 e4       	ldi	r21, 0x43	; 67
     bc0:	69 81       	ldd	r22, Y+1	; 0x01
     bc2:	7a 81       	ldd	r23, Y+2	; 0x02
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	89 a3       	std	Y+33, r24	; 0x21
     bd2:	9a a3       	std	Y+34, r25	; 0x22
     bd4:	ab a3       	std	Y+35, r26	; 0x23
     bd6:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	69 a1       	ldd	r22, Y+33	; 0x21
     be2:	7a a1       	ldd	r23, Y+34	; 0x22
     be4:	8b a1       	ldd	r24, Y+35	; 0x23
     be6:	9c a1       	ldd	r25, Y+36	; 0x24
     be8:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     bec:	88 23       	and	r24, r24
     bee:	2c f4       	brge	.+10     	; 0xbfa <LCD_sendCommand+0xfa>
		__ticks = 1;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9e a3       	std	Y+38, r25	; 0x26
     bf6:	8d a3       	std	Y+37, r24	; 0x25
     bf8:	3f c0       	rjmp	.+126    	; 0xc78 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	3f ef       	ldi	r19, 0xFF	; 255
     bfe:	4f e7       	ldi	r20, 0x7F	; 127
     c00:	57 e4       	ldi	r21, 0x47	; 71
     c02:	69 a1       	ldd	r22, Y+33	; 0x21
     c04:	7a a1       	ldd	r23, Y+34	; 0x22
     c06:	8b a1       	ldd	r24, Y+35	; 0x23
     c08:	9c a1       	ldd	r25, Y+36	; 0x24
     c0a:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     c0e:	18 16       	cp	r1, r24
     c10:	4c f5       	brge	.+82     	; 0xc64 <LCD_sendCommand+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	69 81       	ldd	r22, Y+1	; 0x01
     c1c:	7a 81       	ldd	r23, Y+2	; 0x02
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	bc 01       	movw	r22, r24
     c2c:	cd 01       	movw	r24, r26
     c2e:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9e a3       	std	Y+38, r25	; 0x26
     c38:	8d a3       	std	Y+37, r24	; 0x25
     c3a:	0f c0       	rjmp	.+30     	; 0xc5a <LCD_sendCommand+0x15a>
     c3c:	89 e1       	ldi	r24, 0x19	; 25
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	98 a7       	std	Y+40, r25	; 0x28
     c42:	8f a3       	std	Y+39, r24	; 0x27
     c44:	8f a1       	ldd	r24, Y+39	; 0x27
     c46:	98 a5       	ldd	r25, Y+40	; 0x28
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <LCD_sendCommand+0x148>
     c4c:	98 a7       	std	Y+40, r25	; 0x28
     c4e:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c50:	8d a1       	ldd	r24, Y+37	; 0x25
     c52:	9e a1       	ldd	r25, Y+38	; 0x26
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	9e a3       	std	Y+38, r25	; 0x26
     c58:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5a:	8d a1       	ldd	r24, Y+37	; 0x25
     c5c:	9e a1       	ldd	r25, Y+38	; 0x26
     c5e:	89 2b       	or	r24, r25
     c60:	69 f7       	brne	.-38     	; 0xc3c <LCD_sendCommand+0x13c>
     c62:	14 c0       	rjmp	.+40     	; 0xc8c <LCD_sendCommand+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c64:	69 a1       	ldd	r22, Y+33	; 0x21
     c66:	7a a1       	ldd	r23, Y+34	; 0x22
     c68:	8b a1       	ldd	r24, Y+35	; 0x23
     c6a:	9c a1       	ldd	r25, Y+36	; 0x24
     c6c:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	9e a3       	std	Y+38, r25	; 0x26
     c76:	8d a3       	std	Y+37, r24	; 0x25
     c78:	8d a1       	ldd	r24, Y+37	; 0x25
     c7a:	9e a1       	ldd	r25, Y+38	; 0x26
     c7c:	9a a7       	std	Y+42, r25	; 0x2a
     c7e:	89 a7       	std	Y+41, r24	; 0x29
     c80:	89 a5       	ldd	r24, Y+41	; 0x29
     c82:	9a a5       	ldd	r25, Y+42	; 0x2a
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <LCD_sendCommand+0x184>
     c88:	9a a7       	std	Y+42, r25	; 0x2a
     c8a:	89 a7       	std	Y+41, r24	; 0x29
_delay_ms(TWO_MS);
DIO_WritePin(LCD_EN,LOW);
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	a0 e0       	ldi	r26, 0x00	; 0
     c9a:	b0 e4       	ldi	r27, 0x40	; 64
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	9e 83       	std	Y+6, r25	; 0x06
     ca0:	af 83       	std	Y+7, r26	; 0x07
     ca2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4a e7       	ldi	r20, 0x7A	; 122
     caa:	53 e4       	ldi	r21, 0x43	; 67
     cac:	6d 81       	ldd	r22, Y+5	; 0x05
     cae:	7e 81       	ldd	r23, Y+6	; 0x06
     cb0:	8f 81       	ldd	r24, Y+7	; 0x07
     cb2:	98 85       	ldd	r25, Y+8	; 0x08
     cb4:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	8f 8b       	std	Y+23, r24	; 0x17
     cbe:	98 8f       	std	Y+24, r25	; 0x18
     cc0:	a9 8f       	std	Y+25, r26	; 0x19
     cc2:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	6f 89       	ldd	r22, Y+23	; 0x17
     cce:	78 8d       	ldd	r23, Y+24	; 0x18
     cd0:	89 8d       	ldd	r24, Y+25	; 0x19
     cd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cd4:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     cd8:	88 23       	and	r24, r24
     cda:	2c f4       	brge	.+10     	; 0xce6 <LCD_sendCommand+0x1e6>
		__ticks = 1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9c 8f       	std	Y+28, r25	; 0x1c
     ce2:	8b 8f       	std	Y+27, r24	; 0x1b
     ce4:	3f c0       	rjmp	.+126    	; 0xd64 <LCD_sendCommand+0x264>
	else if (__tmp > 65535)
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	3f ef       	ldi	r19, 0xFF	; 255
     cea:	4f e7       	ldi	r20, 0x7F	; 127
     cec:	57 e4       	ldi	r21, 0x47	; 71
     cee:	6f 89       	ldd	r22, Y+23	; 0x17
     cf0:	78 8d       	ldd	r23, Y+24	; 0x18
     cf2:	89 8d       	ldd	r24, Y+25	; 0x19
     cf4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cf6:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     cfa:	18 16       	cp	r1, r24
     cfc:	4c f5       	brge	.+82     	; 0xd50 <LCD_sendCommand+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	6d 81       	ldd	r22, Y+5	; 0x05
     d08:	7e 81       	ldd	r23, Y+6	; 0x06
     d0a:	8f 81       	ldd	r24, Y+7	; 0x07
     d0c:	98 85       	ldd	r25, Y+8	; 0x08
     d0e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9c 8f       	std	Y+28, r25	; 0x1c
     d24:	8b 8f       	std	Y+27, r24	; 0x1b
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <LCD_sendCommand+0x246>
     d28:	89 e1       	ldi	r24, 0x19	; 25
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9e 8f       	std	Y+30, r25	; 0x1e
     d2e:	8d 8f       	std	Y+29, r24	; 0x1d
     d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d32:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <LCD_sendCommand+0x234>
     d38:	9e 8f       	std	Y+30, r25	; 0x1e
     d3a:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	9c 8f       	std	Y+28, r25	; 0x1c
     d44:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d4a:	89 2b       	or	r24, r25
     d4c:	69 f7       	brne	.-38     	; 0xd28 <LCD_sendCommand+0x228>
     d4e:	14 c0       	rjmp	.+40     	; 0xd78 <LCD_sendCommand+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d50:	6f 89       	ldd	r22, Y+23	; 0x17
     d52:	78 8d       	ldd	r23, Y+24	; 0x18
     d54:	89 8d       	ldd	r24, Y+25	; 0x19
     d56:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d58:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	9c 8f       	std	Y+28, r25	; 0x1c
     d62:	8b 8f       	std	Y+27, r24	; 0x1b
     d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d68:	98 a3       	std	Y+32, r25	; 0x20
     d6a:	8f 8f       	std	Y+31, r24	; 0x1f
     d6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d6e:	98 a1       	ldd	r25, Y+32	; 0x20
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <LCD_sendCommand+0x270>
     d74:	98 a3       	std	Y+32, r25	; 0x20
     d76:	8f 8f       	std	Y+31, r24	; 0x1f
_delay_ms(TWO_MS);

/*    Write The LEAST significant bits of the command in the 4 bits of the LCD	*/
DIO_WritePin(LCD_D4,(Get_Bit(cmd,BIT0) >> BIT0));
     d78:	8b a5       	ldd	r24, Y+43	; 0x2b
     d7a:	81 70       	andi	r24, 0x01	; 1
     d7c:	68 2f       	mov	r22, r24
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D5,(Get_Bit(cmd,BIT1) >> BIT1));
     d84:	8b a5       	ldd	r24, Y+43	; 0x2b
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	82 70       	andi	r24, 0x02	; 2
     d8c:	99 27       	eor	r25, r25
     d8e:	95 95       	asr	r25
     d90:	87 95       	ror	r24
     d92:	68 2f       	mov	r22, r24
     d94:	85 e0       	ldi	r24, 0x05	; 5
     d96:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D6,(Get_Bit(cmd,BIT2) >> BIT2));
     d9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	84 70       	andi	r24, 0x04	; 4
     da2:	99 27       	eor	r25, r25
     da4:	95 95       	asr	r25
     da6:	87 95       	ror	r24
     da8:	95 95       	asr	r25
     daa:	87 95       	ror	r24
     dac:	68 2f       	mov	r22, r24
     dae:	86 e0       	ldi	r24, 0x06	; 6
     db0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D7,(Get_Bit(cmd,BIT3) >> BIT3));
     db4:	8b a5       	ldd	r24, Y+43	; 0x2b
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	88 70       	andi	r24, 0x08	; 8
     dbc:	99 27       	eor	r25, r25
     dbe:	95 95       	asr	r25
     dc0:	87 95       	ror	r24
     dc2:	95 95       	asr	r25
     dc4:	87 95       	ror	r24
     dc6:	95 95       	asr	r25
     dc8:	87 95       	ror	r24
     dca:	68 2f       	mov	r22, r24
     dcc:	87 e0       	ldi	r24, 0x07	; 7
     dce:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>


DIO_WritePin(LCD_EN,HIGH);	
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b0 e4       	ldi	r27, 0x40	; 64
     de2:	89 87       	std	Y+9, r24	; 0x09
     de4:	9a 87       	std	Y+10, r25	; 0x0a
     de6:	ab 87       	std	Y+11, r26	; 0x0b
     de8:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a e7       	ldi	r20, 0x7A	; 122
     df0:	53 e4       	ldi	r21, 0x43	; 67
     df2:	69 85       	ldd	r22, Y+9	; 0x09
     df4:	7a 85       	ldd	r23, Y+10	; 0x0a
     df6:	8b 85       	ldd	r24, Y+11	; 0x0b
     df8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dfa:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8d 87       	std	Y+13, r24	; 0x0d
     e04:	9e 87       	std	Y+14, r25	; 0x0e
     e06:	af 87       	std	Y+15, r26	; 0x0f
     e08:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	6d 85       	ldd	r22, Y+13	; 0x0d
     e14:	7e 85       	ldd	r23, Y+14	; 0x0e
     e16:	8f 85       	ldd	r24, Y+15	; 0x0f
     e18:	98 89       	ldd	r25, Y+16	; 0x10
     e1a:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <LCD_sendCommand+0x32c>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9a 8b       	std	Y+18, r25	; 0x12
     e28:	89 8b       	std	Y+17, r24	; 0x11
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <LCD_sendCommand+0x3aa>
	else if (__tmp > 65535)
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	6d 85       	ldd	r22, Y+13	; 0x0d
     e36:	7e 85       	ldd	r23, Y+14	; 0x0e
     e38:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3a:	98 89       	ldd	r25, Y+16	; 0x10
     e3c:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <LCD_sendCommand+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	69 85       	ldd	r22, Y+9	; 0x09
     e4e:	7a 85       	ldd	r23, Y+10	; 0x0a
     e50:	8b 85       	ldd	r24, Y+11	; 0x0b
     e52:	9c 85       	ldd	r25, Y+12	; 0x0c
     e54:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9a 8b       	std	Y+18, r25	; 0x12
     e6a:	89 8b       	std	Y+17, r24	; 0x11
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <LCD_sendCommand+0x38c>
     e6e:	89 e1       	ldi	r24, 0x19	; 25
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9c 8b       	std	Y+20, r25	; 0x14
     e74:	8b 8b       	std	Y+19, r24	; 0x13
     e76:	8b 89       	ldd	r24, Y+19	; 0x13
     e78:	9c 89       	ldd	r25, Y+20	; 0x14
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <LCD_sendCommand+0x37a>
     e7e:	9c 8b       	std	Y+20, r25	; 0x14
     e80:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	89 89       	ldd	r24, Y+17	; 0x11
     e84:	9a 89       	ldd	r25, Y+18	; 0x12
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9a 8b       	std	Y+18, r25	; 0x12
     e8a:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	89 89       	ldd	r24, Y+17	; 0x11
     e8e:	9a 89       	ldd	r25, Y+18	; 0x12
     e90:	89 2b       	or	r24, r25
     e92:	69 f7       	brne	.-38     	; 0xe6e <LCD_sendCommand+0x36e>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <LCD_sendCommand+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6d 85       	ldd	r22, Y+13	; 0x0d
     e98:	7e 85       	ldd	r23, Y+14	; 0x0e
     e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9c:	98 89       	ldd	r25, Y+16	; 0x10
     e9e:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9a 8b       	std	Y+18, r25	; 0x12
     ea8:	89 8b       	std	Y+17, r24	; 0x11
     eaa:	89 89       	ldd	r24, Y+17	; 0x11
     eac:	9a 89       	ldd	r25, Y+18	; 0x12
     eae:	9e 8b       	std	Y+22, r25	; 0x16
     eb0:	8d 8b       	std	Y+21, r24	; 0x15
     eb2:	8d 89       	ldd	r24, Y+21	; 0x15
     eb4:	9e 89       	ldd	r25, Y+22	; 0x16
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <LCD_sendCommand+0x3b6>
     eba:	9e 8b       	std	Y+22, r25	; 0x16
     ebc:	8d 8b       	std	Y+21, r24	; 0x15
_delay_ms(TWO_MS);
DIO_WritePin(LCD_EN,LOW);
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	83 e0       	ldi	r24, 0x03	; 3
     ec2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
}
     ec6:	00 00       	nop
     ec8:	ab 96       	adiw	r28, 0x2b	; 43
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <LCD_displayChar>:
 *
 * Description: function to print a character on the LCD
 *
 *
 ********************************************************************************/
void LCD_displayChar(uint8 c){
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	ab 97       	sbiw	r28, 0x2b	; 43
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	8b a7       	std	Y+43, r24	; 0x2b
	
/*    Write The MOST significant bits of the command in the 4 bits of the LCD	*/

DIO_WritePin(LCD_D4,(Get_Bit(c,BIT4) >> BIT4));
     ef0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	80 71       	andi	r24, 0x10	; 16
     ef8:	99 27       	eor	r25, r25
     efa:	95 95       	asr	r25
     efc:	87 95       	ror	r24
     efe:	95 95       	asr	r25
     f00:	87 95       	ror	r24
     f02:	95 95       	asr	r25
     f04:	87 95       	ror	r24
     f06:	95 95       	asr	r25
     f08:	87 95       	ror	r24
     f0a:	68 2f       	mov	r22, r24
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D5,(Get_Bit(c,BIT5) >> BIT5));
     f12:	8b a5       	ldd	r24, Y+43	; 0x2b
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	80 72       	andi	r24, 0x20	; 32
     f1a:	99 27       	eor	r25, r25
     f1c:	95 95       	asr	r25
     f1e:	87 95       	ror	r24
     f20:	95 95       	asr	r25
     f22:	87 95       	ror	r24
     f24:	95 95       	asr	r25
     f26:	87 95       	ror	r24
     f28:	95 95       	asr	r25
     f2a:	87 95       	ror	r24
     f2c:	95 95       	asr	r25
     f2e:	87 95       	ror	r24
     f30:	68 2f       	mov	r22, r24
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D6,(Get_Bit(c,BIT6) >> BIT6));
     f38:	8b a5       	ldd	r24, Y+43	; 0x2b
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	80 74       	andi	r24, 0x40	; 64
     f40:	99 27       	eor	r25, r25
     f42:	08 2e       	mov	r0, r24
     f44:	89 2f       	mov	r24, r25
     f46:	00 0c       	add	r0, r0
     f48:	88 1f       	adc	r24, r24
     f4a:	99 0b       	sbc	r25, r25
     f4c:	00 0c       	add	r0, r0
     f4e:	88 1f       	adc	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	68 2f       	mov	r22, r24
     f54:	86 e0       	ldi	r24, 0x06	; 6
     f56:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D7,(Get_Bit(c,BIT7) >> BIT7));
     f5a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f5c:	88 1f       	adc	r24, r24
     f5e:	88 27       	eor	r24, r24
     f60:	88 1f       	adc	r24, r24
     f62:	68 2f       	mov	r22, r24
     f64:	87 e0       	ldi	r24, 0x07	; 7
     f66:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>

DIO_WritePin(LCD_RS,HIGH);
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_RW,LOW);
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_EN,HIGH);
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b0 e4       	ldi	r27, 0x40	; 64
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	ab 83       	std	Y+3, r26	; 0x03
     f90:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a e7       	ldi	r20, 0x7A	; 122
     f98:	53 e4       	ldi	r21, 0x43	; 67
     f9a:	69 81       	ldd	r22, Y+1	; 0x01
     f9c:	7a 81       	ldd	r23, Y+2	; 0x02
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	89 a3       	std	Y+33, r24	; 0x21
     fac:	9a a3       	std	Y+34, r25	; 0x22
     fae:	ab a3       	std	Y+35, r26	; 0x23
     fb0:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	69 a1       	ldd	r22, Y+33	; 0x21
     fbc:	7a a1       	ldd	r23, Y+34	; 0x22
     fbe:	8b a1       	ldd	r24, Y+35	; 0x23
     fc0:	9c a1       	ldd	r25, Y+36	; 0x24
     fc2:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <LCD_displayChar+0xfa>
		__ticks = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9e a3       	std	Y+38, r25	; 0x26
     fd0:	8d a3       	std	Y+37, r24	; 0x25
     fd2:	3f c0       	rjmp	.+126    	; 0x1052 <LCD_displayChar+0x178>
	else if (__tmp > 65535)
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	69 a1       	ldd	r22, Y+33	; 0x21
     fde:	7a a1       	ldd	r23, Y+34	; 0x22
     fe0:	8b a1       	ldd	r24, Y+35	; 0x23
     fe2:	9c a1       	ldd	r25, Y+36	; 0x24
     fe4:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
     fe8:	18 16       	cp	r1, r24
     fea:	4c f5       	brge	.+82     	; 0x103e <LCD_displayChar+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	69 81       	ldd	r22, Y+1	; 0x01
     ff6:	7a 81       	ldd	r23, Y+2	; 0x02
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	9e a3       	std	Y+38, r25	; 0x26
    1012:	8d a3       	std	Y+37, r24	; 0x25
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <LCD_displayChar+0x15a>
    1016:	89 e1       	ldi	r24, 0x19	; 25
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	98 a7       	std	Y+40, r25	; 0x28
    101c:	8f a3       	std	Y+39, r24	; 0x27
    101e:	8f a1       	ldd	r24, Y+39	; 0x27
    1020:	98 a5       	ldd	r25, Y+40	; 0x28
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <LCD_displayChar+0x148>
    1026:	98 a7       	std	Y+40, r25	; 0x28
    1028:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102a:	8d a1       	ldd	r24, Y+37	; 0x25
    102c:	9e a1       	ldd	r25, Y+38	; 0x26
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	9e a3       	std	Y+38, r25	; 0x26
    1032:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1034:	8d a1       	ldd	r24, Y+37	; 0x25
    1036:	9e a1       	ldd	r25, Y+38	; 0x26
    1038:	89 2b       	or	r24, r25
    103a:	69 f7       	brne	.-38     	; 0x1016 <LCD_displayChar+0x13c>
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <LCD_displayChar+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103e:	69 a1       	ldd	r22, Y+33	; 0x21
    1040:	7a a1       	ldd	r23, Y+34	; 0x22
    1042:	8b a1       	ldd	r24, Y+35	; 0x23
    1044:	9c a1       	ldd	r25, Y+36	; 0x24
    1046:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9e a3       	std	Y+38, r25	; 0x26
    1050:	8d a3       	std	Y+37, r24	; 0x25
    1052:	8d a1       	ldd	r24, Y+37	; 0x25
    1054:	9e a1       	ldd	r25, Y+38	; 0x26
    1056:	9a a7       	std	Y+42, r25	; 0x2a
    1058:	89 a7       	std	Y+41, r24	; 0x29
    105a:	89 a5       	ldd	r24, Y+41	; 0x29
    105c:	9a a5       	ldd	r25, Y+42	; 0x2a
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <LCD_displayChar+0x184>
    1062:	9a a7       	std	Y+42, r25	; 0x2a
    1064:	89 a7       	std	Y+41, r24	; 0x29
_delay_ms(TWO_MS);
DIO_WritePin(LCD_EN,LOW);
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a0 e0       	ldi	r26, 0x00	; 0
    1074:	b0 e4       	ldi	r27, 0x40	; 64
    1076:	8d 83       	std	Y+5, r24	; 0x05
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	af 83       	std	Y+7, r26	; 0x07
    107c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	4a e7       	ldi	r20, 0x7A	; 122
    1084:	53 e4       	ldi	r21, 0x43	; 67
    1086:	6d 81       	ldd	r22, Y+5	; 0x05
    1088:	7e 81       	ldd	r23, Y+6	; 0x06
    108a:	8f 81       	ldd	r24, Y+7	; 0x07
    108c:	98 85       	ldd	r25, Y+8	; 0x08
    108e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	8f 8b       	std	Y+23, r24	; 0x17
    1098:	98 8f       	std	Y+24, r25	; 0x18
    109a:	a9 8f       	std	Y+25, r26	; 0x19
    109c:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	6f 89       	ldd	r22, Y+23	; 0x17
    10a8:	78 8d       	ldd	r23, Y+24	; 0x18
    10aa:	89 8d       	ldd	r24, Y+25	; 0x19
    10ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10ae:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <LCD_displayChar+0x1e6>
		__ticks = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 8f       	std	Y+28, r25	; 0x1c
    10bc:	8b 8f       	std	Y+27, r24	; 0x1b
    10be:	3f c0       	rjmp	.+126    	; 0x113e <LCD_displayChar+0x264>
	else if (__tmp > 65535)
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	3f ef       	ldi	r19, 0xFF	; 255
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	57 e4       	ldi	r21, 0x47	; 71
    10c8:	6f 89       	ldd	r22, Y+23	; 0x17
    10ca:	78 8d       	ldd	r23, Y+24	; 0x18
    10cc:	89 8d       	ldd	r24, Y+25	; 0x19
    10ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10d0:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    10d4:	18 16       	cp	r1, r24
    10d6:	4c f5       	brge	.+82     	; 0x112a <LCD_displayChar+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e2       	ldi	r20, 0x20	; 32
    10de:	51 e4       	ldi	r21, 0x41	; 65
    10e0:	6d 81       	ldd	r22, Y+5	; 0x05
    10e2:	7e 81       	ldd	r23, Y+6	; 0x06
    10e4:	8f 81       	ldd	r24, Y+7	; 0x07
    10e6:	98 85       	ldd	r25, Y+8	; 0x08
    10e8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9c 8f       	std	Y+28, r25	; 0x1c
    10fe:	8b 8f       	std	Y+27, r24	; 0x1b
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <LCD_displayChar+0x246>
    1102:	89 e1       	ldi	r24, 0x19	; 25
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9e 8f       	std	Y+30, r25	; 0x1e
    1108:	8d 8f       	std	Y+29, r24	; 0x1d
    110a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <LCD_displayChar+0x234>
    1112:	9e 8f       	std	Y+30, r25	; 0x1e
    1114:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	9c 8f       	std	Y+28, r25	; 0x1c
    111e:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1120:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1122:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1124:	89 2b       	or	r24, r25
    1126:	69 f7       	brne	.-38     	; 0x1102 <LCD_displayChar+0x228>
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <LCD_displayChar+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112a:	6f 89       	ldd	r22, Y+23	; 0x17
    112c:	78 8d       	ldd	r23, Y+24	; 0x18
    112e:	89 8d       	ldd	r24, Y+25	; 0x19
    1130:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1132:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9c 8f       	std	Y+28, r25	; 0x1c
    113c:	8b 8f       	std	Y+27, r24	; 0x1b
    113e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1142:	98 a3       	std	Y+32, r25	; 0x20
    1144:	8f 8f       	std	Y+31, r24	; 0x1f
    1146:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1148:	98 a1       	ldd	r25, Y+32	; 0x20
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <LCD_displayChar+0x270>
    114e:	98 a3       	std	Y+32, r25	; 0x20
    1150:	8f 8f       	std	Y+31, r24	; 0x1f
_delay_ms(TWO_MS);

/*    Write The LEAST significant bits of the command in the 4 bits of the LCD	*/

DIO_WritePin(LCD_D4,(Get_Bit(c,BIT0) >> BIT0));
    1152:	8b a5       	ldd	r24, Y+43	; 0x2b
    1154:	81 70       	andi	r24, 0x01	; 1
    1156:	68 2f       	mov	r22, r24
    1158:	84 e0       	ldi	r24, 0x04	; 4
    115a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D5,(Get_Bit(c,BIT1) >> BIT1));
    115e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	82 70       	andi	r24, 0x02	; 2
    1166:	99 27       	eor	r25, r25
    1168:	95 95       	asr	r25
    116a:	87 95       	ror	r24
    116c:	68 2f       	mov	r22, r24
    116e:	85 e0       	ldi	r24, 0x05	; 5
    1170:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D6,(Get_Bit(c,BIT2) >> BIT2));
    1174:	8b a5       	ldd	r24, Y+43	; 0x2b
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	84 70       	andi	r24, 0x04	; 4
    117c:	99 27       	eor	r25, r25
    117e:	95 95       	asr	r25
    1180:	87 95       	ror	r24
    1182:	95 95       	asr	r25
    1184:	87 95       	ror	r24
    1186:	68 2f       	mov	r22, r24
    1188:	86 e0       	ldi	r24, 0x06	; 6
    118a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(LCD_D7,(Get_Bit(c,BIT3) >> BIT3));
    118e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	88 70       	andi	r24, 0x08	; 8
    1196:	99 27       	eor	r25, r25
    1198:	95 95       	asr	r25
    119a:	87 95       	ror	r24
    119c:	95 95       	asr	r25
    119e:	87 95       	ror	r24
    11a0:	95 95       	asr	r25
    11a2:	87 95       	ror	r24
    11a4:	68 2f       	mov	r22, r24
    11a6:	87 e0       	ldi	r24, 0x07	; 7
    11a8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>


DIO_WritePin(LCD_EN,HIGH);
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	b0 e4       	ldi	r27, 0x40	; 64
    11bc:	89 87       	std	Y+9, r24	; 0x09
    11be:	9a 87       	std	Y+10, r25	; 0x0a
    11c0:	ab 87       	std	Y+11, r26	; 0x0b
    11c2:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	4a e7       	ldi	r20, 0x7A	; 122
    11ca:	53 e4       	ldi	r21, 0x43	; 67
    11cc:	69 85       	ldd	r22, Y+9	; 0x09
    11ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    11d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11d4:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	8d 87       	std	Y+13, r24	; 0x0d
    11de:	9e 87       	std	Y+14, r25	; 0x0e
    11e0:	af 87       	std	Y+15, r26	; 0x0f
    11e2:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    11ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    11f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f2:	98 89       	ldd	r25, Y+16	; 0x10
    11f4:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    11f8:	88 23       	and	r24, r24
    11fa:	2c f4       	brge	.+10     	; 0x1206 <LCD_displayChar+0x32c>
		__ticks = 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	9a 8b       	std	Y+18, r25	; 0x12
    1202:	89 8b       	std	Y+17, r24	; 0x11
    1204:	3f c0       	rjmp	.+126    	; 0x1284 <LCD_displayChar+0x3aa>
	else if (__tmp > 65535)
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	3f ef       	ldi	r19, 0xFF	; 255
    120a:	4f e7       	ldi	r20, 0x7F	; 127
    120c:	57 e4       	ldi	r21, 0x47	; 71
    120e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1210:	7e 85       	ldd	r23, Y+14	; 0x0e
    1212:	8f 85       	ldd	r24, Y+15	; 0x0f
    1214:	98 89       	ldd	r25, Y+16	; 0x10
    1216:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    121a:	18 16       	cp	r1, r24
    121c:	4c f5       	brge	.+82     	; 0x1270 <LCD_displayChar+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e2       	ldi	r20, 0x20	; 32
    1224:	51 e4       	ldi	r21, 0x41	; 65
    1226:	69 85       	ldd	r22, Y+9	; 0x09
    1228:	7a 85       	ldd	r23, Y+10	; 0x0a
    122a:	8b 85       	ldd	r24, Y+11	; 0x0b
    122c:	9c 85       	ldd	r25, Y+12	; 0x0c
    122e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9a 8b       	std	Y+18, r25	; 0x12
    1244:	89 8b       	std	Y+17, r24	; 0x11
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <LCD_displayChar+0x38c>
    1248:	89 e1       	ldi	r24, 0x19	; 25
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9c 8b       	std	Y+20, r25	; 0x14
    124e:	8b 8b       	std	Y+19, r24	; 0x13
    1250:	8b 89       	ldd	r24, Y+19	; 0x13
    1252:	9c 89       	ldd	r25, Y+20	; 0x14
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <LCD_displayChar+0x37a>
    1258:	9c 8b       	std	Y+20, r25	; 0x14
    125a:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125c:	89 89       	ldd	r24, Y+17	; 0x11
    125e:	9a 89       	ldd	r25, Y+18	; 0x12
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	9a 8b       	std	Y+18, r25	; 0x12
    1264:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1266:	89 89       	ldd	r24, Y+17	; 0x11
    1268:	9a 89       	ldd	r25, Y+18	; 0x12
    126a:	89 2b       	or	r24, r25
    126c:	69 f7       	brne	.-38     	; 0x1248 <LCD_displayChar+0x36e>
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <LCD_displayChar+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1270:	6d 85       	ldd	r22, Y+13	; 0x0d
    1272:	7e 85       	ldd	r23, Y+14	; 0x0e
    1274:	8f 85       	ldd	r24, Y+15	; 0x0f
    1276:	98 89       	ldd	r25, Y+16	; 0x10
    1278:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9a 8b       	std	Y+18, r25	; 0x12
    1282:	89 8b       	std	Y+17, r24	; 0x11
    1284:	89 89       	ldd	r24, Y+17	; 0x11
    1286:	9a 89       	ldd	r25, Y+18	; 0x12
    1288:	9e 8b       	std	Y+22, r25	; 0x16
    128a:	8d 8b       	std	Y+21, r24	; 0x15
    128c:	8d 89       	ldd	r24, Y+21	; 0x15
    128e:	9e 89       	ldd	r25, Y+22	; 0x16
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <LCD_displayChar+0x3b6>
    1294:	9e 8b       	std	Y+22, r25	; 0x16
    1296:	8d 8b       	std	Y+21, r24	; 0x15
_delay_ms(TWO_MS);
DIO_WritePin(LCD_EN,LOW);	
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
}	
    12a0:	00 00       	nop
    12a2:	ab 96       	adiw	r28, 0x2b	; 43
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <LCD_displayString>:
 *
 * Description: function to write a string on the LCD
 *
 *
 ********************************************************************************/
void LCD_displayString(uint8* kalam){
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <LCD_displayString+0x6>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
while(*kalam != (NULL_CHARACTER)){
    12c2:	0b c0       	rjmp	.+22     	; 0x12da <LCD_displayString+0x26>
LCD_displayChar(*kalam);
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	fc 01       	movw	r30, r24
    12ca:	80 81       	ld	r24, Z
    12cc:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
*kalam++;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
 * Description: function to write a string on the LCD
 *
 *
 ********************************************************************************/
void LCD_displayString(uint8* kalam){
while(*kalam != (NULL_CHARACTER)){
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	fc 01       	movw	r30, r24
    12e0:	80 81       	ld	r24, Z
    12e2:	88 23       	and	r24, r24
    12e4:	79 f7       	brne	.-34     	; 0x12c4 <LCD_displayString+0x10>
LCD_displayChar(*kalam);
*kalam++;
}
}
    12e6:	00 00       	nop
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <LCD_gotoRowColumn>:
 *
 * Description: function to go to a certain cell in the LCD by addressing it through rows and columns
 *
 *
 ********************************************************************************/
void LCD_gotoRowColumn(uint8 ROW, uint8 COL){
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <LCD_gotoRowColumn+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <LCD_gotoRowColumn+0x8>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    1300:	6c 83       	std	Y+4, r22	; 0x04
	
	if(ROW == FIRST_ROW)
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	79 f4       	brne	.+30     	; 0x1326 <LCD_gotoRowColumn+0x34>
	{
		LCD_sendCommand(CMD_CURSOR_TO_LINE1);
    1308:	80 e8       	ldi	r24, 0x80	; 128
    130a:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
		for (uint8 i = 0; i<COL;i++)
    130e:	19 82       	std	Y+1, r1	; 0x01
    1310:	06 c0       	rjmp	.+12     	; 0x131e <LCD_gotoRowColumn+0x2c>
		{
			LCD_sendCommand(CMD_SHIFT_CURSOR_RIGHT);
    1312:	84 e1       	ldi	r24, 0x14	; 20
    1314:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
void LCD_gotoRowColumn(uint8 ROW, uint8 COL){
	
	if(ROW == FIRST_ROW)
	{
		LCD_sendCommand(CMD_CURSOR_TO_LINE1);
		for (uint8 i = 0; i<COL;i++)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	99 81       	ldd	r25, Y+1	; 0x01
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	98 17       	cp	r25, r24
    1324:	b0 f3       	brcs	.-20     	; 0x1312 <LCD_gotoRowColumn+0x20>
		{
			LCD_sendCommand(CMD_SHIFT_CURSOR_RIGHT);
		}
	}
	if(ROW == SECOND_ROW){
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	79 f4       	brne	.+30     	; 0x134a <LCD_gotoRowColumn+0x58>
		LCD_sendCommand(CMD_CURSOR_TO_LINE2);
    132c:	80 ec       	ldi	r24, 0xC0	; 192
    132e:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
		for (uint8 i = 0; i<COL;i++)
    1332:	1a 82       	std	Y+2, r1	; 0x02
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <LCD_gotoRowColumn+0x50>
		{
		LCD_sendCommand(CMD_SHIFT_CURSOR_RIGHT);
    1336:	84 e1       	ldi	r24, 0x14	; 20
    1338:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
			LCD_sendCommand(CMD_SHIFT_CURSOR_RIGHT);
		}
	}
	if(ROW == SECOND_ROW){
		LCD_sendCommand(CMD_CURSOR_TO_LINE2);
		for (uint8 i = 0; i<COL;i++)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	98 17       	cp	r25, r24
    1348:	b0 f3       	brcs	.-20     	; 0x1336 <LCD_gotoRowColumn+0x44>
		{
		LCD_sendCommand(CMD_SHIFT_CURSOR_RIGHT);
		}
	}	
	
}
    134a:	00 00       	nop
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <LCD_displayStringRowColumn>:
 *
 * Description: function to go to a certain cell in the LCD by addressing it through rows and columns and print a string starting
 *	from that cell
 *
 ********************************************************************************/
void LCD_displayStringRowColumn(uint8 ROW, uint8 COL, uint8* kalam){
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	00 d0       	rcall	.+0      	; 0x1360 <LCD_displayStringRowColumn+0x6>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <LCD_displayStringRowColumn+0x8>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	6a 83       	std	Y+2, r22	; 0x02
    136a:	5c 83       	std	Y+4, r21	; 0x04
    136c:	4b 83       	std	Y+3, r20	; 0x03
	
	LCD_gotoRowColumn(ROW,COL);
    136e:	6a 81       	ldd	r22, Y+2	; 0x02
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	0e 94 79 09 	call	0x12f2	; 0x12f2 <LCD_gotoRowColumn>
	while(*kalam != (NULL_CHARACTER)){
    1376:	0b c0       	rjmp	.+22     	; 0x138e <LCD_displayStringRowColumn+0x34>
		LCD_displayChar(*kalam);
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	fc 01       	movw	r30, r24
    137e:	80 81       	ld	r24, Z
    1380:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
		*kalam++;
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	8b 83       	std	Y+3, r24	; 0x03
 *
 ********************************************************************************/
void LCD_displayStringRowColumn(uint8 ROW, uint8 COL, uint8* kalam){
	
	LCD_gotoRowColumn(ROW,COL);
	while(*kalam != (NULL_CHARACTER)){
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	fc 01       	movw	r30, r24
    1394:	80 81       	ld	r24, Z
    1396:	88 23       	and	r24, r24
    1398:	79 f7       	brne	.-34     	; 0x1378 <LCD_displayStringRowColumn+0x1e>
		LCD_displayChar(*kalam);
		*kalam++;
	}
}
    139a:	00 00       	nop
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <LCD_clear>:
 * @return: void
 *
 * Description: function to clear the lcd display
 *
 ********************************************************************************/
void LCD_clear(){
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	2e 97       	sbiw	r28, 0x0e	; 14
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(CMD_RESET);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a0 e0       	ldi	r26, 0x00	; 0
    13ca:	b0 e4       	ldi	r27, 0x40	; 64
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	ab 83       	std	Y+3, r26	; 0x03
    13d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	4a e7       	ldi	r20, 0x7A	; 122
    13da:	53 e4       	ldi	r21, 0x43	; 67
    13dc:	69 81       	ldd	r22, Y+1	; 0x01
    13de:	7a 81       	ldd	r23, Y+2	; 0x02
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	af 83       	std	Y+7, r26	; 0x07
    13f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e8       	ldi	r20, 0x80	; 128
    13fa:	5f e3       	ldi	r21, 0x3F	; 63
    13fc:	6d 81       	ldd	r22, Y+5	; 0x05
    13fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	98 85       	ldd	r25, Y+8	; 0x08
    1404:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    1408:	88 23       	and	r24, r24
    140a:	2c f4       	brge	.+10     	; 0x1416 <LCD_clear+0x6c>
		__ticks = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9a 87       	std	Y+10, r25	; 0x0a
    1412:	89 87       	std	Y+9, r24	; 0x09
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <LCD_clear+0xea>
	else if (__tmp > 65535)
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	57 e4       	ldi	r21, 0x47	; 71
    141e:	6d 81       	ldd	r22, Y+5	; 0x05
    1420:	7e 81       	ldd	r23, Y+6	; 0x06
    1422:	8f 81       	ldd	r24, Y+7	; 0x07
    1424:	98 85       	ldd	r25, Y+8	; 0x08
    1426:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    142a:	18 16       	cp	r1, r24
    142c:	4c f5       	brge	.+82     	; 0x1480 <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	69 81       	ldd	r22, Y+1	; 0x01
    1438:	7a 81       	ldd	r23, Y+2	; 0x02
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9a 87       	std	Y+10, r25	; 0x0a
    1454:	89 87       	std	Y+9, r24	; 0x09
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <LCD_clear+0xcc>
    1458:	89 e1       	ldi	r24, 0x19	; 25
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9c 87       	std	Y+12, r25	; 0x0c
    145e:	8b 87       	std	Y+11, r24	; 0x0b
    1460:	8b 85       	ldd	r24, Y+11	; 0x0b
    1462:	9c 85       	ldd	r25, Y+12	; 0x0c
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <LCD_clear+0xba>
    1468:	9c 87       	std	Y+12, r25	; 0x0c
    146a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9a 87       	std	Y+10, r25	; 0x0a
    1474:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	89 2b       	or	r24, r25
    147c:	69 f7       	brne	.-38     	; 0x1458 <LCD_clear+0xae>
	_delay_ms(TWO_MS);
}
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	6d 81       	ldd	r22, Y+5	; 0x05
    1482:	7e 81       	ldd	r23, Y+6	; 0x06
    1484:	8f 81       	ldd	r24, Y+7	; 0x07
    1486:	98 85       	ldd	r25, Y+8	; 0x08
    1488:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9a 87       	std	Y+10, r25	; 0x0a
    1492:	89 87       	std	Y+9, r24	; 0x09
    1494:	89 85       	ldd	r24, Y+9	; 0x09
    1496:	9a 85       	ldd	r25, Y+10	; 0x0a
    1498:	9e 87       	std	Y+14, r25	; 0x0e
    149a:	8d 87       	std	Y+13, r24	; 0x0d
    149c:	8d 85       	ldd	r24, Y+13	; 0x0d
    149e:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <LCD_clear+0xf6>
    14a4:	9e 87       	std	Y+14, r25	; 0x0e
    14a6:	8d 87       	std	Y+13, r24	; 0x0d
    14a8:	00 00       	nop
    14aa:	2e 96       	adiw	r28, 0x0e	; 14
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <LCD_AllowSpecialCharacters>:
 * @return: void
 *
 * Description: function that writes special characters to to LCD CGRAM
 *
 ********************************************************************************/
void LCD_AllowSpecialCharacters(){
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	a4 97       	sbiw	r28, 0x24	; 36
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
	
	uint8 SadEmoji[8] = {0, 0, 27, 0, 0, 31, 17, 17};
    14d0:	88 e0       	ldi	r24, 0x08	; 8
    14d2:	e2 ec       	ldi	r30, 0xC2	; 194
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	de 01       	movw	r26, r28
    14d8:	15 96       	adiw	r26, 0x05	; 5
    14da:	01 90       	ld	r0, Z+
    14dc:	0d 92       	st	X+, r0
    14de:	8a 95       	dec	r24
    14e0:	e1 f7       	brne	.-8      	; 0x14da <LCD_AllowSpecialCharacters+0x1e>
	uint8 HappyEmoji[8]={0, 0, 27, 0, 0, 17, 31, 0};
    14e2:	88 e0       	ldi	r24, 0x08	; 8
    14e4:	ea ec       	ldi	r30, 0xCA	; 202
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	de 01       	movw	r26, r28
    14ea:	1d 96       	adiw	r26, 0x0d	; 13
    14ec:	01 90       	ld	r0, Z+
    14ee:	0d 92       	st	X+, r0
    14f0:	8a 95       	dec	r24
    14f2:	e1 f7       	brne	.-8      	; 0x14ec <LCD_AllowSpecialCharacters+0x30>
	uint8 Left_Heart[8]={0, 6, 15, 31, 30, 28, 24, 16};
    14f4:	88 e0       	ldi	r24, 0x08	; 8
    14f6:	e2 ed       	ldi	r30, 0xD2	; 210
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	de 01       	movw	r26, r28
    14fc:	55 96       	adiw	r26, 0x15	; 21
    14fe:	01 90       	ld	r0, Z+
    1500:	0d 92       	st	X+, r0
    1502:	8a 95       	dec	r24
    1504:	e1 f7       	brne	.-8      	; 0x14fe <LCD_AllowSpecialCharacters+0x42>
	uint8 Right_Heart[8]={0, 12, 30, 31, 15, 7, 3, 1};
    1506:	88 e0       	ldi	r24, 0x08	; 8
    1508:	ea ed       	ldi	r30, 0xDA	; 218
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	de 01       	movw	r26, r28
    150e:	5d 96       	adiw	r26, 0x1d	; 29
    1510:	01 90       	ld	r0, Z+
    1512:	0d 92       	st	X+, r0
    1514:	8a 95       	dec	r24
    1516:	e1 f7       	brne	.-8      	; 0x1510 <LCD_AllowSpecialCharacters+0x54>
	
	LCD_sendCommand(CMD_FIRST_ALLOWED_ADDRESS_IN_CGRAM);
    1518:	80 e4       	ldi	r24, 0x40	; 64
    151a:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
	
	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
    151e:	19 82       	std	Y+1, r1	; 0x01
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <LCD_AllowSpecialCharacters+0x84>
	{
	LCD_displayChar(SadEmoji[i]);
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9e 01       	movw	r18, r28
    152a:	2b 5f       	subi	r18, 0xFB	; 251
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	fc 01       	movw	r30, r24
    1534:	80 81       	ld	r24, Z
    1536:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
	uint8 Left_Heart[8]={0, 6, 15, 31, 30, 28, 24, 16};
	uint8 Right_Heart[8]={0, 12, 30, 31, 15, 7, 3, 1};
	
	LCD_sendCommand(CMD_FIRST_ALLOWED_ADDRESS_IN_CGRAM);
	
	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	87 30       	cpi	r24, 0x07	; 7
    1544:	70 f3       	brcs	.-36     	; 0x1522 <LCD_AllowSpecialCharacters+0x66>
	{
	LCD_displayChar(SadEmoji[i]);
	}
	
	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
    1546:	1a 82       	std	Y+2, r1	; 0x02
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <LCD_AllowSpecialCharacters+0xac>
	{
	LCD_displayChar(HappyEmoji[i]);
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9e 01       	movw	r18, r28
    1552:	23 5f       	subi	r18, 0xF3	; 243
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	82 0f       	add	r24, r18
    1558:	93 1f       	adc	r25, r19
    155a:	fc 01       	movw	r30, r24
    155c:	80 81       	ld	r24, Z
    155e:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
	{
	LCD_displayChar(SadEmoji[i]);
	}
	
	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	8f 5f       	subi	r24, 0xFF	; 255
    1566:	8a 83       	std	Y+2, r24	; 0x02
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	87 30       	cpi	r24, 0x07	; 7
    156c:	70 f3       	brcs	.-36     	; 0x154a <LCD_AllowSpecialCharacters+0x8e>
	{
	LCD_displayChar(HappyEmoji[i]);
	}

	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
    156e:	1b 82       	std	Y+3, r1	; 0x03
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <LCD_AllowSpecialCharacters+0xd4>
	{
		LCD_displayChar(Left_Heart[i]);
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9e 01       	movw	r18, r28
    157a:	2b 5e       	subi	r18, 0xEB	; 235
    157c:	3f 4f       	sbci	r19, 0xFF	; 255
    157e:	82 0f       	add	r24, r18
    1580:	93 1f       	adc	r25, r19
    1582:	fc 01       	movw	r30, r24
    1584:	80 81       	ld	r24, Z
    1586:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
	{
	LCD_displayChar(HappyEmoji[i]);
	}

	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	87 30       	cpi	r24, 0x07	; 7
    1594:	70 f3       	brcs	.-36     	; 0x1572 <LCD_AllowSpecialCharacters+0xb6>
	{
		LCD_displayChar(Left_Heart[i]);
	}
	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
    1596:	1c 82       	std	Y+4, r1	; 0x04
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <LCD_AllowSpecialCharacters+0xfc>
	{
		LCD_displayChar(Right_Heart[i]);
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9e 01       	movw	r18, r28
    15a2:	23 5e       	subi	r18, 0xE3	; 227
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	82 0f       	add	r24, r18
    15a8:	93 1f       	adc	r25, r19
    15aa:	fc 01       	movw	r30, r24
    15ac:	80 81       	ld	r24, Z
    15ae:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>

	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
	{
		LCD_displayChar(Left_Heart[i]);
	}
	for(uint8 i=0 ; i<BYTE_minus1 ;i++)
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	8c 83       	std	Y+4, r24	; 0x04
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	87 30       	cpi	r24, 0x07	; 7
    15bc:	70 f3       	brcs	.-36     	; 0x159a <LCD_AllowSpecialCharacters+0xde>
	{
		LCD_displayChar(Right_Heart[i]);
	}
	LCD_sendCommand(CMD_END_ALLOWED_ADDRESS_IN_CGRAM);
    15be:	80 e8       	ldi	r24, 0x80	; 128
    15c0:	0e 94 80 05 	call	0xb00	; 0xb00 <LCD_sendCommand>
    15c4:	00 00       	nop
    15c6:	a4 96       	adiw	r28, 0x24	; 36
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <main>:

# define F_CPU 16000000UL


int main(void)
{
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	1f 92       	push	r1
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
	
	LCD_init();
    15e2:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_init>
	BTN_init();
    15e6:	0e 94 4b 11 	call	0x2296	; 0x2296 <BTN_init>
	LCD_AllowSpecialCharacters();
    15ea:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LCD_AllowSpecialCharacters>
	
	while(1){
		
		WelcomeMessage();
    15ee:	0e 94 17 0b 	call	0x162e	; 0x162e <WelcomeMessage>
		GenerateQuestion();
    15f2:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <GenerateQuestion>
		
		uint8 i = Again();
    15f6:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Again>
    15fa:	89 83       	std	Y+1, r24	; 0x01
		
		if(i==0)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	88 23       	and	r24, r24
    1600:	09 f0       	breq	.+2      	; 0x1604 <main+0x2c>
		break;
	}
    1602:	f5 cf       	rjmp	.-22     	; 0x15ee <main+0x16>
		GenerateQuestion();
		
		uint8 i = Again();
		
		if(i==0)
		break;
    1604:	00 00       	nop
	}
	LCD_clear();
    1606:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_clear>
	LCD_gotoRowColumn(1,2);
    160a:	62 e0       	ldi	r22, 0x02	; 2
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <LCD_gotoRowColumn>
	LCD_displayString("Thank You");
    1612:	82 ee       	ldi	r24, 0xE2	; 226
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_displayString>
	DIO_WritePin(LCD_EN,LOW);
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
}
    1626:	0f 90       	pop	r0
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <WelcomeMessage>:


uint8 *ptr_Questions[5] = {Question1,Question2,Question3,Question4,Question5};
uint8 Model_Answer[]= { NO, YES, YES, NO, NO};

void WelcomeMessage(void){
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	ce 57       	subi	r28, 0x7E	; 126
    163c:	d1 09       	sbc	r29, r1
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61

LCD_clear();
    1648:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_clear>
	
	LCD_displayStringRowColumn(ROW1,COL4,"WELCOME !");
    164c:	4c ee       	ldi	r20, 0xEC	; 236
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	64 e0       	ldi	r22, 0x04	; 4
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_displayStringRowColumn>
DIO_SetPinDirection(BUZZER_PIN,OUTPUT);
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	8b e0       	ldi	r24, 0x0B	; 11
    165c:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
DIO_SetPinDirection(LED0,OUTPUT);
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	8c e0       	ldi	r24, 0x0C	; 12
    1664:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
DIO_SetPinDirection(LED1,OUTPUT);
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	8d e0       	ldi	r24, 0x0D	; 13
    166c:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
DIO_SetPinDirection(LED2,OUTPUT);
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	8e e0       	ldi	r24, 0x0E	; 14
    1674:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
DIO_SetPinDirection(LED3,OUTPUT);	
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	8f e0       	ldi	r24, 0x0F	; 15
    167c:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>

DIO_WritePin(LED0,HIGH);
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	8c e0       	ldi	r24, 0x0C	; 12
    1684:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	aa e7       	ldi	r26, 0x7A	; 122
    168e:	b4 e4       	ldi	r27, 0x44	; 68
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	ab 83       	std	Y+3, r26	; 0x03
    1696:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1698:	8e 01       	movw	r16, r28
    169a:	0b 58       	subi	r16, 0x8B	; 139
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a e7       	ldi	r20, 0x7A	; 122
    16a4:	53 e4       	ldi	r21, 0x43	; 67
    16a6:	69 81       	ldd	r22, Y+1	; 0x01
    16a8:	7a 81       	ldd	r23, Y+2	; 0x02
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 83       	st	Z, r24
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	a2 83       	std	Z+2, r26	; 0x02
    16be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c0:	ce 01       	movw	r24, r28
    16c2:	8b 58       	subi	r24, 0x8B	; 139
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	fc 01       	movw	r30, r24
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    16dc:	88 23       	and	r24, r24
    16de:	4c f4       	brge	.+18     	; 0x16f2 <WelcomeMessage+0xc4>
		__ticks = 1;
    16e0:	ce 01       	movw	r24, r28
    16e2:	87 58       	subi	r24, 0x87	; 135
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	21 e0       	ldi	r18, 0x01	; 1
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	fc 01       	movw	r30, r24
    16ec:	31 83       	std	Z+1, r19	; 0x01
    16ee:	20 83       	st	Z, r18
    16f0:	69 c0       	rjmp	.+210    	; 0x17c4 <WelcomeMessage+0x196>
	else if (__tmp > 65535)
    16f2:	ce 01       	movw	r24, r28
    16f4:	8b 58       	subi	r24, 0x8B	; 139
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	fc 01       	movw	r30, r24
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    170e:	18 16       	cp	r1, r24
    1710:	0c f0       	brlt	.+2      	; 0x1714 <WelcomeMessage+0xe6>
    1712:	46 c0       	rjmp	.+140    	; 0x17a0 <WelcomeMessage+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	69 81       	ldd	r22, Y+1	; 0x01
    171e:	7a 81       	ldd	r23, Y+2	; 0x02
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8e 01       	movw	r16, r28
    172e:	07 58       	subi	r16, 0x87	; 135
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	f8 01       	movw	r30, r16
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    1744:	24 c0       	rjmp	.+72     	; 0x178e <WelcomeMessage+0x160>
    1746:	ce 01       	movw	r24, r28
    1748:	85 58       	subi	r24, 0x85	; 133
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	29 e1       	ldi	r18, 0x19	; 25
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	31 83       	std	Z+1, r19	; 0x01
    1754:	20 83       	st	Z, r18
    1756:	ce 01       	movw	r24, r28
    1758:	85 58       	subi	r24, 0x85	; 133
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	fc 01       	movw	r30, r24
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <WelcomeMessage+0x134>
    1766:	9e 01       	movw	r18, r28
    1768:	25 58       	subi	r18, 0x85	; 133
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	f9 01       	movw	r30, r18
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	ce 01       	movw	r24, r28
    1774:	87 58       	subi	r24, 0x87	; 135
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	9e 01       	movw	r18, r28
    177a:	27 58       	subi	r18, 0x87	; 135
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	f9 01       	movw	r30, r18
    1780:	20 81       	ld	r18, Z
    1782:	31 81       	ldd	r19, Z+1	; 0x01
    1784:	21 50       	subi	r18, 0x01	; 1
    1786:	31 09       	sbc	r19, r1
    1788:	fc 01       	movw	r30, r24
    178a:	31 83       	std	Z+1, r19	; 0x01
    178c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	ce 01       	movw	r24, r28
    1790:	87 58       	subi	r24, 0x87	; 135
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	fc 01       	movw	r30, r24
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	89 2b       	or	r24, r25
    179c:	a1 f6       	brne	.-88     	; 0x1746 <WelcomeMessage+0x118>
    179e:	2c c0       	rjmp	.+88     	; 0x17f8 <WelcomeMessage+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	8e 01       	movw	r16, r28
    17a2:	07 58       	subi	r16, 0x87	; 135
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	ce 01       	movw	r24, r28
    17a8:	8b 58       	subi	r24, 0x8B	; 139
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	fc 01       	movw	r30, r24
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	f8 01       	movw	r30, r16
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	ce 01       	movw	r24, r28
    17c6:	83 58       	subi	r24, 0x83	; 131
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	9e 01       	movw	r18, r28
    17cc:	27 58       	subi	r18, 0x87	; 135
    17ce:	3f 4f       	sbci	r19, 0xFF	; 255
    17d0:	f9 01       	movw	r30, r18
    17d2:	20 81       	ld	r18, Z
    17d4:	31 81       	ldd	r19, Z+1	; 0x01
    17d6:	fc 01       	movw	r30, r24
    17d8:	31 83       	std	Z+1, r19	; 0x01
    17da:	20 83       	st	Z, r18
    17dc:	ce 01       	movw	r24, r28
    17de:	83 58       	subi	r24, 0x83	; 131
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	fc 01       	movw	r30, r24
    17e4:	80 81       	ld	r24, Z
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <WelcomeMessage+0x1ba>
    17ec:	9e 01       	movw	r18, r28
    17ee:	23 58       	subi	r18, 0x83	; 131
    17f0:	3f 4f       	sbci	r19, 0xFF	; 255
    17f2:	f9 01       	movw	r30, r18
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24
_delay_ms(HALF_SECOND);
DIO_WritePin(LED0,LOW);
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	8c e0       	ldi	r24, 0x0C	; 12
    17fc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(BUZZER_PIN,HIGH);
    1800:	61 e0       	ldi	r22, 0x01	; 1
    1802:	8b e0       	ldi	r24, 0x0B	; 11
    1804:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	aa e7       	ldi	r26, 0x7A	; 122
    180e:	b4 e4       	ldi	r27, 0x44	; 68
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	af 83       	std	Y+7, r26	; 0x07
    1816:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1818:	8e 01       	movw	r16, r28
    181a:	05 59       	subi	r16, 0x95	; 149
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	4a e7       	ldi	r20, 0x7A	; 122
    1824:	53 e4       	ldi	r21, 0x43	; 67
    1826:	6d 81       	ldd	r22, Y+5	; 0x05
    1828:	7e 81       	ldd	r23, Y+6	; 0x06
    182a:	8f 81       	ldd	r24, Y+7	; 0x07
    182c:	98 85       	ldd	r25, Y+8	; 0x08
    182e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	f8 01       	movw	r30, r16
    1838:	80 83       	st	Z, r24
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	a2 83       	std	Z+2, r26	; 0x02
    183e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1840:	ce 01       	movw	r24, r28
    1842:	85 59       	subi	r24, 0x95	; 149
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	fc 01       	movw	r30, r24
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    185c:	88 23       	and	r24, r24
    185e:	4c f4       	brge	.+18     	; 0x1872 <WelcomeMessage+0x244>
		__ticks = 1;
    1860:	ce 01       	movw	r24, r28
    1862:	81 59       	subi	r24, 0x91	; 145
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	fc 01       	movw	r30, r24
    186c:	31 83       	std	Z+1, r19	; 0x01
    186e:	20 83       	st	Z, r18
    1870:	69 c0       	rjmp	.+210    	; 0x1944 <WelcomeMessage+0x316>
	else if (__tmp > 65535)
    1872:	ce 01       	movw	r24, r28
    1874:	85 59       	subi	r24, 0x95	; 149
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	fc 01       	movw	r30, r24
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    188e:	18 16       	cp	r1, r24
    1890:	0c f0       	brlt	.+2      	; 0x1894 <WelcomeMessage+0x266>
    1892:	46 c0       	rjmp	.+140    	; 0x1920 <WelcomeMessage+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	6d 81       	ldd	r22, Y+5	; 0x05
    189e:	7e 81       	ldd	r23, Y+6	; 0x06
    18a0:	8f 81       	ldd	r24, Y+7	; 0x07
    18a2:	98 85       	ldd	r25, Y+8	; 0x08
    18a4:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	8e 01       	movw	r16, r28
    18ae:	01 59       	subi	r16, 0x91	; 145
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	f8 01       	movw	r30, r16
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	24 c0       	rjmp	.+72     	; 0x190e <WelcomeMessage+0x2e0>
    18c6:	ce 01       	movw	r24, r28
    18c8:	8f 58       	subi	r24, 0x8F	; 143
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	29 e1       	ldi	r18, 0x19	; 25
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	fc 01       	movw	r30, r24
    18d2:	31 83       	std	Z+1, r19	; 0x01
    18d4:	20 83       	st	Z, r18
    18d6:	ce 01       	movw	r24, r28
    18d8:	8f 58       	subi	r24, 0x8F	; 143
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	fc 01       	movw	r30, r24
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <WelcomeMessage+0x2b4>
    18e6:	9e 01       	movw	r18, r28
    18e8:	2f 58       	subi	r18, 0x8F	; 143
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	f9 01       	movw	r30, r18
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f2:	ce 01       	movw	r24, r28
    18f4:	81 59       	subi	r24, 0x91	; 145
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	9e 01       	movw	r18, r28
    18fa:	21 59       	subi	r18, 0x91	; 145
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	f9 01       	movw	r30, r18
    1900:	20 81       	ld	r18, Z
    1902:	31 81       	ldd	r19, Z+1	; 0x01
    1904:	21 50       	subi	r18, 0x01	; 1
    1906:	31 09       	sbc	r19, r1
    1908:	fc 01       	movw	r30, r24
    190a:	31 83       	std	Z+1, r19	; 0x01
    190c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	ce 01       	movw	r24, r28
    1910:	81 59       	subi	r24, 0x91	; 145
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	fc 01       	movw	r30, r24
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	89 2b       	or	r24, r25
    191c:	a1 f6       	brne	.-88     	; 0x18c6 <WelcomeMessage+0x298>
    191e:	2c c0       	rjmp	.+88     	; 0x1978 <WelcomeMessage+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1920:	8e 01       	movw	r16, r28
    1922:	01 59       	subi	r16, 0x91	; 145
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	ce 01       	movw	r24, r28
    1928:	85 59       	subi	r24, 0x95	; 149
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	fc 01       	movw	r30, r24
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f8 01       	movw	r30, r16
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
    1944:	ce 01       	movw	r24, r28
    1946:	8d 58       	subi	r24, 0x8D	; 141
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	9e 01       	movw	r18, r28
    194c:	21 59       	subi	r18, 0x91	; 145
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	f9 01       	movw	r30, r18
    1952:	20 81       	ld	r18, Z
    1954:	31 81       	ldd	r19, Z+1	; 0x01
    1956:	fc 01       	movw	r30, r24
    1958:	31 83       	std	Z+1, r19	; 0x01
    195a:	20 83       	st	Z, r18
    195c:	ce 01       	movw	r24, r28
    195e:	8d 58       	subi	r24, 0x8D	; 141
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	fc 01       	movw	r30, r24
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <WelcomeMessage+0x33a>
    196c:	9e 01       	movw	r18, r28
    196e:	2d 58       	subi	r18, 0x8D	; 141
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	f9 01       	movw	r30, r18
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
_delay_ms(HALF_SECOND);
DIO_WritePin(BUZZER_PIN,LOW);
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	8b e0       	ldi	r24, 0x0B	; 11
    197c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	aa e7       	ldi	r26, 0x7A	; 122
    1986:	b4 e4       	ldi	r27, 0x44	; 68
    1988:	89 87       	std	Y+9, r24	; 0x09
    198a:	9a 87       	std	Y+10, r25	; 0x0a
    198c:	ab 87       	std	Y+11, r26	; 0x0b
    198e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1990:	8e 01       	movw	r16, r28
    1992:	0f 59       	subi	r16, 0x9F	; 159
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	53 e4       	ldi	r21, 0x43	; 67
    199e:	69 85       	ldd	r22, Y+9	; 0x09
    19a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    19a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    19a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    19a6:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	f8 01       	movw	r30, r16
    19b0:	80 83       	st	Z, r24
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	a2 83       	std	Z+2, r26	; 0x02
    19b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b8:	ce 01       	movw	r24, r28
    19ba:	8f 59       	subi	r24, 0x9F	; 159
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	fc 01       	movw	r30, r24
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	4c f4       	brge	.+18     	; 0x19ea <WelcomeMessage+0x3bc>
		__ticks = 1;
    19d8:	ce 01       	movw	r24, r28
    19da:	8b 59       	subi	r24, 0x9B	; 155
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	21 e0       	ldi	r18, 0x01	; 1
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	fc 01       	movw	r30, r24
    19e4:	31 83       	std	Z+1, r19	; 0x01
    19e6:	20 83       	st	Z, r18
    19e8:	69 c0       	rjmp	.+210    	; 0x1abc <WelcomeMessage+0x48e>
	else if (__tmp > 65535)
    19ea:	ce 01       	movw	r24, r28
    19ec:	8f 59       	subi	r24, 0x9F	; 159
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	3f ef       	ldi	r19, 0xFF	; 255
    19f4:	4f e7       	ldi	r20, 0x7F	; 127
    19f6:	57 e4       	ldi	r21, 0x47	; 71
    19f8:	fc 01       	movw	r30, r24
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	0c f0       	brlt	.+2      	; 0x1a0c <WelcomeMessage+0x3de>
    1a0a:	46 c0       	rjmp	.+140    	; 0x1a98 <WelcomeMessage+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	69 85       	ldd	r22, Y+9	; 0x09
    1a16:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a1c:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8e 01       	movw	r16, r28
    1a26:	0b 59       	subi	r16, 0x9B	; 155
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	f8 01       	movw	r30, r16
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	24 c0       	rjmp	.+72     	; 0x1a86 <WelcomeMessage+0x458>
    1a3e:	ce 01       	movw	r24, r28
    1a40:	89 59       	subi	r24, 0x99	; 153
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	29 e1       	ldi	r18, 0x19	; 25
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	fc 01       	movw	r30, r24
    1a4a:	31 83       	std	Z+1, r19	; 0x01
    1a4c:	20 83       	st	Z, r18
    1a4e:	ce 01       	movw	r24, r28
    1a50:	89 59       	subi	r24, 0x99	; 153
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	fc 01       	movw	r30, r24
    1a56:	80 81       	ld	r24, Z
    1a58:	91 81       	ldd	r25, Z+1	; 0x01
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <WelcomeMessage+0x42c>
    1a5e:	9e 01       	movw	r18, r28
    1a60:	29 59       	subi	r18, 0x99	; 153
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	f9 01       	movw	r30, r18
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	8b 59       	subi	r24, 0x9B	; 155
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	9e 01       	movw	r18, r28
    1a72:	2b 59       	subi	r18, 0x9B	; 155
    1a74:	3f 4f       	sbci	r19, 0xFF	; 255
    1a76:	f9 01       	movw	r30, r18
    1a78:	20 81       	ld	r18, Z
    1a7a:	31 81       	ldd	r19, Z+1	; 0x01
    1a7c:	21 50       	subi	r18, 0x01	; 1
    1a7e:	31 09       	sbc	r19, r1
    1a80:	fc 01       	movw	r30, r24
    1a82:	31 83       	std	Z+1, r19	; 0x01
    1a84:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	ce 01       	movw	r24, r28
    1a88:	8b 59       	subi	r24, 0x9B	; 155
    1a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	89 2b       	or	r24, r25
    1a94:	a1 f6       	brne	.-88     	; 0x1a3e <WelcomeMessage+0x410>
    1a96:	2c c0       	rjmp	.+88     	; 0x1af0 <WelcomeMessage+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	0b 59       	subi	r16, 0x9B	; 155
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	8f 59       	subi	r24, 0x9F	; 159
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	60 81       	ld	r22, Z
    1aa8:	71 81       	ldd	r23, Z+1	; 0x01
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	93 81       	ldd	r25, Z+3	; 0x03
    1aae:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	80 83       	st	Z, r24
    1abc:	ce 01       	movw	r24, r28
    1abe:	87 59       	subi	r24, 0x97	; 151
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	9e 01       	movw	r18, r28
    1ac4:	2b 59       	subi	r18, 0x9B	; 155
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	f9 01       	movw	r30, r18
    1aca:	20 81       	ld	r18, Z
    1acc:	31 81       	ldd	r19, Z+1	; 0x01
    1ace:	fc 01       	movw	r30, r24
    1ad0:	31 83       	std	Z+1, r19	; 0x01
    1ad2:	20 83       	st	Z, r18
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	87 59       	subi	r24, 0x97	; 151
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	fc 01       	movw	r30, r24
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <WelcomeMessage+0x4b2>
    1ae4:	9e 01       	movw	r18, r28
    1ae6:	27 59       	subi	r18, 0x97	; 151
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	f9 01       	movw	r30, r18
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
_delay_ms(HALF_SECOND);

DIO_WritePin(LED1,HIGH);
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	8d e0       	ldi	r24, 0x0D	; 13
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	aa e7       	ldi	r26, 0x7A	; 122
    1afe:	b4 e4       	ldi	r27, 0x44	; 68
    1b00:	8d 87       	std	Y+13, r24	; 0x0d
    1b02:	9e 87       	std	Y+14, r25	; 0x0e
    1b04:	af 87       	std	Y+15, r26	; 0x0f
    1b06:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	8e 01       	movw	r16, r28
    1b0a:	09 5a       	subi	r16, 0xA9	; 169
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a e7       	ldi	r20, 0x7A	; 122
    1b14:	53 e4       	ldi	r21, 0x43	; 67
    1b16:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b18:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1c:	98 89       	ldd	r25, Y+16	; 0x10
    1b1e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	f8 01       	movw	r30, r16
    1b28:	80 83       	st	Z, r24
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	a2 83       	std	Z+2, r26	; 0x02
    1b2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b30:	ce 01       	movw	r24, r28
    1b32:	89 5a       	subi	r24, 0xA9	; 169
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	fc 01       	movw	r30, r24
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	4c f4       	brge	.+18     	; 0x1b62 <WelcomeMessage+0x534>
		__ticks = 1;
    1b50:	ce 01       	movw	r24, r28
    1b52:	85 5a       	subi	r24, 0xA5	; 165
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	21 e0       	ldi	r18, 0x01	; 1
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	31 83       	std	Z+1, r19	; 0x01
    1b5e:	20 83       	st	Z, r18
    1b60:	69 c0       	rjmp	.+210    	; 0x1c34 <WelcomeMessage+0x606>
	else if (__tmp > 65535)
    1b62:	ce 01       	movw	r24, r28
    1b64:	89 5a       	subi	r24, 0xA9	; 169
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	fc 01       	movw	r30, r24
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	0c f0       	brlt	.+2      	; 0x1b84 <WelcomeMessage+0x556>
    1b82:	46 c0       	rjmp	.+140    	; 0x1c10 <WelcomeMessage+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b8e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	98 89       	ldd	r25, Y+16	; 0x10
    1b94:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8e 01       	movw	r16, r28
    1b9e:	05 5a       	subi	r16, 0xA5	; 165
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	f8 01       	movw	r30, r16
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
    1bb4:	24 c0       	rjmp	.+72     	; 0x1bfe <WelcomeMessage+0x5d0>
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	83 5a       	subi	r24, 0xA3	; 163
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	29 e1       	ldi	r18, 0x19	; 25
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	31 83       	std	Z+1, r19	; 0x01
    1bc4:	20 83       	st	Z, r18
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	83 5a       	subi	r24, 0xA3	; 163
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	fc 01       	movw	r30, r24
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <WelcomeMessage+0x5a4>
    1bd6:	9e 01       	movw	r18, r28
    1bd8:	23 5a       	subi	r18, 0xA3	; 163
    1bda:	3f 4f       	sbci	r19, 0xFF	; 255
    1bdc:	f9 01       	movw	r30, r18
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	ce 01       	movw	r24, r28
    1be4:	85 5a       	subi	r24, 0xA5	; 165
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	9e 01       	movw	r18, r28
    1bea:	25 5a       	subi	r18, 0xA5	; 165
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	f9 01       	movw	r30, r18
    1bf0:	20 81       	ld	r18, Z
    1bf2:	31 81       	ldd	r19, Z+1	; 0x01
    1bf4:	21 50       	subi	r18, 0x01	; 1
    1bf6:	31 09       	sbc	r19, r1
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	31 83       	std	Z+1, r19	; 0x01
    1bfc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	ce 01       	movw	r24, r28
    1c00:	85 5a       	subi	r24, 0xA5	; 165
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	fc 01       	movw	r30, r24
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	89 2b       	or	r24, r25
    1c0c:	a1 f6       	brne	.-88     	; 0x1bb6 <WelcomeMessage+0x588>
    1c0e:	2c c0       	rjmp	.+88     	; 0x1c68 <WelcomeMessage+0x63a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	8e 01       	movw	r16, r28
    1c12:	05 5a       	subi	r16, 0xA5	; 165
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	ce 01       	movw	r24, r28
    1c18:	89 5a       	subi	r24, 0xA9	; 169
    1c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	ce 01       	movw	r24, r28
    1c36:	81 5a       	subi	r24, 0xA1	; 161
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	9e 01       	movw	r18, r28
    1c3c:	25 5a       	subi	r18, 0xA5	; 165
    1c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c40:	f9 01       	movw	r30, r18
    1c42:	20 81       	ld	r18, Z
    1c44:	31 81       	ldd	r19, Z+1	; 0x01
    1c46:	fc 01       	movw	r30, r24
    1c48:	31 83       	std	Z+1, r19	; 0x01
    1c4a:	20 83       	st	Z, r18
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	81 5a       	subi	r24, 0xA1	; 161
    1c50:	9f 4f       	sbci	r25, 0xFF	; 255
    1c52:	fc 01       	movw	r30, r24
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <WelcomeMessage+0x62a>
    1c5c:	9e 01       	movw	r18, r28
    1c5e:	21 5a       	subi	r18, 0xA1	; 161
    1c60:	3f 4f       	sbci	r19, 0xFF	; 255
    1c62:	f9 01       	movw	r30, r18
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
_delay_ms(HALF_SECOND);
DIO_WritePin(LED1,LOW);
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	8d e0       	ldi	r24, 0x0D	; 13
    1c6c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(BUZZER_PIN,HIGH);
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	8b e0       	ldi	r24, 0x0B	; 11
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	aa e7       	ldi	r26, 0x7A	; 122
    1c7e:	b4 e4       	ldi	r27, 0x44	; 68
    1c80:	89 8b       	std	Y+17, r24	; 0x11
    1c82:	9a 8b       	std	Y+18, r25	; 0x12
    1c84:	ab 8b       	std	Y+19, r26	; 0x13
    1c86:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	8e 01       	movw	r16, r28
    1c8a:	03 5b       	subi	r16, 0xB3	; 179
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	69 89       	ldd	r22, Y+17	; 0x11
    1c98:	7a 89       	ldd	r23, Y+18	; 0x12
    1c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	80 83       	st	Z, r24
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	a2 83       	std	Z+2, r26	; 0x02
    1cae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	83 5b       	subi	r24, 0xB3	; 179
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    1ccc:	88 23       	and	r24, r24
    1cce:	4c f4       	brge	.+18     	; 0x1ce2 <WelcomeMessage+0x6b4>
		__ticks = 1;
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	8f 5a       	subi	r24, 0xAF	; 175
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	21 e0       	ldi	r18, 0x01	; 1
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	fc 01       	movw	r30, r24
    1cdc:	31 83       	std	Z+1, r19	; 0x01
    1cde:	20 83       	st	Z, r18
    1ce0:	69 c0       	rjmp	.+210    	; 0x1db4 <WelcomeMessage+0x786>
	else if (__tmp > 65535)
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	83 5b       	subi	r24, 0xB3	; 179
    1ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <WelcomeMessage+0x6d6>
    1d02:	46 c0       	rjmp	.+140    	; 0x1d90 <WelcomeMessage+0x762>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	69 89       	ldd	r22, Y+17	; 0x11
    1d0e:	7a 89       	ldd	r23, Y+18	; 0x12
    1d10:	8b 89       	ldd	r24, Y+19	; 0x13
    1d12:	9c 89       	ldd	r25, Y+20	; 0x14
    1d14:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8e 01       	movw	r16, r28
    1d1e:	0f 5a       	subi	r16, 0xAF	; 175
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	f8 01       	movw	r30, r16
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
    1d34:	24 c0       	rjmp	.+72     	; 0x1d7e <WelcomeMessage+0x750>
    1d36:	ce 01       	movw	r24, r28
    1d38:	8d 5a       	subi	r24, 0xAD	; 173
    1d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3c:	29 e1       	ldi	r18, 0x19	; 25
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	fc 01       	movw	r30, r24
    1d42:	31 83       	std	Z+1, r19	; 0x01
    1d44:	20 83       	st	Z, r18
    1d46:	ce 01       	movw	r24, r28
    1d48:	8d 5a       	subi	r24, 0xAD	; 173
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <WelcomeMessage+0x724>
    1d56:	9e 01       	movw	r18, r28
    1d58:	2d 5a       	subi	r18, 0xAD	; 173
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	f9 01       	movw	r30, r18
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	ce 01       	movw	r24, r28
    1d64:	8f 5a       	subi	r24, 0xAF	; 175
    1d66:	9f 4f       	sbci	r25, 0xFF	; 255
    1d68:	9e 01       	movw	r18, r28
    1d6a:	2f 5a       	subi	r18, 0xAF	; 175
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	f9 01       	movw	r30, r18
    1d70:	20 81       	ld	r18, Z
    1d72:	31 81       	ldd	r19, Z+1	; 0x01
    1d74:	21 50       	subi	r18, 0x01	; 1
    1d76:	31 09       	sbc	r19, r1
    1d78:	fc 01       	movw	r30, r24
    1d7a:	31 83       	std	Z+1, r19	; 0x01
    1d7c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7e:	ce 01       	movw	r24, r28
    1d80:	8f 5a       	subi	r24, 0xAF	; 175
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	fc 01       	movw	r30, r24
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	89 2b       	or	r24, r25
    1d8c:	a1 f6       	brne	.-88     	; 0x1d36 <WelcomeMessage+0x708>
    1d8e:	2c c0       	rjmp	.+88     	; 0x1de8 <WelcomeMessage+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d90:	8e 01       	movw	r16, r28
    1d92:	0f 5a       	subi	r16, 0xAF	; 175
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	ce 01       	movw	r24, r28
    1d98:	83 5b       	subi	r24, 0xB3	; 179
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	60 81       	ld	r22, Z
    1da0:	71 81       	ldd	r23, Z+1	; 0x01
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	93 81       	ldd	r25, Z+3	; 0x03
    1da6:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	f8 01       	movw	r30, r16
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	ce 01       	movw	r24, r28
    1db6:	8b 5a       	subi	r24, 0xAB	; 171
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	9e 01       	movw	r18, r28
    1dbc:	2f 5a       	subi	r18, 0xAF	; 175
    1dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc0:	f9 01       	movw	r30, r18
    1dc2:	20 81       	ld	r18, Z
    1dc4:	31 81       	ldd	r19, Z+1	; 0x01
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	31 83       	std	Z+1, r19	; 0x01
    1dca:	20 83       	st	Z, r18
    1dcc:	ce 01       	movw	r24, r28
    1dce:	8b 5a       	subi	r24, 0xAB	; 171
    1dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <WelcomeMessage+0x7aa>
    1ddc:	9e 01       	movw	r18, r28
    1dde:	2b 5a       	subi	r18, 0xAB	; 171
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	f9 01       	movw	r30, r18
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
_delay_ms(HALF_SECOND);
DIO_WritePin(BUZZER_PIN,LOW);
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	8b e0       	ldi	r24, 0x0B	; 11
    1dec:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>

DIO_WritePin(LED2,HIGH);
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	8e e0       	ldi	r24, 0x0E	; 14
    1df4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	aa e7       	ldi	r26, 0x7A	; 122
    1dfe:	b4 e4       	ldi	r27, 0x44	; 68
    1e00:	8d 8b       	std	Y+21, r24	; 0x15
    1e02:	9e 8b       	std	Y+22, r25	; 0x16
    1e04:	af 8b       	std	Y+23, r26	; 0x17
    1e06:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	8e 01       	movw	r16, r28
    1e0a:	0d 5b       	subi	r16, 0xBD	; 189
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a e7       	ldi	r20, 0x7A	; 122
    1e14:	53 e4       	ldi	r21, 0x43	; 67
    1e16:	6d 89       	ldd	r22, Y+21	; 0x15
    1e18:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	f8 01       	movw	r30, r16
    1e28:	80 83       	st	Z, r24
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	a2 83       	std	Z+2, r26	; 0x02
    1e2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e30:	ce 01       	movw	r24, r28
    1e32:	8d 5b       	subi	r24, 0xBD	; 189
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e8       	ldi	r20, 0x80	; 128
    1e3c:	5f e3       	ldi	r21, 0x3F	; 63
    1e3e:	fc 01       	movw	r30, r24
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	4c f4       	brge	.+18     	; 0x1e62 <WelcomeMessage+0x834>
		__ticks = 1;
    1e50:	ce 01       	movw	r24, r28
    1e52:	89 5b       	subi	r24, 0xB9	; 185
    1e54:	9f 4f       	sbci	r25, 0xFF	; 255
    1e56:	21 e0       	ldi	r18, 0x01	; 1
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	31 83       	std	Z+1, r19	; 0x01
    1e5e:	20 83       	st	Z, r18
    1e60:	69 c0       	rjmp	.+210    	; 0x1f34 <WelcomeMessage+0x906>
	else if (__tmp > 65535)
    1e62:	ce 01       	movw	r24, r28
    1e64:	8d 5b       	subi	r24, 0xBD	; 189
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	fc 01       	movw	r30, r24
    1e72:	60 81       	ld	r22, Z
    1e74:	71 81       	ldd	r23, Z+1	; 0x01
    1e76:	82 81       	ldd	r24, Z+2	; 0x02
    1e78:	93 81       	ldd	r25, Z+3	; 0x03
    1e7a:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	0c f0       	brlt	.+2      	; 0x1e84 <WelcomeMessage+0x856>
    1e82:	46 c0       	rjmp	.+140    	; 0x1f10 <WelcomeMessage+0x8e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e2       	ldi	r20, 0x20	; 32
    1e8a:	51 e4       	ldi	r21, 0x41	; 65
    1e8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e90:	8f 89       	ldd	r24, Y+23	; 0x17
    1e92:	98 8d       	ldd	r25, Y+24	; 0x18
    1e94:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	09 5b       	subi	r16, 0xB9	; 185
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	f8 01       	movw	r30, r16
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
    1eb4:	24 c0       	rjmp	.+72     	; 0x1efe <WelcomeMessage+0x8d0>
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	87 5b       	subi	r24, 0xB7	; 183
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	29 e1       	ldi	r18, 0x19	; 25
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	31 83       	std	Z+1, r19	; 0x01
    1ec4:	20 83       	st	Z, r18
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	87 5b       	subi	r24, 0xB7	; 183
    1eca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ecc:	fc 01       	movw	r30, r24
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <WelcomeMessage+0x8a4>
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	27 5b       	subi	r18, 0xB7	; 183
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	f9 01       	movw	r30, r18
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	89 5b       	subi	r24, 0xB9	; 185
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	9e 01       	movw	r18, r28
    1eea:	29 5b       	subi	r18, 0xB9	; 185
    1eec:	3f 4f       	sbci	r19, 0xFF	; 255
    1eee:	f9 01       	movw	r30, r18
    1ef0:	20 81       	ld	r18, Z
    1ef2:	31 81       	ldd	r19, Z+1	; 0x01
    1ef4:	21 50       	subi	r18, 0x01	; 1
    1ef6:	31 09       	sbc	r19, r1
    1ef8:	fc 01       	movw	r30, r24
    1efa:	31 83       	std	Z+1, r19	; 0x01
    1efc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	ce 01       	movw	r24, r28
    1f00:	89 5b       	subi	r24, 0xB9	; 185
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	fc 01       	movw	r30, r24
    1f06:	80 81       	ld	r24, Z
    1f08:	91 81       	ldd	r25, Z+1	; 0x01
    1f0a:	89 2b       	or	r24, r25
    1f0c:	a1 f6       	brne	.-88     	; 0x1eb6 <WelcomeMessage+0x888>
    1f0e:	2c c0       	rjmp	.+88     	; 0x1f68 <WelcomeMessage+0x93a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f10:	8e 01       	movw	r16, r28
    1f12:	09 5b       	subi	r16, 0xB9	; 185
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	ce 01       	movw	r24, r28
    1f18:	8d 5b       	subi	r24, 0xBD	; 189
    1f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f8 01       	movw	r30, r16
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	ce 01       	movw	r24, r28
    1f36:	85 5b       	subi	r24, 0xB5	; 181
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	9e 01       	movw	r18, r28
    1f3c:	29 5b       	subi	r18, 0xB9	; 185
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	f9 01       	movw	r30, r18
    1f42:	20 81       	ld	r18, Z
    1f44:	31 81       	ldd	r19, Z+1	; 0x01
    1f46:	fc 01       	movw	r30, r24
    1f48:	31 83       	std	Z+1, r19	; 0x01
    1f4a:	20 83       	st	Z, r18
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	85 5b       	subi	r24, 0xB5	; 181
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	fc 01       	movw	r30, r24
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <WelcomeMessage+0x92a>
    1f5c:	9e 01       	movw	r18, r28
    1f5e:	25 5b       	subi	r18, 0xB5	; 181
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	f9 01       	movw	r30, r18
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
_delay_ms(HALF_SECOND);
DIO_WritePin(LED2,LOW);
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	8e e0       	ldi	r24, 0x0E	; 14
    1f6c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(BUZZER_PIN,HIGH);
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	8b e0       	ldi	r24, 0x0B	; 11
    1f74:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	aa e7       	ldi	r26, 0x7A	; 122
    1f7e:	b4 e4       	ldi	r27, 0x44	; 68
    1f80:	89 8f       	std	Y+25, r24	; 0x19
    1f82:	9a 8f       	std	Y+26, r25	; 0x1a
    1f84:	ab 8f       	std	Y+27, r26	; 0x1b
    1f86:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a e7       	ldi	r20, 0x7A	; 122
    1f8e:	53 e4       	ldi	r21, 0x43	; 67
    1f90:	69 8d       	ldd	r22, Y+25	; 0x19
    1f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f98:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	89 af       	std	Y+57, r24	; 0x39
    1fa2:	9a af       	std	Y+58, r25	; 0x3a
    1fa4:	ab af       	std	Y+59, r26	; 0x3b
    1fa6:	bc af       	std	Y+60, r27	; 0x3c
	if (__tmp < 1.0)
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	69 ad       	ldd	r22, Y+57	; 0x39
    1fb2:	7a ad       	ldd	r23, Y+58	; 0x3a
    1fb4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fb8:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <WelcomeMessage+0x99c>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9e af       	std	Y+62, r25	; 0x3e
    1fc6:	8d af       	std	Y+61, r24	; 0x3d
    1fc8:	49 c0       	rjmp	.+146    	; 0x205c <WelcomeMessage+0xa2e>
	else if (__tmp > 65535)
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	69 ad       	ldd	r22, Y+57	; 0x39
    1fd4:	7a ad       	ldd	r23, Y+58	; 0x3a
    1fd6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fd8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fda:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	9c f5       	brge	.+102    	; 0x2048 <WelcomeMessage+0xa1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	69 8d       	ldd	r22, Y+25	; 0x19
    1fec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff2:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e af       	std	Y+62, r25	; 0x3e
    2008:	8d af       	std	Y+61, r24	; 0x3d
    200a:	19 c0       	rjmp	.+50     	; 0x203e <WelcomeMessage+0xa10>
    200c:	29 e1       	ldi	r18, 0x19	; 25
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	ce 01       	movw	r24, r28
    2012:	cf 96       	adiw	r24, 0x3f	; 63
    2014:	fc 01       	movw	r30, r24
    2016:	31 83       	std	Z+1, r19	; 0x01
    2018:	20 83       	st	Z, r18
    201a:	ce 01       	movw	r24, r28
    201c:	cf 96       	adiw	r24, 0x3f	; 63
    201e:	fc 01       	movw	r30, r24
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <WelcomeMessage+0x9f6>
    2028:	9e 01       	movw	r18, r28
    202a:	21 5c       	subi	r18, 0xC1	; 193
    202c:	3f 4f       	sbci	r19, 0xFF	; 255
    202e:	f9 01       	movw	r30, r18
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	8d ad       	ldd	r24, Y+61	; 0x3d
    2036:	9e ad       	ldd	r25, Y+62	; 0x3e
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	9e af       	std	Y+62, r25	; 0x3e
    203c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2040:	9e ad       	ldd	r25, Y+62	; 0x3e
    2042:	89 2b       	or	r24, r25
    2044:	19 f7       	brne	.-58     	; 0x200c <WelcomeMessage+0x9de>
    2046:	20 c0       	rjmp	.+64     	; 0x2088 <WelcomeMessage+0xa5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	69 ad       	ldd	r22, Y+57	; 0x39
    204a:	7a ad       	ldd	r23, Y+58	; 0x3a
    204c:	8b ad       	ldd	r24, Y+59	; 0x3b
    204e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2050:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e af       	std	Y+62, r25	; 0x3e
    205a:	8d af       	std	Y+61, r24	; 0x3d
    205c:	ce 01       	movw	r24, r28
    205e:	8f 5b       	subi	r24, 0xBF	; 191
    2060:	9f 4f       	sbci	r25, 0xFF	; 255
    2062:	2d ad       	ldd	r18, Y+61	; 0x3d
    2064:	3e ad       	ldd	r19, Y+62	; 0x3e
    2066:	fc 01       	movw	r30, r24
    2068:	31 83       	std	Z+1, r19	; 0x01
    206a:	20 83       	st	Z, r18
    206c:	ce 01       	movw	r24, r28
    206e:	8f 5b       	subi	r24, 0xBF	; 191
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	fc 01       	movw	r30, r24
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <WelcomeMessage+0xa4a>
    207c:	9e 01       	movw	r18, r28
    207e:	2f 5b       	subi	r18, 0xBF	; 191
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	f9 01       	movw	r30, r18
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
_delay_ms(HALF_SECOND);
DIO_WritePin(BUZZER_PIN,LOW);
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	8b e0       	ldi	r24, 0x0B	; 11
    208c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>

DIO_WritePin(LED3,HIGH);
    2090:	61 e0       	ldi	r22, 0x01	; 1
    2092:	8f e0       	ldi	r24, 0x0F	; 15
    2094:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	aa e7       	ldi	r26, 0x7A	; 122
    209e:	b4 e4       	ldi	r27, 0x44	; 68
    20a0:	8d 8f       	std	Y+29, r24	; 0x1d
    20a2:	9e 8f       	std	Y+30, r25	; 0x1e
    20a4:	af 8f       	std	Y+31, r26	; 0x1f
    20a6:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a e7       	ldi	r20, 0x7A	; 122
    20ae:	53 e4       	ldi	r21, 0x43	; 67
    20b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20b6:	98 a1       	ldd	r25, Y+32	; 0x20
    20b8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	8f a7       	std	Y+47, r24	; 0x2f
    20c2:	98 ab       	std	Y+48, r25	; 0x30
    20c4:	a9 ab       	std	Y+49, r26	; 0x31
    20c6:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	6f a5       	ldd	r22, Y+47	; 0x2f
    20d2:	78 a9       	ldd	r23, Y+48	; 0x30
    20d4:	89 a9       	ldd	r24, Y+49	; 0x31
    20d6:	9a a9       	ldd	r25, Y+50	; 0x32
    20d8:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    20dc:	88 23       	and	r24, r24
    20de:	2c f4       	brge	.+10     	; 0x20ea <WelcomeMessage+0xabc>
		__ticks = 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	9c ab       	std	Y+52, r25	; 0x34
    20e6:	8b ab       	std	Y+51, r24	; 0x33
    20e8:	3f c0       	rjmp	.+126    	; 0x2168 <WelcomeMessage+0xb3a>
	else if (__tmp > 65535)
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	6f a5       	ldd	r22, Y+47	; 0x2f
    20f4:	78 a9       	ldd	r23, Y+48	; 0x30
    20f6:	89 a9       	ldd	r24, Y+49	; 0x31
    20f8:	9a a9       	ldd	r25, Y+50	; 0x32
    20fa:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    20fe:	18 16       	cp	r1, r24
    2100:	4c f5       	brge	.+82     	; 0x2154 <WelcomeMessage+0xb26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    210c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    210e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2110:	98 a1       	ldd	r25, Y+32	; 0x20
    2112:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	9c ab       	std	Y+52, r25	; 0x34
    2128:	8b ab       	std	Y+51, r24	; 0x33
    212a:	0f c0       	rjmp	.+30     	; 0x214a <WelcomeMessage+0xb1c>
    212c:	89 e1       	ldi	r24, 0x19	; 25
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	9e ab       	std	Y+54, r25	; 0x36
    2132:	8d ab       	std	Y+53, r24	; 0x35
    2134:	8d a9       	ldd	r24, Y+53	; 0x35
    2136:	9e a9       	ldd	r25, Y+54	; 0x36
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <WelcomeMessage+0xb0a>
    213c:	9e ab       	std	Y+54, r25	; 0x36
    213e:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2140:	8b a9       	ldd	r24, Y+51	; 0x33
    2142:	9c a9       	ldd	r25, Y+52	; 0x34
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	9c ab       	std	Y+52, r25	; 0x34
    2148:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214a:	8b a9       	ldd	r24, Y+51	; 0x33
    214c:	9c a9       	ldd	r25, Y+52	; 0x34
    214e:	89 2b       	or	r24, r25
    2150:	69 f7       	brne	.-38     	; 0x212c <WelcomeMessage+0xafe>
    2152:	14 c0       	rjmp	.+40     	; 0x217c <WelcomeMessage+0xb4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2154:	6f a5       	ldd	r22, Y+47	; 0x2f
    2156:	78 a9       	ldd	r23, Y+48	; 0x30
    2158:	89 a9       	ldd	r24, Y+49	; 0x31
    215a:	9a a9       	ldd	r25, Y+50	; 0x32
    215c:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9c ab       	std	Y+52, r25	; 0x34
    2166:	8b ab       	std	Y+51, r24	; 0x33
    2168:	8b a9       	ldd	r24, Y+51	; 0x33
    216a:	9c a9       	ldd	r25, Y+52	; 0x34
    216c:	98 af       	std	Y+56, r25	; 0x38
    216e:	8f ab       	std	Y+55, r24	; 0x37
    2170:	8f a9       	ldd	r24, Y+55	; 0x37
    2172:	98 ad       	ldd	r25, Y+56	; 0x38
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <WelcomeMessage+0xb46>
    2178:	98 af       	std	Y+56, r25	; 0x38
    217a:	8f ab       	std	Y+55, r24	; 0x37
_delay_ms(HALF_SECOND);
DIO_WritePin(LED3,LOW);
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	8f e0       	ldi	r24, 0x0F	; 15
    2180:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
DIO_WritePin(BUZZER_PIN,HIGH);
    2184:	61 e0       	ldi	r22, 0x01	; 1
    2186:	8b e0       	ldi	r24, 0x0B	; 11
    2188:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	aa e7       	ldi	r26, 0x7A	; 122
    2192:	b4 e4       	ldi	r27, 0x44	; 68
    2194:	89 a3       	std	Y+33, r24	; 0x21
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	ab a3       	std	Y+35, r26	; 0x23
    219a:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a e7       	ldi	r20, 0x7A	; 122
    21a2:	53 e4       	ldi	r21, 0x43	; 67
    21a4:	69 a1       	ldd	r22, Y+33	; 0x21
    21a6:	7a a1       	ldd	r23, Y+34	; 0x22
    21a8:	8b a1       	ldd	r24, Y+35	; 0x23
    21aa:	9c a1       	ldd	r25, Y+36	; 0x24
    21ac:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8d a3       	std	Y+37, r24	; 0x25
    21b6:	9e a3       	std	Y+38, r25	; 0x26
    21b8:	af a3       	std	Y+39, r26	; 0x27
    21ba:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	6d a1       	ldd	r22, Y+37	; 0x25
    21c6:	7e a1       	ldd	r23, Y+38	; 0x26
    21c8:	8f a1       	ldd	r24, Y+39	; 0x27
    21ca:	98 a5       	ldd	r25, Y+40	; 0x28
    21cc:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <WelcomeMessage+0xbb0>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9a a7       	std	Y+42, r25	; 0x2a
    21da:	89 a7       	std	Y+41, r24	; 0x29
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <WelcomeMessage+0xc2e>
	else if (__tmp > 65535)
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	6d a1       	ldd	r22, Y+37	; 0x25
    21e8:	7e a1       	ldd	r23, Y+38	; 0x26
    21ea:	8f a1       	ldd	r24, Y+39	; 0x27
    21ec:	98 a5       	ldd	r25, Y+40	; 0x28
    21ee:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <WelcomeMessage+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	69 a1       	ldd	r22, Y+33	; 0x21
    2200:	7a a1       	ldd	r23, Y+34	; 0x22
    2202:	8b a1       	ldd	r24, Y+35	; 0x23
    2204:	9c a1       	ldd	r25, Y+36	; 0x24
    2206:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9a a7       	std	Y+42, r25	; 0x2a
    221c:	89 a7       	std	Y+41, r24	; 0x29
    221e:	0f c0       	rjmp	.+30     	; 0x223e <WelcomeMessage+0xc10>
    2220:	89 e1       	ldi	r24, 0x19	; 25
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c a7       	std	Y+44, r25	; 0x2c
    2226:	8b a7       	std	Y+43, r24	; 0x2b
    2228:	8b a5       	ldd	r24, Y+43	; 0x2b
    222a:	9c a5       	ldd	r25, Y+44	; 0x2c
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <WelcomeMessage+0xbfe>
    2230:	9c a7       	std	Y+44, r25	; 0x2c
    2232:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	89 a5       	ldd	r24, Y+41	; 0x29
    2236:	9a a5       	ldd	r25, Y+42	; 0x2a
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9a a7       	std	Y+42, r25	; 0x2a
    223c:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	89 a5       	ldd	r24, Y+41	; 0x29
    2240:	9a a5       	ldd	r25, Y+42	; 0x2a
    2242:	89 2b       	or	r24, r25
    2244:	69 f7       	brne	.-38     	; 0x2220 <WelcomeMessage+0xbf2>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <WelcomeMessage+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6d a1       	ldd	r22, Y+37	; 0x25
    224a:	7e a1       	ldd	r23, Y+38	; 0x26
    224c:	8f a1       	ldd	r24, Y+39	; 0x27
    224e:	98 a5       	ldd	r25, Y+40	; 0x28
    2250:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9a a7       	std	Y+42, r25	; 0x2a
    225a:	89 a7       	std	Y+41, r24	; 0x29
    225c:	89 a5       	ldd	r24, Y+41	; 0x29
    225e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2260:	9e a7       	std	Y+46, r25	; 0x2e
    2262:	8d a7       	std	Y+45, r24	; 0x2d
    2264:	8d a5       	ldd	r24, Y+45	; 0x2d
    2266:	9e a5       	ldd	r25, Y+46	; 0x2e
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <WelcomeMessage+0xc3a>
    226c:	9e a7       	std	Y+46, r25	; 0x2e
    226e:	8d a7       	std	Y+45, r24	; 0x2d
_delay_ms(HALF_SECOND);
DIO_WritePin(BUZZER_PIN,LOW);
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	8b e0       	ldi	r24, 0x0B	; 11
    2274:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>


LCD_clear();
    2278:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_clear>
}
    227c:	00 00       	nop
    227e:	c2 58       	subi	r28, 0x82	; 130
    2280:	df 4f       	sbci	r29, 0xFF	; 255
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <BTN_init>:
 * @return: void
 *
 * Description: function to initialize the push buttons 0 and 1
 *
 ********************************************************************************/	
void BTN_init(void){
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
	
	DIO_SetPinDirection(BTN1,INPUT);
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	8a e0       	ldi	r24, 0x0A	; 10
    22a2:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
	DIO_SetPinDirection(BTN0,INPUT);
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	84 e1       	ldi	r24, 0x14	; 20
    22aa:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SetPinDirection>
	
}
    22ae:	00 00       	nop
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	08 95       	ret

000022b6 <GenerateQuestion>:
 *
 * Description: function that Interfaces directly with the user by asking questions,
 *			taking answers, and judging them  
 *
 ********************************************************************************/
void GenerateQuestion(void){
    22b6:	0f 93       	push	r16
    22b8:	1f 93       	push	r17
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	cf 5a       	subi	r28, 0xAF	; 175
    22c4:	d1 09       	sbc	r29, r1
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
	uint8 score= ASCII_OF_ZERO;
    22d0:	80 e3       	ldi	r24, 0x30	; 48
    22d2:	89 83       	std	Y+1, r24	; 0x01
	uint8 ans[NUM_OF_QUES];
	uint8 i;
	

for(i=0;i<NUM_OF_QUES;i++)
    22d4:	1a 82       	std	Y+2, r1	; 0x02
    22d6:	ef c5       	rjmp	.+3038   	; 0x2eb6 <GenerateQuestion+0xc00>
	{
	LCD_clear();	
    22d8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_clear>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a0 ea       	ldi	r26, 0xA0	; 160
    22e2:	b1 e4       	ldi	r27, 0x41	; 65
    22e4:	8f 83       	std	Y+7, r24	; 0x07
    22e6:	98 87       	std	Y+8, r25	; 0x08
    22e8:	a9 87       	std	Y+9, r26	; 0x09
    22ea:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22ec:	8e 01       	movw	r16, r28
    22ee:	09 5b       	subi	r16, 0xB9	; 185
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	4a e7       	ldi	r20, 0x7A	; 122
    22f8:	53 e4       	ldi	r21, 0x43	; 67
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	f8 01       	movw	r30, r16
    230c:	80 83       	st	Z, r24
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	a2 83       	std	Z+2, r26	; 0x02
    2312:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2314:	ce 01       	movw	r24, r28
    2316:	89 5b       	subi	r24, 0xB9	; 185
    2318:	9f 4f       	sbci	r25, 0xFF	; 255
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	fc 01       	movw	r30, r24
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    2330:	88 23       	and	r24, r24
    2332:	4c f4       	brge	.+18     	; 0x2346 <GenerateQuestion+0x90>
		__ticks = 1;
    2334:	ce 01       	movw	r24, r28
    2336:	85 5b       	subi	r24, 0xB5	; 181
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	21 e0       	ldi	r18, 0x01	; 1
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	fc 01       	movw	r30, r24
    2340:	31 83       	std	Z+1, r19	; 0x01
    2342:	20 83       	st	Z, r18
    2344:	69 c0       	rjmp	.+210    	; 0x2418 <GenerateQuestion+0x162>
	else if (__tmp > 65535)
    2346:	ce 01       	movw	r24, r28
    2348:	89 5b       	subi	r24, 0xB9	; 185
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	fc 01       	movw	r30, r24
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    2362:	18 16       	cp	r1, r24
    2364:	0c f0       	brlt	.+2      	; 0x2368 <GenerateQuestion+0xb2>
    2366:	46 c0       	rjmp	.+140    	; 0x23f4 <GenerateQuestion+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8e 01       	movw	r16, r28
    2382:	05 5b       	subi	r16, 0xB5	; 181
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	f8 01       	movw	r30, r16
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	80 83       	st	Z, r24
    2398:	24 c0       	rjmp	.+72     	; 0x23e2 <GenerateQuestion+0x12c>
    239a:	ce 01       	movw	r24, r28
    239c:	83 5b       	subi	r24, 0xB3	; 179
    239e:	9f 4f       	sbci	r25, 0xFF	; 255
    23a0:	29 e1       	ldi	r18, 0x19	; 25
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	fc 01       	movw	r30, r24
    23a6:	31 83       	std	Z+1, r19	; 0x01
    23a8:	20 83       	st	Z, r18
    23aa:	ce 01       	movw	r24, r28
    23ac:	83 5b       	subi	r24, 0xB3	; 179
    23ae:	9f 4f       	sbci	r25, 0xFF	; 255
    23b0:	fc 01       	movw	r30, r24
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <GenerateQuestion+0x100>
    23ba:	9e 01       	movw	r18, r28
    23bc:	23 5b       	subi	r18, 0xB3	; 179
    23be:	3f 4f       	sbci	r19, 0xFF	; 255
    23c0:	f9 01       	movw	r30, r18
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	ce 01       	movw	r24, r28
    23c8:	85 5b       	subi	r24, 0xB5	; 181
    23ca:	9f 4f       	sbci	r25, 0xFF	; 255
    23cc:	9e 01       	movw	r18, r28
    23ce:	25 5b       	subi	r18, 0xB5	; 181
    23d0:	3f 4f       	sbci	r19, 0xFF	; 255
    23d2:	f9 01       	movw	r30, r18
    23d4:	20 81       	ld	r18, Z
    23d6:	31 81       	ldd	r19, Z+1	; 0x01
    23d8:	21 50       	subi	r18, 0x01	; 1
    23da:	31 09       	sbc	r19, r1
    23dc:	fc 01       	movw	r30, r24
    23de:	31 83       	std	Z+1, r19	; 0x01
    23e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	ce 01       	movw	r24, r28
    23e4:	85 5b       	subi	r24, 0xB5	; 181
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	fc 01       	movw	r30, r24
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	89 2b       	or	r24, r25
    23f0:	a1 f6       	brne	.-88     	; 0x239a <GenerateQuestion+0xe4>
    23f2:	2c c0       	rjmp	.+88     	; 0x244c <GenerateQuestion+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	8e 01       	movw	r16, r28
    23f6:	05 5b       	subi	r16, 0xB5	; 181
    23f8:	1f 4f       	sbci	r17, 0xFF	; 255
    23fa:	ce 01       	movw	r24, r28
    23fc:	89 5b       	subi	r24, 0xB9	; 185
    23fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2400:	fc 01       	movw	r30, r24
    2402:	60 81       	ld	r22, Z
    2404:	71 81       	ldd	r23, Z+1	; 0x01
    2406:	82 81       	ldd	r24, Z+2	; 0x02
    2408:	93 81       	ldd	r25, Z+3	; 0x03
    240a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	f8 01       	movw	r30, r16
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
    2418:	ce 01       	movw	r24, r28
    241a:	81 5b       	subi	r24, 0xB1	; 177
    241c:	9f 4f       	sbci	r25, 0xFF	; 255
    241e:	9e 01       	movw	r18, r28
    2420:	25 5b       	subi	r18, 0xB5	; 181
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	f9 01       	movw	r30, r18
    2426:	20 81       	ld	r18, Z
    2428:	31 81       	ldd	r19, Z+1	; 0x01
    242a:	fc 01       	movw	r30, r24
    242c:	31 83       	std	Z+1, r19	; 0x01
    242e:	20 83       	st	Z, r18
    2430:	ce 01       	movw	r24, r28
    2432:	81 5b       	subi	r24, 0xB1	; 177
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	fc 01       	movw	r30, r24
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <GenerateQuestion+0x186>
    2440:	9e 01       	movw	r18, r28
    2442:	21 5b       	subi	r18, 0xB1	; 177
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	f9 01       	movw	r30, r18
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
		_delay_ms(TWENTY_MS);
	LCD_displayStringRowColumn(ROW1,COL0,ptr_Questions[i]);
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	8d 54       	subi	r24, 0x4D	; 77
    2458:	9f 4f       	sbci	r25, 0xFF	; 255
    245a:	fc 01       	movw	r30, r24
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	ac 01       	movw	r20, r24
    2462:	60 e0       	ldi	r22, 0x00	; 0
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_displayStringRowColumn>
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a0 ea       	ldi	r26, 0xA0	; 160
    2470:	b1 e4       	ldi	r27, 0x41	; 65
    2472:	8b 87       	std	Y+11, r24	; 0x0b
    2474:	9c 87       	std	Y+12, r25	; 0x0c
    2476:	ad 87       	std	Y+13, r26	; 0x0d
    2478:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a e7       	ldi	r20, 0x7A	; 122
    2480:	53 e4       	ldi	r21, 0x43	; 67
    2482:	6b 85       	ldd	r22, Y+11	; 0x0b
    2484:	7c 85       	ldd	r23, Y+12	; 0x0c
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	9e 85       	ldd	r25, Y+14	; 0x0e
    248a:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9e 01       	movw	r18, r28
    2494:	23 5c       	subi	r18, 0xC3	; 195
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	f9 01       	movw	r30, r18
    249a:	80 83       	st	Z, r24
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	a2 83       	std	Z+2, r26	; 0x02
    24a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e8       	ldi	r20, 0x80	; 128
    24a8:	5f e3       	ldi	r21, 0x3F	; 63
    24aa:	ce 01       	movw	r24, r28
    24ac:	cd 96       	adiw	r24, 0x3d	; 61
    24ae:	fc 01       	movw	r30, r24
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    24bc:	88 23       	and	r24, r24
    24be:	4c f4       	brge	.+18     	; 0x24d2 <GenerateQuestion+0x21c>
		__ticks = 1;
    24c0:	ce 01       	movw	r24, r28
    24c2:	8f 5b       	subi	r24, 0xBF	; 191
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	21 e0       	ldi	r18, 0x01	; 1
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	fc 01       	movw	r30, r24
    24cc:	31 83       	std	Z+1, r19	; 0x01
    24ce:	20 83       	st	Z, r18
    24d0:	67 c0       	rjmp	.+206    	; 0x25a0 <GenerateQuestion+0x2ea>
	else if (__tmp > 65535)
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	ce 01       	movw	r24, r28
    24dc:	cd 96       	adiw	r24, 0x3d	; 61
    24de:	fc 01       	movw	r30, r24
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	0c f0       	brlt	.+2      	; 0x24f2 <GenerateQuestion+0x23c>
    24f0:	46 c0       	rjmp	.+140    	; 0x257e <GenerateQuestion+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	8e 01       	movw	r16, r28
    250c:	0f 5b       	subi	r16, 0xBF	; 191
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	f8 01       	movw	r30, r16
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
    2522:	24 c0       	rjmp	.+72     	; 0x256c <GenerateQuestion+0x2b6>
    2524:	ce 01       	movw	r24, r28
    2526:	8d 5b       	subi	r24, 0xBD	; 189
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	29 e1       	ldi	r18, 0x19	; 25
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	fc 01       	movw	r30, r24
    2530:	31 83       	std	Z+1, r19	; 0x01
    2532:	20 83       	st	Z, r18
    2534:	ce 01       	movw	r24, r28
    2536:	8d 5b       	subi	r24, 0xBD	; 189
    2538:	9f 4f       	sbci	r25, 0xFF	; 255
    253a:	fc 01       	movw	r30, r24
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <GenerateQuestion+0x28a>
    2544:	9e 01       	movw	r18, r28
    2546:	2d 5b       	subi	r18, 0xBD	; 189
    2548:	3f 4f       	sbci	r19, 0xFF	; 255
    254a:	f9 01       	movw	r30, r18
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	ce 01       	movw	r24, r28
    2552:	8f 5b       	subi	r24, 0xBF	; 191
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	9e 01       	movw	r18, r28
    2558:	2f 5b       	subi	r18, 0xBF	; 191
    255a:	3f 4f       	sbci	r19, 0xFF	; 255
    255c:	f9 01       	movw	r30, r18
    255e:	20 81       	ld	r18, Z
    2560:	31 81       	ldd	r19, Z+1	; 0x01
    2562:	21 50       	subi	r18, 0x01	; 1
    2564:	31 09       	sbc	r19, r1
    2566:	fc 01       	movw	r30, r24
    2568:	31 83       	std	Z+1, r19	; 0x01
    256a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256c:	ce 01       	movw	r24, r28
    256e:	8f 5b       	subi	r24, 0xBF	; 191
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	fc 01       	movw	r30, r24
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	89 2b       	or	r24, r25
    257a:	a1 f6       	brne	.-88     	; 0x2524 <GenerateQuestion+0x26e>
    257c:	2b c0       	rjmp	.+86     	; 0x25d4 <GenerateQuestion+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	8e 01       	movw	r16, r28
    2580:	0f 5b       	subi	r16, 0xBF	; 191
    2582:	1f 4f       	sbci	r17, 0xFF	; 255
    2584:	ce 01       	movw	r24, r28
    2586:	cd 96       	adiw	r24, 0x3d	; 61
    2588:	fc 01       	movw	r30, r24
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	f8 01       	movw	r30, r16
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
    25a0:	ce 01       	movw	r24, r28
    25a2:	8b 5b       	subi	r24, 0xBB	; 187
    25a4:	9f 4f       	sbci	r25, 0xFF	; 255
    25a6:	9e 01       	movw	r18, r28
    25a8:	2f 5b       	subi	r18, 0xBF	; 191
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
    25ac:	f9 01       	movw	r30, r18
    25ae:	20 81       	ld	r18, Z
    25b0:	31 81       	ldd	r19, Z+1	; 0x01
    25b2:	fc 01       	movw	r30, r24
    25b4:	31 83       	std	Z+1, r19	; 0x01
    25b6:	20 83       	st	Z, r18
    25b8:	ce 01       	movw	r24, r28
    25ba:	8b 5b       	subi	r24, 0xBB	; 187
    25bc:	9f 4f       	sbci	r25, 0xFF	; 255
    25be:	fc 01       	movw	r30, r24
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <GenerateQuestion+0x30e>
    25c8:	9e 01       	movw	r18, r28
    25ca:	2b 5b       	subi	r18, 0xBB	; 187
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
    25ce:	f9 01       	movw	r30, r18
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
		_delay_ms(TWENTY_MS);
	LCD_displayStringRowColumn(ROW2,COL0,&Answer);
    25d4:	40 e6       	ldi	r20, 0x60	; 96
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	82 e0       	ldi	r24, 0x02	; 2
    25dc:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_displayStringRowColumn>
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	a0 ea       	ldi	r26, 0xA0	; 160
    25e6:	b1 e4       	ldi	r27, 0x41	; 65
    25e8:	8f a7       	std	Y+47, r24	; 0x2f
    25ea:	98 ab       	std	Y+48, r25	; 0x30
    25ec:	a9 ab       	std	Y+49, r26	; 0x31
    25ee:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a e7       	ldi	r20, 0x7A	; 122
    25f6:	53 e4       	ldi	r21, 0x43	; 67
    25f8:	6f a5       	ldd	r22, Y+47	; 0x2f
    25fa:	78 a9       	ldd	r23, Y+48	; 0x30
    25fc:	89 a9       	ldd	r24, Y+49	; 0x31
    25fe:	9a a9       	ldd	r25, Y+50	; 0x32
    2600:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	8b ab       	std	Y+51, r24	; 0x33
    260a:	9c ab       	std	Y+52, r25	; 0x34
    260c:	ad ab       	std	Y+53, r26	; 0x35
    260e:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	6b a9       	ldd	r22, Y+51	; 0x33
    261a:	7c a9       	ldd	r23, Y+52	; 0x34
    261c:	8d a9       	ldd	r24, Y+53	; 0x35
    261e:	9e a9       	ldd	r25, Y+54	; 0x36
    2620:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    2624:	88 23       	and	r24, r24
    2626:	2c f4       	brge	.+10     	; 0x2632 <GenerateQuestion+0x37c>
		__ticks = 1;
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	98 af       	std	Y+56, r25	; 0x38
    262e:	8f ab       	std	Y+55, r24	; 0x37
    2630:	3f c0       	rjmp	.+126    	; 0x26b0 <GenerateQuestion+0x3fa>
	else if (__tmp > 65535)
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	6b a9       	ldd	r22, Y+51	; 0x33
    263c:	7c a9       	ldd	r23, Y+52	; 0x34
    263e:	8d a9       	ldd	r24, Y+53	; 0x35
    2640:	9e a9       	ldd	r25, Y+54	; 0x36
    2642:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    2646:	18 16       	cp	r1, r24
    2648:	4c f5       	brge	.+82     	; 0x269c <GenerateQuestion+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	6f a5       	ldd	r22, Y+47	; 0x2f
    2654:	78 a9       	ldd	r23, Y+48	; 0x30
    2656:	89 a9       	ldd	r24, Y+49	; 0x31
    2658:	9a a9       	ldd	r25, Y+50	; 0x32
    265a:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	bc 01       	movw	r22, r24
    2664:	cd 01       	movw	r24, r26
    2666:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	98 af       	std	Y+56, r25	; 0x38
    2670:	8f ab       	std	Y+55, r24	; 0x37
    2672:	0f c0       	rjmp	.+30     	; 0x2692 <GenerateQuestion+0x3dc>
    2674:	89 e1       	ldi	r24, 0x19	; 25
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9a af       	std	Y+58, r25	; 0x3a
    267a:	89 af       	std	Y+57, r24	; 0x39
    267c:	89 ad       	ldd	r24, Y+57	; 0x39
    267e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <GenerateQuestion+0x3ca>
    2684:	9a af       	std	Y+58, r25	; 0x3a
    2686:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2688:	8f a9       	ldd	r24, Y+55	; 0x37
    268a:	98 ad       	ldd	r25, Y+56	; 0x38
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	98 af       	std	Y+56, r25	; 0x38
    2690:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2692:	8f a9       	ldd	r24, Y+55	; 0x37
    2694:	98 ad       	ldd	r25, Y+56	; 0x38
    2696:	89 2b       	or	r24, r25
    2698:	69 f7       	brne	.-38     	; 0x2674 <GenerateQuestion+0x3be>
    269a:	14 c0       	rjmp	.+40     	; 0x26c4 <GenerateQuestion+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269c:	6b a9       	ldd	r22, Y+51	; 0x33
    269e:	7c a9       	ldd	r23, Y+52	; 0x34
    26a0:	8d a9       	ldd	r24, Y+53	; 0x35
    26a2:	9e a9       	ldd	r25, Y+54	; 0x36
    26a4:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	98 af       	std	Y+56, r25	; 0x38
    26ae:	8f ab       	std	Y+55, r24	; 0x37
    26b0:	8f a9       	ldd	r24, Y+55	; 0x37
    26b2:	98 ad       	ldd	r25, Y+56	; 0x38
    26b4:	9c af       	std	Y+60, r25	; 0x3c
    26b6:	8b af       	std	Y+59, r24	; 0x3b
    26b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    26ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <GenerateQuestion+0x406>
    26c0:	9c af       	std	Y+60, r25	; 0x3c
    26c2:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(TWENTY_MS);

while(DIO_ReadPin(BTN0) == LOW && DIO_ReadPin(BTN1) == LOW);
    26c4:	00 00       	nop
    26c6:	84 e1       	ldi	r24, 0x14	; 20
    26c8:	0e 94 34 01 	call	0x268	; 0x268 <DIO_ReadPin>
    26cc:	88 23       	and	r24, r24
    26ce:	29 f4       	brne	.+10     	; 0x26da <GenerateQuestion+0x424>
    26d0:	8a e0       	ldi	r24, 0x0A	; 10
    26d2:	0e 94 34 01 	call	0x268	; 0x268 <DIO_ReadPin>
    26d6:	88 23       	and	r24, r24
    26d8:	b1 f3       	breq	.-20     	; 0x26c6 <GenerateQuestion+0x410>

if (DIO_ReadPin(BTN0) == PRESSED){
    26da:	84 e1       	ldi	r24, 0x14	; 20
    26dc:	0e 94 34 01 	call	0x268	; 0x268 <DIO_ReadPin>
    26e0:	81 30       	cpi	r24, 0x01	; 1
    26e2:	61 f4       	brne	.+24     	; 0x26fc <GenerateQuestion+0x446>
	ans[i] = YES;
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	88 2f       	mov	r24, r24
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9e 01       	movw	r18, r28
    26ec:	25 55       	subi	r18, 0x55	; 85
    26ee:	3f 4f       	sbci	r19, 0xFF	; 255
    26f0:	82 0f       	add	r24, r18
    26f2:	93 1f       	adc	r25, r19
    26f4:	21 e0       	ldi	r18, 0x01	; 1
    26f6:	fc 01       	movw	r30, r24
    26f8:	20 83       	st	Z, r18
    26fa:	0a c0       	rjmp	.+20     	; 0x2710 <GenerateQuestion+0x45a>
}

else { ans[i] = NO; }
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9e 01       	movw	r18, r28
    2704:	25 55       	subi	r18, 0x55	; 85
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
    2708:	82 0f       	add	r24, r18
    270a:	93 1f       	adc	r25, r19
    270c:	fc 01       	movw	r30, r24
    270e:	10 82       	st	Z, r1

if (ans[i] == Model_Answer[i])
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	88 2f       	mov	r24, r24
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9e 01       	movw	r18, r28
    2718:	25 55       	subi	r18, 0x55	; 85
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	82 0f       	add	r24, r18
    271e:	93 1f       	adc	r25, r19
    2720:	fc 01       	movw	r30, r24
    2722:	20 81       	ld	r18, Z
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	83 54       	subi	r24, 0x43	; 67
    272c:	9f 4f       	sbci	r25, 0xFF	; 255
    272e:	fc 01       	movw	r30, r24
    2730:	80 81       	ld	r24, Z
    2732:	28 17       	cp	r18, r24
    2734:	09 f0       	breq	.+2      	; 0x2738 <GenerateQuestion+0x482>
    2736:	81 c1       	rjmp	.+770    	; 0x2a3a <GenerateQuestion+0x784>
{
		score++;
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	89 83       	std	Y+1, r24	; 0x01
		LCD_clear();
    273e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_clear>
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a0 ea       	ldi	r26, 0xA0	; 160
    2748:	b1 e4       	ldi	r27, 0x41	; 65
    274a:	8b 8b       	std	Y+19, r24	; 0x13
    274c:	9c 8b       	std	Y+20, r25	; 0x14
    274e:	ad 8b       	std	Y+21, r26	; 0x15
    2750:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2752:	8e 01       	movw	r16, r28
    2754:	05 5a       	subi	r16, 0xA5	; 165
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a e7       	ldi	r20, 0x7A	; 122
    275e:	53 e4       	ldi	r21, 0x43	; 67
    2760:	6b 89       	ldd	r22, Y+19	; 0x13
    2762:	7c 89       	ldd	r23, Y+20	; 0x14
    2764:	8d 89       	ldd	r24, Y+21	; 0x15
    2766:	9e 89       	ldd	r25, Y+22	; 0x16
    2768:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	f8 01       	movw	r30, r16
    2772:	80 83       	st	Z, r24
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	a2 83       	std	Z+2, r26	; 0x02
    2778:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    277a:	ce 01       	movw	r24, r28
    277c:	85 5a       	subi	r24, 0xA5	; 165
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	fc 01       	movw	r30, r24
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	93 81       	ldd	r25, Z+3	; 0x03
    2792:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    2796:	88 23       	and	r24, r24
    2798:	4c f4       	brge	.+18     	; 0x27ac <GenerateQuestion+0x4f6>
		__ticks = 1;
    279a:	ce 01       	movw	r24, r28
    279c:	81 5a       	subi	r24, 0xA1	; 161
    279e:	9f 4f       	sbci	r25, 0xFF	; 255
    27a0:	21 e0       	ldi	r18, 0x01	; 1
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	fc 01       	movw	r30, r24
    27a6:	31 83       	std	Z+1, r19	; 0x01
    27a8:	20 83       	st	Z, r18
    27aa:	69 c0       	rjmp	.+210    	; 0x287e <GenerateQuestion+0x5c8>
	else if (__tmp > 65535)
    27ac:	ce 01       	movw	r24, r28
    27ae:	85 5a       	subi	r24, 0xA5	; 165
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	fc 01       	movw	r30, r24
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	0c f0       	brlt	.+2      	; 0x27ce <GenerateQuestion+0x518>
    27cc:	46 c0       	rjmp	.+140    	; 0x285a <GenerateQuestion+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	6b 89       	ldd	r22, Y+19	; 0x13
    27d8:	7c 89       	ldd	r23, Y+20	; 0x14
    27da:	8d 89       	ldd	r24, Y+21	; 0x15
    27dc:	9e 89       	ldd	r25, Y+22	; 0x16
    27de:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8e 01       	movw	r16, r28
    27e8:	01 5a       	subi	r16, 0xA1	; 161
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	f8 01       	movw	r30, r16
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	24 c0       	rjmp	.+72     	; 0x2848 <GenerateQuestion+0x592>
    2800:	ce 01       	movw	r24, r28
    2802:	8f 59       	subi	r24, 0x9F	; 159
    2804:	9f 4f       	sbci	r25, 0xFF	; 255
    2806:	29 e1       	ldi	r18, 0x19	; 25
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	fc 01       	movw	r30, r24
    280c:	31 83       	std	Z+1, r19	; 0x01
    280e:	20 83       	st	Z, r18
    2810:	ce 01       	movw	r24, r28
    2812:	8f 59       	subi	r24, 0x9F	; 159
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	fc 01       	movw	r30, r24
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <GenerateQuestion+0x566>
    2820:	9e 01       	movw	r18, r28
    2822:	2f 59       	subi	r18, 0x9F	; 159
    2824:	3f 4f       	sbci	r19, 0xFF	; 255
    2826:	f9 01       	movw	r30, r18
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	ce 01       	movw	r24, r28
    282e:	81 5a       	subi	r24, 0xA1	; 161
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	9e 01       	movw	r18, r28
    2834:	21 5a       	subi	r18, 0xA1	; 161
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	f9 01       	movw	r30, r18
    283a:	20 81       	ld	r18, Z
    283c:	31 81       	ldd	r19, Z+1	; 0x01
    283e:	21 50       	subi	r18, 0x01	; 1
    2840:	31 09       	sbc	r19, r1
    2842:	fc 01       	movw	r30, r24
    2844:	31 83       	std	Z+1, r19	; 0x01
    2846:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	ce 01       	movw	r24, r28
    284a:	81 5a       	subi	r24, 0xA1	; 161
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	fc 01       	movw	r30, r24
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	89 2b       	or	r24, r25
    2856:	a1 f6       	brne	.-88     	; 0x2800 <GenerateQuestion+0x54a>
    2858:	2c c0       	rjmp	.+88     	; 0x28b2 <GenerateQuestion+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285a:	8e 01       	movw	r16, r28
    285c:	01 5a       	subi	r16, 0xA1	; 161
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	ce 01       	movw	r24, r28
    2862:	85 5a       	subi	r24, 0xA5	; 165
    2864:	9f 4f       	sbci	r25, 0xFF	; 255
    2866:	fc 01       	movw	r30, r24
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	f8 01       	movw	r30, r16
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	80 83       	st	Z, r24
    287e:	ce 01       	movw	r24, r28
    2880:	8d 59       	subi	r24, 0x9D	; 157
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	9e 01       	movw	r18, r28
    2886:	21 5a       	subi	r18, 0xA1	; 161
    2888:	3f 4f       	sbci	r19, 0xFF	; 255
    288a:	f9 01       	movw	r30, r18
    288c:	20 81       	ld	r18, Z
    288e:	31 81       	ldd	r19, Z+1	; 0x01
    2890:	fc 01       	movw	r30, r24
    2892:	31 83       	std	Z+1, r19	; 0x01
    2894:	20 83       	st	Z, r18
    2896:	ce 01       	movw	r24, r28
    2898:	8d 59       	subi	r24, 0x9D	; 157
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	fc 01       	movw	r30, r24
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <GenerateQuestion+0x5ec>
    28a6:	9e 01       	movw	r18, r28
    28a8:	2d 59       	subi	r18, 0x9D	; 157
    28aa:	3f 4f       	sbci	r19, 0xFF	; 255
    28ac:	f9 01       	movw	r30, r18
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
			_delay_ms(TWENTY_MS);
		LCD_displayStringRowColumn(ROW1,COL0,"Correct Answer ");
    28b2:	46 ef       	ldi	r20, 0xF6	; 246
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_displayStringRowColumn>
		LCD_displayChar(HAPPY_EMOJI);
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
		LED_Correct_Celebration();
    28c4:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <LED_Correct_Celebration>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	aa e7       	ldi	r26, 0x7A	; 122
    28ce:	b5 e4       	ldi	r27, 0x45	; 69
    28d0:	8b 83       	std	Y+3, r24	; 0x03
    28d2:	9c 83       	std	Y+4, r25	; 0x04
    28d4:	ad 83       	std	Y+5, r26	; 0x05
    28d6:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	8e 01       	movw	r16, r28
    28da:	0f 5a       	subi	r16, 0xAF	; 175
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a e7       	ldi	r20, 0x7A	; 122
    28e4:	53 e4       	ldi	r21, 0x43	; 67
    28e6:	6b 81       	ldd	r22, Y+3	; 0x03
    28e8:	7c 81       	ldd	r23, Y+4	; 0x04
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	9e 81       	ldd	r25, Y+6	; 0x06
    28ee:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	f8 01       	movw	r30, r16
    28f8:	80 83       	st	Z, r24
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	a2 83       	std	Z+2, r26	; 0x02
    28fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2900:	ce 01       	movw	r24, r28
    2902:	8f 5a       	subi	r24, 0xAF	; 175
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	fc 01       	movw	r30, r24
    2910:	60 81       	ld	r22, Z
    2912:	71 81       	ldd	r23, Z+1	; 0x01
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    291c:	88 23       	and	r24, r24
    291e:	4c f4       	brge	.+18     	; 0x2932 <GenerateQuestion+0x67c>
		__ticks = 1;
    2920:	ce 01       	movw	r24, r28
    2922:	8b 5a       	subi	r24, 0xAB	; 171
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	21 e0       	ldi	r18, 0x01	; 1
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	fc 01       	movw	r30, r24
    292c:	31 83       	std	Z+1, r19	; 0x01
    292e:	20 83       	st	Z, r18
    2930:	69 c0       	rjmp	.+210    	; 0x2a04 <GenerateQuestion+0x74e>
	else if (__tmp > 65535)
    2932:	ce 01       	movw	r24, r28
    2934:	8f 5a       	subi	r24, 0xAF	; 175
    2936:	9f 4f       	sbci	r25, 0xFF	; 255
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	57 e4       	ldi	r21, 0x47	; 71
    2940:	fc 01       	movw	r30, r24
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    294e:	18 16       	cp	r1, r24
    2950:	0c f0       	brlt	.+2      	; 0x2954 <GenerateQuestion+0x69e>
    2952:	46 c0       	rjmp	.+140    	; 0x29e0 <GenerateQuestion+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e2       	ldi	r20, 0x20	; 32
    295a:	51 e4       	ldi	r21, 0x41	; 65
    295c:	6b 81       	ldd	r22, Y+3	; 0x03
    295e:	7c 81       	ldd	r23, Y+4	; 0x04
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	9e 81       	ldd	r25, Y+6	; 0x06
    2964:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8e 01       	movw	r16, r28
    296e:	0b 5a       	subi	r16, 0xAB	; 171
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	bc 01       	movw	r22, r24
    2974:	cd 01       	movw	r24, r26
    2976:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	f8 01       	movw	r30, r16
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	80 83       	st	Z, r24
    2984:	24 c0       	rjmp	.+72     	; 0x29ce <GenerateQuestion+0x718>
    2986:	ce 01       	movw	r24, r28
    2988:	89 5a       	subi	r24, 0xA9	; 169
    298a:	9f 4f       	sbci	r25, 0xFF	; 255
    298c:	29 e1       	ldi	r18, 0x19	; 25
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	fc 01       	movw	r30, r24
    2992:	31 83       	std	Z+1, r19	; 0x01
    2994:	20 83       	st	Z, r18
    2996:	ce 01       	movw	r24, r28
    2998:	89 5a       	subi	r24, 0xA9	; 169
    299a:	9f 4f       	sbci	r25, 0xFF	; 255
    299c:	fc 01       	movw	r30, r24
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <GenerateQuestion+0x6ec>
    29a6:	9e 01       	movw	r18, r28
    29a8:	29 5a       	subi	r18, 0xA9	; 169
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	f9 01       	movw	r30, r18
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	ce 01       	movw	r24, r28
    29b4:	8b 5a       	subi	r24, 0xAB	; 171
    29b6:	9f 4f       	sbci	r25, 0xFF	; 255
    29b8:	9e 01       	movw	r18, r28
    29ba:	2b 5a       	subi	r18, 0xAB	; 171
    29bc:	3f 4f       	sbci	r19, 0xFF	; 255
    29be:	f9 01       	movw	r30, r18
    29c0:	20 81       	ld	r18, Z
    29c2:	31 81       	ldd	r19, Z+1	; 0x01
    29c4:	21 50       	subi	r18, 0x01	; 1
    29c6:	31 09       	sbc	r19, r1
    29c8:	fc 01       	movw	r30, r24
    29ca:	31 83       	std	Z+1, r19	; 0x01
    29cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ce:	ce 01       	movw	r24, r28
    29d0:	8b 5a       	subi	r24, 0xAB	; 171
    29d2:	9f 4f       	sbci	r25, 0xFF	; 255
    29d4:	fc 01       	movw	r30, r24
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	89 2b       	or	r24, r25
    29dc:	a1 f6       	brne	.-88     	; 0x2986 <GenerateQuestion+0x6d0>
    29de:	68 c2       	rjmp	.+1232   	; 0x2eb0 <GenerateQuestion+0xbfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	8e 01       	movw	r16, r28
    29e2:	0b 5a       	subi	r16, 0xAB	; 171
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	ce 01       	movw	r24, r28
    29e8:	8f 5a       	subi	r24, 0xAF	; 175
    29ea:	9f 4f       	sbci	r25, 0xFF	; 255
    29ec:	fc 01       	movw	r30, r24
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	f8 01       	movw	r30, r16
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	80 83       	st	Z, r24
    2a04:	ce 01       	movw	r24, r28
    2a06:	87 5a       	subi	r24, 0xA7	; 167
    2a08:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0a:	9e 01       	movw	r18, r28
    2a0c:	2b 5a       	subi	r18, 0xAB	; 171
    2a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a10:	f9 01       	movw	r30, r18
    2a12:	20 81       	ld	r18, Z
    2a14:	31 81       	ldd	r19, Z+1	; 0x01
    2a16:	fc 01       	movw	r30, r24
    2a18:	31 83       	std	Z+1, r19	; 0x01
    2a1a:	20 83       	st	Z, r18
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	87 5a       	subi	r24, 0xA7	; 167
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	fc 01       	movw	r30, r24
    2a24:	80 81       	ld	r24, Z
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <GenerateQuestion+0x772>
    2a2c:	9e 01       	movw	r18, r28
    2a2e:	27 5a       	subi	r18, 0xA7	; 167
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	f9 01       	movw	r30, r18
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	80 83       	st	Z, r24
    2a38:	3b c2       	rjmp	.+1142   	; 0x2eb0 <GenerateQuestion+0xbfa>
			_delay_ms(FOUR_SECONDS);
}
	else { 
		LCD_clear();
    2a3a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_clear>
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a0 ea       	ldi	r26, 0xA0	; 160
    2a44:	b1 e4       	ldi	r27, 0x41	; 65
    2a46:	8b 8f       	std	Y+27, r24	; 0x1b
    2a48:	9c 8f       	std	Y+28, r25	; 0x1c
    2a4a:	ad 8f       	std	Y+29, r26	; 0x1d
    2a4c:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	8e 01       	movw	r16, r28
    2a50:	07 58       	subi	r16, 0x87	; 135
    2a52:	1f 4f       	sbci	r17, 0xFF	; 255
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4a e7       	ldi	r20, 0x7A	; 122
    2a5a:	53 e4       	ldi	r21, 0x43	; 67
    2a5c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2a5e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a64:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	f8 01       	movw	r30, r16
    2a6e:	80 83       	st	Z, r24
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	a2 83       	std	Z+2, r26	; 0x02
    2a74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a76:	ce 01       	movw	r24, r28
    2a78:	87 58       	subi	r24, 0x87	; 135
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	fc 01       	movw	r30, r24
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	4c f4       	brge	.+18     	; 0x2aa8 <GenerateQuestion+0x7f2>
		__ticks = 1;
    2a96:	ce 01       	movw	r24, r28
    2a98:	83 58       	subi	r24, 0x83	; 131
    2a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9c:	21 e0       	ldi	r18, 0x01	; 1
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	31 83       	std	Z+1, r19	; 0x01
    2aa4:	20 83       	st	Z, r18
    2aa6:	69 c0       	rjmp	.+210    	; 0x2b7a <GenerateQuestion+0x8c4>
	else if (__tmp > 65535)
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	87 58       	subi	r24, 0x87	; 135
    2aac:	9f 4f       	sbci	r25, 0xFF	; 255
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	3f ef       	ldi	r19, 0xFF	; 255
    2ab2:	4f e7       	ldi	r20, 0x7F	; 127
    2ab4:	57 e4       	ldi	r21, 0x47	; 71
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	60 81       	ld	r22, Z
    2aba:	71 81       	ldd	r23, Z+1	; 0x01
    2abc:	82 81       	ldd	r24, Z+2	; 0x02
    2abe:	93 81       	ldd	r25, Z+3	; 0x03
    2ac0:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	0c f0       	brlt	.+2      	; 0x2aca <GenerateQuestion+0x814>
    2ac8:	46 c0       	rjmp	.+140    	; 0x2b56 <GenerateQuestion+0x8a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2ad4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ad8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ada:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	03 58       	subi	r16, 0x83	; 131
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	f8 01       	movw	r30, r16
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	80 83       	st	Z, r24
    2afa:	24 c0       	rjmp	.+72     	; 0x2b44 <GenerateQuestion+0x88e>
    2afc:	ce 01       	movw	r24, r28
    2afe:	81 58       	subi	r24, 0x81	; 129
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	29 e1       	ldi	r18, 0x19	; 25
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	fc 01       	movw	r30, r24
    2b08:	31 83       	std	Z+1, r19	; 0x01
    2b0a:	20 83       	st	Z, r18
    2b0c:	ce 01       	movw	r24, r28
    2b0e:	81 58       	subi	r24, 0x81	; 129
    2b10:	9f 4f       	sbci	r25, 0xFF	; 255
    2b12:	fc 01       	movw	r30, r24
    2b14:	80 81       	ld	r24, Z
    2b16:	91 81       	ldd	r25, Z+1	; 0x01
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <GenerateQuestion+0x862>
    2b1c:	9e 01       	movw	r18, r28
    2b1e:	21 58       	subi	r18, 0x81	; 129
    2b20:	3f 4f       	sbci	r19, 0xFF	; 255
    2b22:	f9 01       	movw	r30, r18
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b28:	ce 01       	movw	r24, r28
    2b2a:	83 58       	subi	r24, 0x83	; 131
    2b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2e:	9e 01       	movw	r18, r28
    2b30:	23 58       	subi	r18, 0x83	; 131
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	f9 01       	movw	r30, r18
    2b36:	20 81       	ld	r18, Z
    2b38:	31 81       	ldd	r19, Z+1	; 0x01
    2b3a:	21 50       	subi	r18, 0x01	; 1
    2b3c:	31 09       	sbc	r19, r1
    2b3e:	fc 01       	movw	r30, r24
    2b40:	31 83       	std	Z+1, r19	; 0x01
    2b42:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b44:	ce 01       	movw	r24, r28
    2b46:	83 58       	subi	r24, 0x83	; 131
    2b48:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	80 81       	ld	r24, Z
    2b4e:	91 81       	ldd	r25, Z+1	; 0x01
    2b50:	89 2b       	or	r24, r25
    2b52:	a1 f6       	brne	.-88     	; 0x2afc <GenerateQuestion+0x846>
    2b54:	2c c0       	rjmp	.+88     	; 0x2bae <GenerateQuestion+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b56:	8e 01       	movw	r16, r28
    2b58:	03 58       	subi	r16, 0x83	; 131
    2b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	87 58       	subi	r24, 0x87	; 135
    2b60:	9f 4f       	sbci	r25, 0xFF	; 255
    2b62:	fc 01       	movw	r30, r24
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	f8 01       	movw	r30, r16
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	80 83       	st	Z, r24
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	8f 57       	subi	r24, 0x7F	; 127
    2b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b80:	9e 01       	movw	r18, r28
    2b82:	23 58       	subi	r18, 0x83	; 131
    2b84:	3f 4f       	sbci	r19, 0xFF	; 255
    2b86:	f9 01       	movw	r30, r18
    2b88:	20 81       	ld	r18, Z
    2b8a:	31 81       	ldd	r19, Z+1	; 0x01
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	31 83       	std	Z+1, r19	; 0x01
    2b90:	20 83       	st	Z, r18
    2b92:	ce 01       	movw	r24, r28
    2b94:	8f 57       	subi	r24, 0x7F	; 127
    2b96:	9f 4f       	sbci	r25, 0xFF	; 255
    2b98:	fc 01       	movw	r30, r24
    2b9a:	80 81       	ld	r24, Z
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <GenerateQuestion+0x8e8>
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	2f 57       	subi	r18, 0x7F	; 127
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	f9 01       	movw	r30, r18
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
			_delay_ms(TWENTY_MS);
		DIO_WritePin(BUZZER_PIN,HIGH);
    2bae:	61 e0       	ldi	r22, 0x01	; 1
    2bb0:	8b e0       	ldi	r24, 0x0B	; 11
    2bb2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	aa ef       	ldi	r26, 0xFA	; 250
    2bbc:	b4 e4       	ldi	r27, 0x44	; 68
    2bbe:	8f 8f       	std	Y+31, r24	; 0x1f
    2bc0:	98 a3       	std	Y+32, r25	; 0x20
    2bc2:	a9 a3       	std	Y+33, r26	; 0x21
    2bc4:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	8e 01       	movw	r16, r28
    2bc8:	01 59       	subi	r16, 0x91	; 145
    2bca:	1f 4f       	sbci	r17, 0xFF	; 255
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	4a e7       	ldi	r20, 0x7A	; 122
    2bd2:	53 e4       	ldi	r21, 0x43	; 67
    2bd4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bd6:	78 a1       	ldd	r23, Y+32	; 0x20
    2bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bda:	9a a1       	ldd	r25, Y+34	; 0x22
    2bdc:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	f8 01       	movw	r30, r16
    2be6:	80 83       	st	Z, r24
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	a2 83       	std	Z+2, r26	; 0x02
    2bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bee:	ce 01       	movw	r24, r28
    2bf0:	81 59       	subi	r24, 0x91	; 145
    2bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	5f e3       	ldi	r21, 0x3F	; 63
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	4c f4       	brge	.+18     	; 0x2c20 <GenerateQuestion+0x96a>
		__ticks = 1;
    2c0e:	ce 01       	movw	r24, r28
    2c10:	8d 58       	subi	r24, 0x8D	; 141
    2c12:	9f 4f       	sbci	r25, 0xFF	; 255
    2c14:	21 e0       	ldi	r18, 0x01	; 1
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	fc 01       	movw	r30, r24
    2c1a:	31 83       	std	Z+1, r19	; 0x01
    2c1c:	20 83       	st	Z, r18
    2c1e:	69 c0       	rjmp	.+210    	; 0x2cf2 <GenerateQuestion+0xa3c>
	else if (__tmp > 65535)
    2c20:	ce 01       	movw	r24, r28
    2c22:	81 59       	subi	r24, 0x91	; 145
    2c24:	9f 4f       	sbci	r25, 0xFF	; 255
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	fc 01       	movw	r30, r24
    2c30:	60 81       	ld	r22, Z
    2c32:	71 81       	ldd	r23, Z+1	; 0x01
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    2c3c:	18 16       	cp	r1, r24
    2c3e:	0c f0       	brlt	.+2      	; 0x2c42 <GenerateQuestion+0x98c>
    2c40:	46 c0       	rjmp	.+140    	; 0x2cce <GenerateQuestion+0xa18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e2       	ldi	r20, 0x20	; 32
    2c48:	51 e4       	ldi	r21, 0x41	; 65
    2c4a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c4c:	78 a1       	ldd	r23, Y+32	; 0x20
    2c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c50:	9a a1       	ldd	r25, Y+34	; 0x22
    2c52:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	8e 01       	movw	r16, r28
    2c5c:	0d 58       	subi	r16, 0x8D	; 141
    2c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	80 83       	st	Z, r24
    2c72:	24 c0       	rjmp	.+72     	; 0x2cbc <GenerateQuestion+0xa06>
    2c74:	ce 01       	movw	r24, r28
    2c76:	8b 58       	subi	r24, 0x8B	; 139
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	29 e1       	ldi	r18, 0x19	; 25
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	fc 01       	movw	r30, r24
    2c80:	31 83       	std	Z+1, r19	; 0x01
    2c82:	20 83       	st	Z, r18
    2c84:	ce 01       	movw	r24, r28
    2c86:	8b 58       	subi	r24, 0x8B	; 139
    2c88:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	80 81       	ld	r24, Z
    2c8e:	91 81       	ldd	r25, Z+1	; 0x01
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <GenerateQuestion+0x9da>
    2c94:	9e 01       	movw	r18, r28
    2c96:	2b 58       	subi	r18, 0x8B	; 139
    2c98:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9a:	f9 01       	movw	r30, r18
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	8d 58       	subi	r24, 0x8D	; 141
    2ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca6:	9e 01       	movw	r18, r28
    2ca8:	2d 58       	subi	r18, 0x8D	; 141
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	f9 01       	movw	r30, r18
    2cae:	20 81       	ld	r18, Z
    2cb0:	31 81       	ldd	r19, Z+1	; 0x01
    2cb2:	21 50       	subi	r18, 0x01	; 1
    2cb4:	31 09       	sbc	r19, r1
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	31 83       	std	Z+1, r19	; 0x01
    2cba:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	8d 58       	subi	r24, 0x8D	; 141
    2cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	89 2b       	or	r24, r25
    2cca:	a1 f6       	brne	.-88     	; 0x2c74 <GenerateQuestion+0x9be>
    2ccc:	2c c0       	rjmp	.+88     	; 0x2d26 <GenerateQuestion+0xa70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cce:	8e 01       	movw	r16, r28
    2cd0:	0d 58       	subi	r16, 0x8D	; 141
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	81 59       	subi	r24, 0x91	; 145
    2cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cda:	fc 01       	movw	r30, r24
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	f8 01       	movw	r30, r16
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	89 58       	subi	r24, 0x89	; 137
    2cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf8:	9e 01       	movw	r18, r28
    2cfa:	2d 58       	subi	r18, 0x8D	; 141
    2cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfe:	f9 01       	movw	r30, r18
    2d00:	20 81       	ld	r18, Z
    2d02:	31 81       	ldd	r19, Z+1	; 0x01
    2d04:	fc 01       	movw	r30, r24
    2d06:	31 83       	std	Z+1, r19	; 0x01
    2d08:	20 83       	st	Z, r18
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	89 58       	subi	r24, 0x89	; 137
    2d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d10:	fc 01       	movw	r30, r24
    2d12:	80 81       	ld	r24, Z
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <GenerateQuestion+0xa60>
    2d1a:	9e 01       	movw	r18, r28
    2d1c:	29 58       	subi	r18, 0x89	; 137
    2d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d20:	f9 01       	movw	r30, r18
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
		_delay_ms(TWO_SECONDS);
		DIO_WritePin(BUZZER_PIN,LOW);
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	8b e0       	ldi	r24, 0x0B	; 11
    2d2a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
		LCD_displayStringRowColumn(ROW1,COL0,"Wrong Answer ");
    2d2e:	46 e0       	ldi	r20, 0x06	; 6
    2d30:	51 e0       	ldi	r21, 0x01	; 1
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_displayStringRowColumn>
		LCD_displayChar(SAD_EMOJI);
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	aa e7       	ldi	r26, 0x7A	; 122
    2d46:	b5 e4       	ldi	r27, 0x45	; 69
    2d48:	8f 87       	std	Y+15, r24	; 0x0f
    2d4a:	98 8b       	std	Y+16, r25	; 0x10
    2d4c:	a9 8b       	std	Y+17, r26	; 0x11
    2d4e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d50:	8e 01       	movw	r16, r28
    2d52:	0b 59       	subi	r16, 0x9B	; 155
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	4a e7       	ldi	r20, 0x7A	; 122
    2d5c:	53 e4       	ldi	r21, 0x43	; 67
    2d5e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d60:	78 89       	ldd	r23, Y+16	; 0x10
    2d62:	89 89       	ldd	r24, Y+17	; 0x11
    2d64:	9a 89       	ldd	r25, Y+18	; 0x12
    2d66:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	f8 01       	movw	r30, r16
    2d70:	80 83       	st	Z, r24
    2d72:	91 83       	std	Z+1, r25	; 0x01
    2d74:	a2 83       	std	Z+2, r26	; 0x02
    2d76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d78:	ce 01       	movw	r24, r28
    2d7a:	8b 59       	subi	r24, 0x9B	; 155
    2d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e8       	ldi	r20, 0x80	; 128
    2d84:	5f e3       	ldi	r21, 0x3F	; 63
    2d86:	fc 01       	movw	r30, r24
    2d88:	60 81       	ld	r22, Z
    2d8a:	71 81       	ldd	r23, Z+1	; 0x01
    2d8c:	82 81       	ldd	r24, Z+2	; 0x02
    2d8e:	93 81       	ldd	r25, Z+3	; 0x03
    2d90:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    2d94:	88 23       	and	r24, r24
    2d96:	4c f4       	brge	.+18     	; 0x2daa <GenerateQuestion+0xaf4>
		__ticks = 1;
    2d98:	ce 01       	movw	r24, r28
    2d9a:	87 59       	subi	r24, 0x97	; 151
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	21 e0       	ldi	r18, 0x01	; 1
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	fc 01       	movw	r30, r24
    2da4:	31 83       	std	Z+1, r19	; 0x01
    2da6:	20 83       	st	Z, r18
    2da8:	69 c0       	rjmp	.+210    	; 0x2e7c <GenerateQuestion+0xbc6>
	else if (__tmp > 65535)
    2daa:	ce 01       	movw	r24, r28
    2dac:	8b 59       	subi	r24, 0x9B	; 155
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	3f ef       	ldi	r19, 0xFF	; 255
    2db4:	4f e7       	ldi	r20, 0x7F	; 127
    2db6:	57 e4       	ldi	r21, 0x47	; 71
    2db8:	fc 01       	movw	r30, r24
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    2dc6:	18 16       	cp	r1, r24
    2dc8:	0c f0       	brlt	.+2      	; 0x2dcc <GenerateQuestion+0xb16>
    2dca:	46 c0       	rjmp	.+140    	; 0x2e58 <GenerateQuestion+0xba2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	6f 85       	ldd	r22, Y+15	; 0x0f
    2dd6:	78 89       	ldd	r23, Y+16	; 0x10
    2dd8:	89 89       	ldd	r24, Y+17	; 0x11
    2dda:	9a 89       	ldd	r25, Y+18	; 0x12
    2ddc:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	8e 01       	movw	r16, r28
    2de6:	07 59       	subi	r16, 0x97	; 151
    2de8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	f8 01       	movw	r30, r16
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
    2dfc:	24 c0       	rjmp	.+72     	; 0x2e46 <GenerateQuestion+0xb90>
    2dfe:	ce 01       	movw	r24, r28
    2e00:	85 59       	subi	r24, 0x95	; 149
    2e02:	9f 4f       	sbci	r25, 0xFF	; 255
    2e04:	29 e1       	ldi	r18, 0x19	; 25
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	fc 01       	movw	r30, r24
    2e0a:	31 83       	std	Z+1, r19	; 0x01
    2e0c:	20 83       	st	Z, r18
    2e0e:	ce 01       	movw	r24, r28
    2e10:	85 59       	subi	r24, 0x95	; 149
    2e12:	9f 4f       	sbci	r25, 0xFF	; 255
    2e14:	fc 01       	movw	r30, r24
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <GenerateQuestion+0xb64>
    2e1e:	9e 01       	movw	r18, r28
    2e20:	25 59       	subi	r18, 0x95	; 149
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	f9 01       	movw	r30, r18
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	87 59       	subi	r24, 0x97	; 151
    2e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e30:	9e 01       	movw	r18, r28
    2e32:	27 59       	subi	r18, 0x97	; 151
    2e34:	3f 4f       	sbci	r19, 0xFF	; 255
    2e36:	f9 01       	movw	r30, r18
    2e38:	20 81       	ld	r18, Z
    2e3a:	31 81       	ldd	r19, Z+1	; 0x01
    2e3c:	21 50       	subi	r18, 0x01	; 1
    2e3e:	31 09       	sbc	r19, r1
    2e40:	fc 01       	movw	r30, r24
    2e42:	31 83       	std	Z+1, r19	; 0x01
    2e44:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	ce 01       	movw	r24, r28
    2e48:	87 59       	subi	r24, 0x97	; 151
    2e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	80 81       	ld	r24, Z
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	89 2b       	or	r24, r25
    2e54:	a1 f6       	brne	.-88     	; 0x2dfe <GenerateQuestion+0xb48>
    2e56:	2c c0       	rjmp	.+88     	; 0x2eb0 <GenerateQuestion+0xbfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	8e 01       	movw	r16, r28
    2e5a:	07 59       	subi	r16, 0x97	; 151
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	ce 01       	movw	r24, r28
    2e60:	8b 59       	subi	r24, 0x9B	; 155
    2e62:	9f 4f       	sbci	r25, 0xFF	; 255
    2e64:	fc 01       	movw	r30, r24
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	f8 01       	movw	r30, r16
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	80 83       	st	Z, r24
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	83 59       	subi	r24, 0x93	; 147
    2e80:	9f 4f       	sbci	r25, 0xFF	; 255
    2e82:	9e 01       	movw	r18, r28
    2e84:	27 59       	subi	r18, 0x97	; 151
    2e86:	3f 4f       	sbci	r19, 0xFF	; 255
    2e88:	f9 01       	movw	r30, r18
    2e8a:	20 81       	ld	r18, Z
    2e8c:	31 81       	ldd	r19, Z+1	; 0x01
    2e8e:	fc 01       	movw	r30, r24
    2e90:	31 83       	std	Z+1, r19	; 0x01
    2e92:	20 83       	st	Z, r18
    2e94:	ce 01       	movw	r24, r28
    2e96:	83 59       	subi	r24, 0x93	; 147
    2e98:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	80 81       	ld	r24, Z
    2e9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <GenerateQuestion+0xbea>
    2ea4:	9e 01       	movw	r18, r28
    2ea6:	23 59       	subi	r18, 0x93	; 147
    2ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eaa:	f9 01       	movw	r30, r18
    2eac:	91 83       	std	Z+1, r25	; 0x01
    2eae:	80 83       	st	Z, r24
	uint8 score= ASCII_OF_ZERO;
	uint8 ans[NUM_OF_QUES];
	uint8 i;
	

for(i=0;i<NUM_OF_QUES;i++)
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	8a 83       	std	Y+2, r24	; 0x02
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	85 30       	cpi	r24, 0x05	; 5
    2eba:	08 f4       	brcc	.+2      	; 0x2ebe <GenerateQuestion+0xc08>
    2ebc:	0d ca       	rjmp	.-3046   	; 0x22d8 <GenerateQuestion+0x22>
		
		}
	
	}

	LCD_clear();
    2ebe:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_clear>
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a0 ea       	ldi	r26, 0xA0	; 160
    2ec8:	b1 e4       	ldi	r27, 0x41	; 65
    2eca:	8b a3       	std	Y+35, r24	; 0x23
    2ecc:	9c a3       	std	Y+36, r25	; 0x24
    2ece:	ad a3       	std	Y+37, r26	; 0x25
    2ed0:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ed2:	8e 01       	movw	r16, r28
    2ed4:	0f 55       	subi	r16, 0x5F	; 95
    2ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4a e7       	ldi	r20, 0x7A	; 122
    2ede:	53 e4       	ldi	r21, 0x43	; 67
    2ee0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	f8 01       	movw	r30, r16
    2ef2:	80 83       	st	Z, r24
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	a2 83       	std	Z+2, r26	; 0x02
    2ef8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2efa:	ce 01       	movw	r24, r28
    2efc:	8f 55       	subi	r24, 0x5F	; 95
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	40 e8       	ldi	r20, 0x80	; 128
    2f06:	5f e3       	ldi	r21, 0x3F	; 63
    2f08:	fc 01       	movw	r30, r24
    2f0a:	60 81       	ld	r22, Z
    2f0c:	71 81       	ldd	r23, Z+1	; 0x01
    2f0e:	82 81       	ldd	r24, Z+2	; 0x02
    2f10:	93 81       	ldd	r25, Z+3	; 0x03
    2f12:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    2f16:	88 23       	and	r24, r24
    2f18:	4c f4       	brge	.+18     	; 0x2f2c <GenerateQuestion+0xc76>
		__ticks = 1;
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	8b 55       	subi	r24, 0x5B	; 91
    2f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f20:	21 e0       	ldi	r18, 0x01	; 1
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	fc 01       	movw	r30, r24
    2f26:	31 83       	std	Z+1, r19	; 0x01
    2f28:	20 83       	st	Z, r18
    2f2a:	69 c0       	rjmp	.+210    	; 0x2ffe <GenerateQuestion+0xd48>
	else if (__tmp > 65535)
    2f2c:	ce 01       	movw	r24, r28
    2f2e:	8f 55       	subi	r24, 0x5F	; 95
    2f30:	9f 4f       	sbci	r25, 0xFF	; 255
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	3f ef       	ldi	r19, 0xFF	; 255
    2f36:	4f e7       	ldi	r20, 0x7F	; 127
    2f38:	57 e4       	ldi	r21, 0x47	; 71
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	93 81       	ldd	r25, Z+3	; 0x03
    2f44:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	0c f0       	brlt	.+2      	; 0x2f4e <GenerateQuestion+0xc98>
    2f4c:	46 c0       	rjmp	.+140    	; 0x2fda <GenerateQuestion+0xd24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	6b a1       	ldd	r22, Y+35	; 0x23
    2f58:	7c a1       	ldd	r23, Y+36	; 0x24
    2f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f5e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	8e 01       	movw	r16, r28
    2f68:	0b 55       	subi	r16, 0x5B	; 91
    2f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	f8 01       	movw	r30, r16
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
    2f7e:	24 c0       	rjmp	.+72     	; 0x2fc8 <GenerateQuestion+0xd12>
    2f80:	ce 01       	movw	r24, r28
    2f82:	89 55       	subi	r24, 0x59	; 89
    2f84:	9f 4f       	sbci	r25, 0xFF	; 255
    2f86:	29 e1       	ldi	r18, 0x19	; 25
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	31 83       	std	Z+1, r19	; 0x01
    2f8e:	20 83       	st	Z, r18
    2f90:	ce 01       	movw	r24, r28
    2f92:	89 55       	subi	r24, 0x59	; 89
    2f94:	9f 4f       	sbci	r25, 0xFF	; 255
    2f96:	fc 01       	movw	r30, r24
    2f98:	80 81       	ld	r24, Z
    2f9a:	91 81       	ldd	r25, Z+1	; 0x01
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <GenerateQuestion+0xce6>
    2fa0:	9e 01       	movw	r18, r28
    2fa2:	29 55       	subi	r18, 0x59	; 89
    2fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa6:	f9 01       	movw	r30, r18
    2fa8:	91 83       	std	Z+1, r25	; 0x01
    2faa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fac:	ce 01       	movw	r24, r28
    2fae:	8b 55       	subi	r24, 0x5B	; 91
    2fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb2:	9e 01       	movw	r18, r28
    2fb4:	2b 55       	subi	r18, 0x5B	; 91
    2fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb8:	f9 01       	movw	r30, r18
    2fba:	20 81       	ld	r18, Z
    2fbc:	31 81       	ldd	r19, Z+1	; 0x01
    2fbe:	21 50       	subi	r18, 0x01	; 1
    2fc0:	31 09       	sbc	r19, r1
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	31 83       	std	Z+1, r19	; 0x01
    2fc6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc8:	ce 01       	movw	r24, r28
    2fca:	8b 55       	subi	r24, 0x5B	; 91
    2fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fce:	fc 01       	movw	r30, r24
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	89 2b       	or	r24, r25
    2fd6:	a1 f6       	brne	.-88     	; 0x2f80 <GenerateQuestion+0xcca>
    2fd8:	2c c0       	rjmp	.+88     	; 0x3032 <GenerateQuestion+0xd7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fda:	8e 01       	movw	r16, r28
    2fdc:	0b 55       	subi	r16, 0x5B	; 91
    2fde:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	8f 55       	subi	r24, 0x5F	; 95
    2fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	60 81       	ld	r22, Z
    2fea:	71 81       	ldd	r23, Z+1	; 0x01
    2fec:	82 81       	ldd	r24, Z+2	; 0x02
    2fee:	93 81       	ldd	r25, Z+3	; 0x03
    2ff0:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	80 83       	st	Z, r24
    2ffe:	ce 01       	movw	r24, r28
    3000:	87 55       	subi	r24, 0x57	; 87
    3002:	9f 4f       	sbci	r25, 0xFF	; 255
    3004:	9e 01       	movw	r18, r28
    3006:	2b 55       	subi	r18, 0x5B	; 91
    3008:	3f 4f       	sbci	r19, 0xFF	; 255
    300a:	f9 01       	movw	r30, r18
    300c:	20 81       	ld	r18, Z
    300e:	31 81       	ldd	r19, Z+1	; 0x01
    3010:	fc 01       	movw	r30, r24
    3012:	31 83       	std	Z+1, r19	; 0x01
    3014:	20 83       	st	Z, r18
    3016:	ce 01       	movw	r24, r28
    3018:	87 55       	subi	r24, 0x57	; 87
    301a:	9f 4f       	sbci	r25, 0xFF	; 255
    301c:	fc 01       	movw	r30, r24
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <GenerateQuestion+0xd6c>
    3026:	9e 01       	movw	r18, r28
    3028:	27 55       	subi	r18, 0x57	; 87
    302a:	3f 4f       	sbci	r19, 0xFF	; 255
    302c:	f9 01       	movw	r30, r18
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
	_delay_ms(TWENTY_MS);
	LCD_displayStringRowColumn(ROW1,COL0,"Your Score is ");
    3032:	44 e1       	ldi	r20, 0x14	; 20
    3034:	51 e0       	ldi	r21, 0x01	; 1
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_displayStringRowColumn>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a0 ea       	ldi	r26, 0xA0	; 160
    3044:	b1 e4       	ldi	r27, 0x41	; 65
    3046:	8f a3       	std	Y+39, r24	; 0x27
    3048:	98 a7       	std	Y+40, r25	; 0x28
    304a:	a9 a7       	std	Y+41, r26	; 0x29
    304c:	ba a7       	std	Y+42, r27	; 0x2a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    304e:	8e 01       	movw	r16, r28
    3050:	09 56       	subi	r16, 0x69	; 105
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a e7       	ldi	r20, 0x7A	; 122
    305a:	53 e4       	ldi	r21, 0x43	; 67
    305c:	6f a1       	ldd	r22, Y+39	; 0x27
    305e:	78 a5       	ldd	r23, Y+40	; 0x28
    3060:	89 a5       	ldd	r24, Y+41	; 0x29
    3062:	9a a5       	ldd	r25, Y+42	; 0x2a
    3064:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	f8 01       	movw	r30, r16
    306e:	80 83       	st	Z, r24
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	a2 83       	std	Z+2, r26	; 0x02
    3074:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3076:	ce 01       	movw	r24, r28
    3078:	89 56       	subi	r24, 0x69	; 105
    307a:	9f 4f       	sbci	r25, 0xFF	; 255
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	fc 01       	movw	r30, r24
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3092:	88 23       	and	r24, r24
    3094:	4c f4       	brge	.+18     	; 0x30a8 <GenerateQuestion+0xdf2>
		__ticks = 1;
    3096:	ce 01       	movw	r24, r28
    3098:	85 56       	subi	r24, 0x65	; 101
    309a:	9f 4f       	sbci	r25, 0xFF	; 255
    309c:	21 e0       	ldi	r18, 0x01	; 1
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	fc 01       	movw	r30, r24
    30a2:	31 83       	std	Z+1, r19	; 0x01
    30a4:	20 83       	st	Z, r18
    30a6:	69 c0       	rjmp	.+210    	; 0x317a <GenerateQuestion+0xec4>
	else if (__tmp > 65535)
    30a8:	ce 01       	movw	r24, r28
    30aa:	89 56       	subi	r24, 0x69	; 105
    30ac:	9f 4f       	sbci	r25, 0xFF	; 255
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	3f ef       	ldi	r19, 0xFF	; 255
    30b2:	4f e7       	ldi	r20, 0x7F	; 127
    30b4:	57 e4       	ldi	r21, 0x47	; 71
    30b6:	fc 01       	movw	r30, r24
    30b8:	60 81       	ld	r22, Z
    30ba:	71 81       	ldd	r23, Z+1	; 0x01
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	93 81       	ldd	r25, Z+3	; 0x03
    30c0:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	0c f0       	brlt	.+2      	; 0x30ca <GenerateQuestion+0xe14>
    30c8:	46 c0       	rjmp	.+140    	; 0x3156 <GenerateQuestion+0xea0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e2       	ldi	r20, 0x20	; 32
    30d0:	51 e4       	ldi	r21, 0x41	; 65
    30d2:	6f a1       	ldd	r22, Y+39	; 0x27
    30d4:	78 a5       	ldd	r23, Y+40	; 0x28
    30d6:	89 a5       	ldd	r24, Y+41	; 0x29
    30d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    30da:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	8e 01       	movw	r16, r28
    30e4:	05 56       	subi	r16, 0x65	; 101
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
    30e8:	bc 01       	movw	r22, r24
    30ea:	cd 01       	movw	r24, r26
    30ec:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	f8 01       	movw	r30, r16
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	80 83       	st	Z, r24
    30fa:	24 c0       	rjmp	.+72     	; 0x3144 <GenerateQuestion+0xe8e>
    30fc:	ce 01       	movw	r24, r28
    30fe:	83 56       	subi	r24, 0x63	; 99
    3100:	9f 4f       	sbci	r25, 0xFF	; 255
    3102:	29 e1       	ldi	r18, 0x19	; 25
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	fc 01       	movw	r30, r24
    3108:	31 83       	std	Z+1, r19	; 0x01
    310a:	20 83       	st	Z, r18
    310c:	ce 01       	movw	r24, r28
    310e:	83 56       	subi	r24, 0x63	; 99
    3110:	9f 4f       	sbci	r25, 0xFF	; 255
    3112:	fc 01       	movw	r30, r24
    3114:	80 81       	ld	r24, Z
    3116:	91 81       	ldd	r25, Z+1	; 0x01
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <GenerateQuestion+0xe62>
    311c:	9e 01       	movw	r18, r28
    311e:	23 56       	subi	r18, 0x63	; 99
    3120:	3f 4f       	sbci	r19, 0xFF	; 255
    3122:	f9 01       	movw	r30, r18
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	ce 01       	movw	r24, r28
    312a:	85 56       	subi	r24, 0x65	; 101
    312c:	9f 4f       	sbci	r25, 0xFF	; 255
    312e:	9e 01       	movw	r18, r28
    3130:	25 56       	subi	r18, 0x65	; 101
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	f9 01       	movw	r30, r18
    3136:	20 81       	ld	r18, Z
    3138:	31 81       	ldd	r19, Z+1	; 0x01
    313a:	21 50       	subi	r18, 0x01	; 1
    313c:	31 09       	sbc	r19, r1
    313e:	fc 01       	movw	r30, r24
    3140:	31 83       	std	Z+1, r19	; 0x01
    3142:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3144:	ce 01       	movw	r24, r28
    3146:	85 56       	subi	r24, 0x65	; 101
    3148:	9f 4f       	sbci	r25, 0xFF	; 255
    314a:	fc 01       	movw	r30, r24
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	89 2b       	or	r24, r25
    3152:	a1 f6       	brne	.-88     	; 0x30fc <GenerateQuestion+0xe46>
    3154:	2c c0       	rjmp	.+88     	; 0x31ae <GenerateQuestion+0xef8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3156:	8e 01       	movw	r16, r28
    3158:	05 56       	subi	r16, 0x65	; 101
    315a:	1f 4f       	sbci	r17, 0xFF	; 255
    315c:	ce 01       	movw	r24, r28
    315e:	89 56       	subi	r24, 0x69	; 105
    3160:	9f 4f       	sbci	r25, 0xFF	; 255
    3162:	fc 01       	movw	r30, r24
    3164:	60 81       	ld	r22, Z
    3166:	71 81       	ldd	r23, Z+1	; 0x01
    3168:	82 81       	ldd	r24, Z+2	; 0x02
    316a:	93 81       	ldd	r25, Z+3	; 0x03
    316c:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	f8 01       	movw	r30, r16
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	80 83       	st	Z, r24
    317a:	ce 01       	movw	r24, r28
    317c:	81 56       	subi	r24, 0x61	; 97
    317e:	9f 4f       	sbci	r25, 0xFF	; 255
    3180:	9e 01       	movw	r18, r28
    3182:	25 56       	subi	r18, 0x65	; 101
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	f9 01       	movw	r30, r18
    3188:	20 81       	ld	r18, Z
    318a:	31 81       	ldd	r19, Z+1	; 0x01
    318c:	fc 01       	movw	r30, r24
    318e:	31 83       	std	Z+1, r19	; 0x01
    3190:	20 83       	st	Z, r18
    3192:	ce 01       	movw	r24, r28
    3194:	81 56       	subi	r24, 0x61	; 97
    3196:	9f 4f       	sbci	r25, 0xFF	; 255
    3198:	fc 01       	movw	r30, r24
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <GenerateQuestion+0xee8>
    31a2:	9e 01       	movw	r18, r28
    31a4:	21 56       	subi	r18, 0x61	; 97
    31a6:	3f 4f       	sbci	r19, 0xFF	; 255
    31a8:	f9 01       	movw	r30, r18
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
	_delay_ms(TWENTY_MS);
	LCD_gotoRowColumn(ROW2,COL0);
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <LCD_gotoRowColumn>
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	a0 ea       	ldi	r26, 0xA0	; 160
    31bc:	b1 e4       	ldi	r27, 0x41	; 65
    31be:	8b a7       	std	Y+43, r24	; 0x2b
    31c0:	9c a7       	std	Y+44, r25	; 0x2c
    31c2:	ad a7       	std	Y+45, r26	; 0x2d
    31c4:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    31c6:	8e 01       	movw	r16, r28
    31c8:	03 57       	subi	r16, 0x73	; 115
    31ca:	1f 4f       	sbci	r17, 0xFF	; 255
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	4a e7       	ldi	r20, 0x7A	; 122
    31d2:	53 e4       	ldi	r21, 0x43	; 67
    31d4:	6b a5       	ldd	r22, Y+43	; 0x2b
    31d6:	7c a5       	ldd	r23, Y+44	; 0x2c
    31d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    31da:	9e a5       	ldd	r25, Y+46	; 0x2e
    31dc:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	f8 01       	movw	r30, r16
    31e6:	80 83       	st	Z, r24
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	a2 83       	std	Z+2, r26	; 0x02
    31ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31ee:	ce 01       	movw	r24, r28
    31f0:	83 57       	subi	r24, 0x73	; 115
    31f2:	9f 4f       	sbci	r25, 0xFF	; 255
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e8       	ldi	r20, 0x80	; 128
    31fa:	5f e3       	ldi	r21, 0x3F	; 63
    31fc:	fc 01       	movw	r30, r24
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    320a:	88 23       	and	r24, r24
    320c:	4c f4       	brge	.+18     	; 0x3220 <GenerateQuestion+0xf6a>
		__ticks = 1;
    320e:	ce 01       	movw	r24, r28
    3210:	8f 56       	subi	r24, 0x6F	; 111
    3212:	9f 4f       	sbci	r25, 0xFF	; 255
    3214:	21 e0       	ldi	r18, 0x01	; 1
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	fc 01       	movw	r30, r24
    321a:	31 83       	std	Z+1, r19	; 0x01
    321c:	20 83       	st	Z, r18
    321e:	69 c0       	rjmp	.+210    	; 0x32f2 <GenerateQuestion+0x103c>
	else if (__tmp > 65535)
    3220:	ce 01       	movw	r24, r28
    3222:	83 57       	subi	r24, 0x73	; 115
    3224:	9f 4f       	sbci	r25, 0xFF	; 255
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	3f ef       	ldi	r19, 0xFF	; 255
    322a:	4f e7       	ldi	r20, 0x7F	; 127
    322c:	57 e4       	ldi	r21, 0x47	; 71
    322e:	fc 01       	movw	r30, r24
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    323c:	18 16       	cp	r1, r24
    323e:	0c f0       	brlt	.+2      	; 0x3242 <GenerateQuestion+0xf8c>
    3240:	46 c0       	rjmp	.+140    	; 0x32ce <GenerateQuestion+0x1018>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e2       	ldi	r20, 0x20	; 32
    3248:	51 e4       	ldi	r21, 0x41	; 65
    324a:	6b a5       	ldd	r22, Y+43	; 0x2b
    324c:	7c a5       	ldd	r23, Y+44	; 0x2c
    324e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3250:	9e a5       	ldd	r25, Y+46	; 0x2e
    3252:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	8e 01       	movw	r16, r28
    325c:	0f 56       	subi	r16, 0x6F	; 111
    325e:	1f 4f       	sbci	r17, 0xFF	; 255
    3260:	bc 01       	movw	r22, r24
    3262:	cd 01       	movw	r24, r26
    3264:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	f8 01       	movw	r30, r16
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
    3272:	24 c0       	rjmp	.+72     	; 0x32bc <GenerateQuestion+0x1006>
    3274:	ce 01       	movw	r24, r28
    3276:	8d 56       	subi	r24, 0x6D	; 109
    3278:	9f 4f       	sbci	r25, 0xFF	; 255
    327a:	29 e1       	ldi	r18, 0x19	; 25
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	fc 01       	movw	r30, r24
    3280:	31 83       	std	Z+1, r19	; 0x01
    3282:	20 83       	st	Z, r18
    3284:	ce 01       	movw	r24, r28
    3286:	8d 56       	subi	r24, 0x6D	; 109
    3288:	9f 4f       	sbci	r25, 0xFF	; 255
    328a:	fc 01       	movw	r30, r24
    328c:	80 81       	ld	r24, Z
    328e:	91 81       	ldd	r25, Z+1	; 0x01
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <GenerateQuestion+0xfda>
    3294:	9e 01       	movw	r18, r28
    3296:	2d 56       	subi	r18, 0x6D	; 109
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
    329a:	f9 01       	movw	r30, r18
    329c:	91 83       	std	Z+1, r25	; 0x01
    329e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a0:	ce 01       	movw	r24, r28
    32a2:	8f 56       	subi	r24, 0x6F	; 111
    32a4:	9f 4f       	sbci	r25, 0xFF	; 255
    32a6:	9e 01       	movw	r18, r28
    32a8:	2f 56       	subi	r18, 0x6F	; 111
    32aa:	3f 4f       	sbci	r19, 0xFF	; 255
    32ac:	f9 01       	movw	r30, r18
    32ae:	20 81       	ld	r18, Z
    32b0:	31 81       	ldd	r19, Z+1	; 0x01
    32b2:	21 50       	subi	r18, 0x01	; 1
    32b4:	31 09       	sbc	r19, r1
    32b6:	fc 01       	movw	r30, r24
    32b8:	31 83       	std	Z+1, r19	; 0x01
    32ba:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32bc:	ce 01       	movw	r24, r28
    32be:	8f 56       	subi	r24, 0x6F	; 111
    32c0:	9f 4f       	sbci	r25, 0xFF	; 255
    32c2:	fc 01       	movw	r30, r24
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	89 2b       	or	r24, r25
    32ca:	a1 f6       	brne	.-88     	; 0x3274 <GenerateQuestion+0xfbe>
    32cc:	2c c0       	rjmp	.+88     	; 0x3326 <GenerateQuestion+0x1070>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ce:	8e 01       	movw	r16, r28
    32d0:	0f 56       	subi	r16, 0x6F	; 111
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	ce 01       	movw	r24, r28
    32d6:	83 57       	subi	r24, 0x73	; 115
    32d8:	9f 4f       	sbci	r25, 0xFF	; 255
    32da:	fc 01       	movw	r30, r24
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	f8 01       	movw	r30, r16
    32ee:	91 83       	std	Z+1, r25	; 0x01
    32f0:	80 83       	st	Z, r24
    32f2:	ce 01       	movw	r24, r28
    32f4:	8b 56       	subi	r24, 0x6B	; 107
    32f6:	9f 4f       	sbci	r25, 0xFF	; 255
    32f8:	9e 01       	movw	r18, r28
    32fa:	2f 56       	subi	r18, 0x6F	; 111
    32fc:	3f 4f       	sbci	r19, 0xFF	; 255
    32fe:	f9 01       	movw	r30, r18
    3300:	20 81       	ld	r18, Z
    3302:	31 81       	ldd	r19, Z+1	; 0x01
    3304:	fc 01       	movw	r30, r24
    3306:	31 83       	std	Z+1, r19	; 0x01
    3308:	20 83       	st	Z, r18
    330a:	ce 01       	movw	r24, r28
    330c:	8b 56       	subi	r24, 0x6B	; 107
    330e:	9f 4f       	sbci	r25, 0xFF	; 255
    3310:	fc 01       	movw	r30, r24
    3312:	80 81       	ld	r24, Z
    3314:	91 81       	ldd	r25, Z+1	; 0x01
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <GenerateQuestion+0x1060>
    331a:	9e 01       	movw	r18, r28
    331c:	2b 56       	subi	r18, 0x6B	; 107
    331e:	3f 4f       	sbci	r19, 0xFF	; 255
    3320:	f9 01       	movw	r30, r18
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	80 83       	st	Z, r24
	_delay_ms(TWENTY_MS);
	LCD_displayChar(score);
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	aa e7       	ldi	r26, 0x7A	; 122
    3332:	b5 e4       	ldi	r27, 0x45	; 69
    3334:	8f 8b       	std	Y+23, r24	; 0x17
    3336:	98 8f       	std	Y+24, r25	; 0x18
    3338:	a9 8f       	std	Y+25, r26	; 0x19
    333a:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    333c:	8e 01       	movw	r16, r28
    333e:	0d 57       	subi	r16, 0x7D	; 125
    3340:	1f 4f       	sbci	r17, 0xFF	; 255
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4a e7       	ldi	r20, 0x7A	; 122
    3348:	53 e4       	ldi	r21, 0x43	; 67
    334a:	6f 89       	ldd	r22, Y+23	; 0x17
    334c:	78 8d       	ldd	r23, Y+24	; 0x18
    334e:	89 8d       	ldd	r24, Y+25	; 0x19
    3350:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3352:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	f8 01       	movw	r30, r16
    335c:	80 83       	st	Z, r24
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	a2 83       	std	Z+2, r26	; 0x02
    3362:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3364:	ce 01       	movw	r24, r28
    3366:	8d 57       	subi	r24, 0x7D	; 125
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e8       	ldi	r20, 0x80	; 128
    3370:	5f e3       	ldi	r21, 0x3F	; 63
    3372:	fc 01       	movw	r30, r24
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	93 81       	ldd	r25, Z+3	; 0x03
    337c:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3380:	88 23       	and	r24, r24
    3382:	4c f4       	brge	.+18     	; 0x3396 <GenerateQuestion+0x10e0>
		__ticks = 1;
    3384:	ce 01       	movw	r24, r28
    3386:	89 57       	subi	r24, 0x79	; 121
    3388:	9f 4f       	sbci	r25, 0xFF	; 255
    338a:	21 e0       	ldi	r18, 0x01	; 1
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	fc 01       	movw	r30, r24
    3390:	31 83       	std	Z+1, r19	; 0x01
    3392:	20 83       	st	Z, r18
    3394:	69 c0       	rjmp	.+210    	; 0x3468 <GenerateQuestion+0x11b2>
	else if (__tmp > 65535)
    3396:	ce 01       	movw	r24, r28
    3398:	8d 57       	subi	r24, 0x7D	; 125
    339a:	9f 4f       	sbci	r25, 0xFF	; 255
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	3f ef       	ldi	r19, 0xFF	; 255
    33a0:	4f e7       	ldi	r20, 0x7F	; 127
    33a2:	57 e4       	ldi	r21, 0x47	; 71
    33a4:	fc 01       	movw	r30, r24
    33a6:	60 81       	ld	r22, Z
    33a8:	71 81       	ldd	r23, Z+1	; 0x01
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    33b2:	18 16       	cp	r1, r24
    33b4:	0c f0       	brlt	.+2      	; 0x33b8 <GenerateQuestion+0x1102>
    33b6:	46 c0       	rjmp	.+140    	; 0x3444 <GenerateQuestion+0x118e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e2       	ldi	r20, 0x20	; 32
    33be:	51 e4       	ldi	r21, 0x41	; 65
    33c0:	6f 89       	ldd	r22, Y+23	; 0x17
    33c2:	78 8d       	ldd	r23, Y+24	; 0x18
    33c4:	89 8d       	ldd	r24, Y+25	; 0x19
    33c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33c8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	8e 01       	movw	r16, r28
    33d2:	09 57       	subi	r16, 0x79	; 121
    33d4:	1f 4f       	sbci	r17, 0xFF	; 255
    33d6:	bc 01       	movw	r22, r24
    33d8:	cd 01       	movw	r24, r26
    33da:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	f8 01       	movw	r30, r16
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	80 83       	st	Z, r24
    33e8:	24 c0       	rjmp	.+72     	; 0x3432 <GenerateQuestion+0x117c>
    33ea:	ce 01       	movw	r24, r28
    33ec:	87 57       	subi	r24, 0x77	; 119
    33ee:	9f 4f       	sbci	r25, 0xFF	; 255
    33f0:	29 e1       	ldi	r18, 0x19	; 25
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	fc 01       	movw	r30, r24
    33f6:	31 83       	std	Z+1, r19	; 0x01
    33f8:	20 83       	st	Z, r18
    33fa:	ce 01       	movw	r24, r28
    33fc:	87 57       	subi	r24, 0x77	; 119
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	fc 01       	movw	r30, r24
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <GenerateQuestion+0x1150>
    340a:	9e 01       	movw	r18, r28
    340c:	27 57       	subi	r18, 0x77	; 119
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	f9 01       	movw	r30, r18
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3416:	ce 01       	movw	r24, r28
    3418:	89 57       	subi	r24, 0x79	; 121
    341a:	9f 4f       	sbci	r25, 0xFF	; 255
    341c:	9e 01       	movw	r18, r28
    341e:	29 57       	subi	r18, 0x79	; 121
    3420:	3f 4f       	sbci	r19, 0xFF	; 255
    3422:	f9 01       	movw	r30, r18
    3424:	20 81       	ld	r18, Z
    3426:	31 81       	ldd	r19, Z+1	; 0x01
    3428:	21 50       	subi	r18, 0x01	; 1
    342a:	31 09       	sbc	r19, r1
    342c:	fc 01       	movw	r30, r24
    342e:	31 83       	std	Z+1, r19	; 0x01
    3430:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3432:	ce 01       	movw	r24, r28
    3434:	89 57       	subi	r24, 0x79	; 121
    3436:	9f 4f       	sbci	r25, 0xFF	; 255
    3438:	fc 01       	movw	r30, r24
    343a:	80 81       	ld	r24, Z
    343c:	91 81       	ldd	r25, Z+1	; 0x01
    343e:	89 2b       	or	r24, r25
    3440:	a1 f6       	brne	.-88     	; 0x33ea <GenerateQuestion+0x1134>
    3442:	2c c0       	rjmp	.+88     	; 0x349c <GenerateQuestion+0x11e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3444:	8e 01       	movw	r16, r28
    3446:	09 57       	subi	r16, 0x79	; 121
    3448:	1f 4f       	sbci	r17, 0xFF	; 255
    344a:	ce 01       	movw	r24, r28
    344c:	8d 57       	subi	r24, 0x7D	; 125
    344e:	9f 4f       	sbci	r25, 0xFF	; 255
    3450:	fc 01       	movw	r30, r24
    3452:	60 81       	ld	r22, Z
    3454:	71 81       	ldd	r23, Z+1	; 0x01
    3456:	82 81       	ldd	r24, Z+2	; 0x02
    3458:	93 81       	ldd	r25, Z+3	; 0x03
    345a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	f8 01       	movw	r30, r16
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	80 83       	st	Z, r24
    3468:	ce 01       	movw	r24, r28
    346a:	85 57       	subi	r24, 0x75	; 117
    346c:	9f 4f       	sbci	r25, 0xFF	; 255
    346e:	9e 01       	movw	r18, r28
    3470:	29 57       	subi	r18, 0x79	; 121
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	f9 01       	movw	r30, r18
    3476:	20 81       	ld	r18, Z
    3478:	31 81       	ldd	r19, Z+1	; 0x01
    347a:	fc 01       	movw	r30, r24
    347c:	31 83       	std	Z+1, r19	; 0x01
    347e:	20 83       	st	Z, r18
    3480:	ce 01       	movw	r24, r28
    3482:	85 57       	subi	r24, 0x75	; 117
    3484:	9f 4f       	sbci	r25, 0xFF	; 255
    3486:	fc 01       	movw	r30, r24
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <GenerateQuestion+0x11d6>
    3490:	9e 01       	movw	r18, r28
    3492:	25 57       	subi	r18, 0x75	; 117
    3494:	3f 4f       	sbci	r19, 0xFF	; 255
    3496:	f9 01       	movw	r30, r18
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
	_delay_ms(FOUR_SECONDS);
	End_Questions();
    349c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <End_Questions>
	
}
    34a0:	00 00       	nop
    34a2:	c1 55       	subi	r28, 0x51	; 81
    34a4:	df 4f       	sbci	r29, 0xFF	; 255
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	08 95       	ret

000034ba <LED_Correct_Celebration>:
 * @return: void
 *
 * Description: function that excutes a set of commands after a correct answer   
 *
 ********************************************************************************/
void LED_Correct_Celebration(){
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	c0 57       	subi	r28, 0x70	; 112
    34c8:	d1 09       	sbc	r29, r1
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61

	DIO_WritePin(LED0,HIGH);
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	8c e0       	ldi	r24, 0x0C	; 12
    34d8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	aa e7       	ldi	r26, 0x7A	; 122
    34e2:	b4 e4       	ldi	r27, 0x44	; 68
    34e4:	89 83       	std	Y+1, r24	; 0x01
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	ab 83       	std	Y+3, r26	; 0x03
    34ea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    34ec:	8e 01       	movw	r16, r28
    34ee:	09 59       	subi	r16, 0x99	; 153
    34f0:	1f 4f       	sbci	r17, 0xFF	; 255
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	4a e7       	ldi	r20, 0x7A	; 122
    34f8:	53 e4       	ldi	r21, 0x43	; 67
    34fa:	69 81       	ldd	r22, Y+1	; 0x01
    34fc:	7a 81       	ldd	r23, Y+2	; 0x02
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	9c 81       	ldd	r25, Y+4	; 0x04
    3502:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	f8 01       	movw	r30, r16
    350c:	80 83       	st	Z, r24
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	a2 83       	std	Z+2, r26	; 0x02
    3512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3514:	ce 01       	movw	r24, r28
    3516:	89 59       	subi	r24, 0x99	; 153
    3518:	9f 4f       	sbci	r25, 0xFF	; 255
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e8       	ldi	r20, 0x80	; 128
    3520:	5f e3       	ldi	r21, 0x3F	; 63
    3522:	fc 01       	movw	r30, r24
    3524:	60 81       	ld	r22, Z
    3526:	71 81       	ldd	r23, Z+1	; 0x01
    3528:	82 81       	ldd	r24, Z+2	; 0x02
    352a:	93 81       	ldd	r25, Z+3	; 0x03
    352c:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3530:	88 23       	and	r24, r24
    3532:	4c f4       	brge	.+18     	; 0x3546 <LED_Correct_Celebration+0x8c>
		__ticks = 1;
    3534:	ce 01       	movw	r24, r28
    3536:	85 59       	subi	r24, 0x95	; 149
    3538:	9f 4f       	sbci	r25, 0xFF	; 255
    353a:	21 e0       	ldi	r18, 0x01	; 1
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	fc 01       	movw	r30, r24
    3540:	31 83       	std	Z+1, r19	; 0x01
    3542:	20 83       	st	Z, r18
    3544:	69 c0       	rjmp	.+210    	; 0x3618 <LED_Correct_Celebration+0x15e>
	else if (__tmp > 65535)
    3546:	ce 01       	movw	r24, r28
    3548:	89 59       	subi	r24, 0x99	; 153
    354a:	9f 4f       	sbci	r25, 0xFF	; 255
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	3f ef       	ldi	r19, 0xFF	; 255
    3550:	4f e7       	ldi	r20, 0x7F	; 127
    3552:	57 e4       	ldi	r21, 0x47	; 71
    3554:	fc 01       	movw	r30, r24
    3556:	60 81       	ld	r22, Z
    3558:	71 81       	ldd	r23, Z+1	; 0x01
    355a:	82 81       	ldd	r24, Z+2	; 0x02
    355c:	93 81       	ldd	r25, Z+3	; 0x03
    355e:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    3562:	18 16       	cp	r1, r24
    3564:	0c f0       	brlt	.+2      	; 0x3568 <LED_Correct_Celebration+0xae>
    3566:	46 c0       	rjmp	.+140    	; 0x35f4 <LED_Correct_Celebration+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e2       	ldi	r20, 0x20	; 32
    356e:	51 e4       	ldi	r21, 0x41	; 65
    3570:	69 81       	ldd	r22, Y+1	; 0x01
    3572:	7a 81       	ldd	r23, Y+2	; 0x02
    3574:	8b 81       	ldd	r24, Y+3	; 0x03
    3576:	9c 81       	ldd	r25, Y+4	; 0x04
    3578:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	8e 01       	movw	r16, r28
    3582:	05 59       	subi	r16, 0x95	; 149
    3584:	1f 4f       	sbci	r17, 0xFF	; 255
    3586:	bc 01       	movw	r22, r24
    3588:	cd 01       	movw	r24, r26
    358a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	f8 01       	movw	r30, r16
    3594:	91 83       	std	Z+1, r25	; 0x01
    3596:	80 83       	st	Z, r24
    3598:	24 c0       	rjmp	.+72     	; 0x35e2 <LED_Correct_Celebration+0x128>
    359a:	ce 01       	movw	r24, r28
    359c:	83 59       	subi	r24, 0x93	; 147
    359e:	9f 4f       	sbci	r25, 0xFF	; 255
    35a0:	29 e1       	ldi	r18, 0x19	; 25
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	fc 01       	movw	r30, r24
    35a6:	31 83       	std	Z+1, r19	; 0x01
    35a8:	20 83       	st	Z, r18
    35aa:	ce 01       	movw	r24, r28
    35ac:	83 59       	subi	r24, 0x93	; 147
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	fc 01       	movw	r30, r24
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <LED_Correct_Celebration+0xfc>
    35ba:	9e 01       	movw	r18, r28
    35bc:	23 59       	subi	r18, 0x93	; 147
    35be:	3f 4f       	sbci	r19, 0xFF	; 255
    35c0:	f9 01       	movw	r30, r18
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c6:	ce 01       	movw	r24, r28
    35c8:	85 59       	subi	r24, 0x95	; 149
    35ca:	9f 4f       	sbci	r25, 0xFF	; 255
    35cc:	9e 01       	movw	r18, r28
    35ce:	25 59       	subi	r18, 0x95	; 149
    35d0:	3f 4f       	sbci	r19, 0xFF	; 255
    35d2:	f9 01       	movw	r30, r18
    35d4:	20 81       	ld	r18, Z
    35d6:	31 81       	ldd	r19, Z+1	; 0x01
    35d8:	21 50       	subi	r18, 0x01	; 1
    35da:	31 09       	sbc	r19, r1
    35dc:	fc 01       	movw	r30, r24
    35de:	31 83       	std	Z+1, r19	; 0x01
    35e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e2:	ce 01       	movw	r24, r28
    35e4:	85 59       	subi	r24, 0x95	; 149
    35e6:	9f 4f       	sbci	r25, 0xFF	; 255
    35e8:	fc 01       	movw	r30, r24
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	89 2b       	or	r24, r25
    35f0:	a1 f6       	brne	.-88     	; 0x359a <LED_Correct_Celebration+0xe0>
    35f2:	2c c0       	rjmp	.+88     	; 0x364c <LED_Correct_Celebration+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f4:	8e 01       	movw	r16, r28
    35f6:	05 59       	subi	r16, 0x95	; 149
    35f8:	1f 4f       	sbci	r17, 0xFF	; 255
    35fa:	ce 01       	movw	r24, r28
    35fc:	89 59       	subi	r24, 0x99	; 153
    35fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3600:	fc 01       	movw	r30, r24
    3602:	60 81       	ld	r22, Z
    3604:	71 81       	ldd	r23, Z+1	; 0x01
    3606:	82 81       	ldd	r24, Z+2	; 0x02
    3608:	93 81       	ldd	r25, Z+3	; 0x03
    360a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	f8 01       	movw	r30, r16
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	80 83       	st	Z, r24
    3618:	ce 01       	movw	r24, r28
    361a:	81 59       	subi	r24, 0x91	; 145
    361c:	9f 4f       	sbci	r25, 0xFF	; 255
    361e:	9e 01       	movw	r18, r28
    3620:	25 59       	subi	r18, 0x95	; 149
    3622:	3f 4f       	sbci	r19, 0xFF	; 255
    3624:	f9 01       	movw	r30, r18
    3626:	20 81       	ld	r18, Z
    3628:	31 81       	ldd	r19, Z+1	; 0x01
    362a:	fc 01       	movw	r30, r24
    362c:	31 83       	std	Z+1, r19	; 0x01
    362e:	20 83       	st	Z, r18
    3630:	ce 01       	movw	r24, r28
    3632:	81 59       	subi	r24, 0x91	; 145
    3634:	9f 4f       	sbci	r25, 0xFF	; 255
    3636:	fc 01       	movw	r30, r24
    3638:	80 81       	ld	r24, Z
    363a:	91 81       	ldd	r25, Z+1	; 0x01
    363c:	01 97       	sbiw	r24, 0x01	; 1
    363e:	f1 f7       	brne	.-4      	; 0x363c <LED_Correct_Celebration+0x182>
    3640:	9e 01       	movw	r18, r28
    3642:	21 59       	subi	r18, 0x91	; 145
    3644:	3f 4f       	sbci	r19, 0xFF	; 255
    3646:	f9 01       	movw	r30, r18
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	80 83       	st	Z, r24
	_delay_ms(HALF_SECOND);
	DIO_WritePin(LED0,LOW);
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	8c e0       	ldi	r24, 0x0C	; 12
    3650:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	
	DIO_WritePin(LED1,HIGH);
    3654:	61 e0       	ldi	r22, 0x01	; 1
    3656:	8d e0       	ldi	r24, 0x0D	; 13
    3658:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	aa e7       	ldi	r26, 0x7A	; 122
    3662:	b4 e4       	ldi	r27, 0x44	; 68
    3664:	8d 83       	std	Y+5, r24	; 0x05
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	af 83       	std	Y+7, r26	; 0x07
    366a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    366c:	8e 01       	movw	r16, r28
    366e:	03 5a       	subi	r16, 0xA3	; 163
    3670:	1f 4f       	sbci	r17, 0xFF	; 255
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	4a e7       	ldi	r20, 0x7A	; 122
    3678:	53 e4       	ldi	r21, 0x43	; 67
    367a:	6d 81       	ldd	r22, Y+5	; 0x05
    367c:	7e 81       	ldd	r23, Y+6	; 0x06
    367e:	8f 81       	ldd	r24, Y+7	; 0x07
    3680:	98 85       	ldd	r25, Y+8	; 0x08
    3682:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	f8 01       	movw	r30, r16
    368c:	80 83       	st	Z, r24
    368e:	91 83       	std	Z+1, r25	; 0x01
    3690:	a2 83       	std	Z+2, r26	; 0x02
    3692:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3694:	ce 01       	movw	r24, r28
    3696:	83 5a       	subi	r24, 0xA3	; 163
    3698:	9f 4f       	sbci	r25, 0xFF	; 255
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e8       	ldi	r20, 0x80	; 128
    36a0:	5f e3       	ldi	r21, 0x3F	; 63
    36a2:	fc 01       	movw	r30, r24
    36a4:	60 81       	ld	r22, Z
    36a6:	71 81       	ldd	r23, Z+1	; 0x01
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	93 81       	ldd	r25, Z+3	; 0x03
    36ac:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    36b0:	88 23       	and	r24, r24
    36b2:	4c f4       	brge	.+18     	; 0x36c6 <LED_Correct_Celebration+0x20c>
		__ticks = 1;
    36b4:	ce 01       	movw	r24, r28
    36b6:	8f 59       	subi	r24, 0x9F	; 159
    36b8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ba:	21 e0       	ldi	r18, 0x01	; 1
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	fc 01       	movw	r30, r24
    36c0:	31 83       	std	Z+1, r19	; 0x01
    36c2:	20 83       	st	Z, r18
    36c4:	69 c0       	rjmp	.+210    	; 0x3798 <LED_Correct_Celebration+0x2de>
	else if (__tmp > 65535)
    36c6:	ce 01       	movw	r24, r28
    36c8:	83 5a       	subi	r24, 0xA3	; 163
    36ca:	9f 4f       	sbci	r25, 0xFF	; 255
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	3f ef       	ldi	r19, 0xFF	; 255
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	57 e4       	ldi	r21, 0x47	; 71
    36d4:	fc 01       	movw	r30, r24
    36d6:	60 81       	ld	r22, Z
    36d8:	71 81       	ldd	r23, Z+1	; 0x01
    36da:	82 81       	ldd	r24, Z+2	; 0x02
    36dc:	93 81       	ldd	r25, Z+3	; 0x03
    36de:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    36e2:	18 16       	cp	r1, r24
    36e4:	0c f0       	brlt	.+2      	; 0x36e8 <LED_Correct_Celebration+0x22e>
    36e6:	46 c0       	rjmp	.+140    	; 0x3774 <LED_Correct_Celebration+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	40 e2       	ldi	r20, 0x20	; 32
    36ee:	51 e4       	ldi	r21, 0x41	; 65
    36f0:	6d 81       	ldd	r22, Y+5	; 0x05
    36f2:	7e 81       	ldd	r23, Y+6	; 0x06
    36f4:	8f 81       	ldd	r24, Y+7	; 0x07
    36f6:	98 85       	ldd	r25, Y+8	; 0x08
    36f8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	8e 01       	movw	r16, r28
    3702:	0f 59       	subi	r16, 0x9F	; 159
    3704:	1f 4f       	sbci	r17, 0xFF	; 255
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	f8 01       	movw	r30, r16
    3714:	91 83       	std	Z+1, r25	; 0x01
    3716:	80 83       	st	Z, r24
    3718:	24 c0       	rjmp	.+72     	; 0x3762 <LED_Correct_Celebration+0x2a8>
    371a:	ce 01       	movw	r24, r28
    371c:	8d 59       	subi	r24, 0x9D	; 157
    371e:	9f 4f       	sbci	r25, 0xFF	; 255
    3720:	29 e1       	ldi	r18, 0x19	; 25
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	fc 01       	movw	r30, r24
    3726:	31 83       	std	Z+1, r19	; 0x01
    3728:	20 83       	st	Z, r18
    372a:	ce 01       	movw	r24, r28
    372c:	8d 59       	subi	r24, 0x9D	; 157
    372e:	9f 4f       	sbci	r25, 0xFF	; 255
    3730:	fc 01       	movw	r30, r24
    3732:	80 81       	ld	r24, Z
    3734:	91 81       	ldd	r25, Z+1	; 0x01
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	f1 f7       	brne	.-4      	; 0x3736 <LED_Correct_Celebration+0x27c>
    373a:	9e 01       	movw	r18, r28
    373c:	2d 59       	subi	r18, 0x9D	; 157
    373e:	3f 4f       	sbci	r19, 0xFF	; 255
    3740:	f9 01       	movw	r30, r18
    3742:	91 83       	std	Z+1, r25	; 0x01
    3744:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3746:	ce 01       	movw	r24, r28
    3748:	8f 59       	subi	r24, 0x9F	; 159
    374a:	9f 4f       	sbci	r25, 0xFF	; 255
    374c:	9e 01       	movw	r18, r28
    374e:	2f 59       	subi	r18, 0x9F	; 159
    3750:	3f 4f       	sbci	r19, 0xFF	; 255
    3752:	f9 01       	movw	r30, r18
    3754:	20 81       	ld	r18, Z
    3756:	31 81       	ldd	r19, Z+1	; 0x01
    3758:	21 50       	subi	r18, 0x01	; 1
    375a:	31 09       	sbc	r19, r1
    375c:	fc 01       	movw	r30, r24
    375e:	31 83       	std	Z+1, r19	; 0x01
    3760:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	ce 01       	movw	r24, r28
    3764:	8f 59       	subi	r24, 0x9F	; 159
    3766:	9f 4f       	sbci	r25, 0xFF	; 255
    3768:	fc 01       	movw	r30, r24
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	89 2b       	or	r24, r25
    3770:	a1 f6       	brne	.-88     	; 0x371a <LED_Correct_Celebration+0x260>
    3772:	2c c0       	rjmp	.+88     	; 0x37cc <LED_Correct_Celebration+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3774:	8e 01       	movw	r16, r28
    3776:	0f 59       	subi	r16, 0x9F	; 159
    3778:	1f 4f       	sbci	r17, 0xFF	; 255
    377a:	ce 01       	movw	r24, r28
    377c:	83 5a       	subi	r24, 0xA3	; 163
    377e:	9f 4f       	sbci	r25, 0xFF	; 255
    3780:	fc 01       	movw	r30, r24
    3782:	60 81       	ld	r22, Z
    3784:	71 81       	ldd	r23, Z+1	; 0x01
    3786:	82 81       	ldd	r24, Z+2	; 0x02
    3788:	93 81       	ldd	r25, Z+3	; 0x03
    378a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	f8 01       	movw	r30, r16
    3794:	91 83       	std	Z+1, r25	; 0x01
    3796:	80 83       	st	Z, r24
    3798:	ce 01       	movw	r24, r28
    379a:	8b 59       	subi	r24, 0x9B	; 155
    379c:	9f 4f       	sbci	r25, 0xFF	; 255
    379e:	9e 01       	movw	r18, r28
    37a0:	2f 59       	subi	r18, 0x9F	; 159
    37a2:	3f 4f       	sbci	r19, 0xFF	; 255
    37a4:	f9 01       	movw	r30, r18
    37a6:	20 81       	ld	r18, Z
    37a8:	31 81       	ldd	r19, Z+1	; 0x01
    37aa:	fc 01       	movw	r30, r24
    37ac:	31 83       	std	Z+1, r19	; 0x01
    37ae:	20 83       	st	Z, r18
    37b0:	ce 01       	movw	r24, r28
    37b2:	8b 59       	subi	r24, 0x9B	; 155
    37b4:	9f 4f       	sbci	r25, 0xFF	; 255
    37b6:	fc 01       	movw	r30, r24
    37b8:	80 81       	ld	r24, Z
    37ba:	91 81       	ldd	r25, Z+1	; 0x01
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <LED_Correct_Celebration+0x302>
    37c0:	9e 01       	movw	r18, r28
    37c2:	2b 59       	subi	r18, 0x9B	; 155
    37c4:	3f 4f       	sbci	r19, 0xFF	; 255
    37c6:	f9 01       	movw	r30, r18
    37c8:	91 83       	std	Z+1, r25	; 0x01
    37ca:	80 83       	st	Z, r24
	_delay_ms(HALF_SECOND);
	DIO_WritePin(LED1,LOW);
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	8d e0       	ldi	r24, 0x0D	; 13
    37d0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	
	DIO_WritePin(LED2,HIGH);
    37d4:	61 e0       	ldi	r22, 0x01	; 1
    37d6:	8e e0       	ldi	r24, 0x0E	; 14
    37d8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	aa e7       	ldi	r26, 0x7A	; 122
    37e2:	b4 e4       	ldi	r27, 0x44	; 68
    37e4:	89 87       	std	Y+9, r24	; 0x09
    37e6:	9a 87       	std	Y+10, r25	; 0x0a
    37e8:	ab 87       	std	Y+11, r26	; 0x0b
    37ea:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    37ec:	8e 01       	movw	r16, r28
    37ee:	0d 5a       	subi	r16, 0xAD	; 173
    37f0:	1f 4f       	sbci	r17, 0xFF	; 255
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	4a e7       	ldi	r20, 0x7A	; 122
    37f8:	53 e4       	ldi	r21, 0x43	; 67
    37fa:	69 85       	ldd	r22, Y+9	; 0x09
    37fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    37fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3800:	9c 85       	ldd	r25, Y+12	; 0x0c
    3802:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	f8 01       	movw	r30, r16
    380c:	80 83       	st	Z, r24
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	a2 83       	std	Z+2, r26	; 0x02
    3812:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3814:	ce 01       	movw	r24, r28
    3816:	8d 5a       	subi	r24, 0xAD	; 173
    3818:	9f 4f       	sbci	r25, 0xFF	; 255
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 e8       	ldi	r20, 0x80	; 128
    3820:	5f e3       	ldi	r21, 0x3F	; 63
    3822:	fc 01       	movw	r30, r24
    3824:	60 81       	ld	r22, Z
    3826:	71 81       	ldd	r23, Z+1	; 0x01
    3828:	82 81       	ldd	r24, Z+2	; 0x02
    382a:	93 81       	ldd	r25, Z+3	; 0x03
    382c:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3830:	88 23       	and	r24, r24
    3832:	4c f4       	brge	.+18     	; 0x3846 <LED_Correct_Celebration+0x38c>
		__ticks = 1;
    3834:	ce 01       	movw	r24, r28
    3836:	89 5a       	subi	r24, 0xA9	; 169
    3838:	9f 4f       	sbci	r25, 0xFF	; 255
    383a:	21 e0       	ldi	r18, 0x01	; 1
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	fc 01       	movw	r30, r24
    3840:	31 83       	std	Z+1, r19	; 0x01
    3842:	20 83       	st	Z, r18
    3844:	69 c0       	rjmp	.+210    	; 0x3918 <LED_Correct_Celebration+0x45e>
	else if (__tmp > 65535)
    3846:	ce 01       	movw	r24, r28
    3848:	8d 5a       	subi	r24, 0xAD	; 173
    384a:	9f 4f       	sbci	r25, 0xFF	; 255
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	3f ef       	ldi	r19, 0xFF	; 255
    3850:	4f e7       	ldi	r20, 0x7F	; 127
    3852:	57 e4       	ldi	r21, 0x47	; 71
    3854:	fc 01       	movw	r30, r24
    3856:	60 81       	ld	r22, Z
    3858:	71 81       	ldd	r23, Z+1	; 0x01
    385a:	82 81       	ldd	r24, Z+2	; 0x02
    385c:	93 81       	ldd	r25, Z+3	; 0x03
    385e:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    3862:	18 16       	cp	r1, r24
    3864:	0c f0       	brlt	.+2      	; 0x3868 <LED_Correct_Celebration+0x3ae>
    3866:	46 c0       	rjmp	.+140    	; 0x38f4 <LED_Correct_Celebration+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e2       	ldi	r20, 0x20	; 32
    386e:	51 e4       	ldi	r21, 0x41	; 65
    3870:	69 85       	ldd	r22, Y+9	; 0x09
    3872:	7a 85       	ldd	r23, Y+10	; 0x0a
    3874:	8b 85       	ldd	r24, Y+11	; 0x0b
    3876:	9c 85       	ldd	r25, Y+12	; 0x0c
    3878:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	8e 01       	movw	r16, r28
    3882:	09 5a       	subi	r16, 0xA9	; 169
    3884:	1f 4f       	sbci	r17, 0xFF	; 255
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	f8 01       	movw	r30, r16
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	24 c0       	rjmp	.+72     	; 0x38e2 <LED_Correct_Celebration+0x428>
    389a:	ce 01       	movw	r24, r28
    389c:	87 5a       	subi	r24, 0xA7	; 167
    389e:	9f 4f       	sbci	r25, 0xFF	; 255
    38a0:	29 e1       	ldi	r18, 0x19	; 25
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	fc 01       	movw	r30, r24
    38a6:	31 83       	std	Z+1, r19	; 0x01
    38a8:	20 83       	st	Z, r18
    38aa:	ce 01       	movw	r24, r28
    38ac:	87 5a       	subi	r24, 0xA7	; 167
    38ae:	9f 4f       	sbci	r25, 0xFF	; 255
    38b0:	fc 01       	movw	r30, r24
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <LED_Correct_Celebration+0x3fc>
    38ba:	9e 01       	movw	r18, r28
    38bc:	27 5a       	subi	r18, 0xA7	; 167
    38be:	3f 4f       	sbci	r19, 0xFF	; 255
    38c0:	f9 01       	movw	r30, r18
    38c2:	91 83       	std	Z+1, r25	; 0x01
    38c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c6:	ce 01       	movw	r24, r28
    38c8:	89 5a       	subi	r24, 0xA9	; 169
    38ca:	9f 4f       	sbci	r25, 0xFF	; 255
    38cc:	9e 01       	movw	r18, r28
    38ce:	29 5a       	subi	r18, 0xA9	; 169
    38d0:	3f 4f       	sbci	r19, 0xFF	; 255
    38d2:	f9 01       	movw	r30, r18
    38d4:	20 81       	ld	r18, Z
    38d6:	31 81       	ldd	r19, Z+1	; 0x01
    38d8:	21 50       	subi	r18, 0x01	; 1
    38da:	31 09       	sbc	r19, r1
    38dc:	fc 01       	movw	r30, r24
    38de:	31 83       	std	Z+1, r19	; 0x01
    38e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e2:	ce 01       	movw	r24, r28
    38e4:	89 5a       	subi	r24, 0xA9	; 169
    38e6:	9f 4f       	sbci	r25, 0xFF	; 255
    38e8:	fc 01       	movw	r30, r24
    38ea:	80 81       	ld	r24, Z
    38ec:	91 81       	ldd	r25, Z+1	; 0x01
    38ee:	89 2b       	or	r24, r25
    38f0:	a1 f6       	brne	.-88     	; 0x389a <LED_Correct_Celebration+0x3e0>
    38f2:	2c c0       	rjmp	.+88     	; 0x394c <LED_Correct_Celebration+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f4:	8e 01       	movw	r16, r28
    38f6:	09 5a       	subi	r16, 0xA9	; 169
    38f8:	1f 4f       	sbci	r17, 0xFF	; 255
    38fa:	ce 01       	movw	r24, r28
    38fc:	8d 5a       	subi	r24, 0xAD	; 173
    38fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3900:	fc 01       	movw	r30, r24
    3902:	60 81       	ld	r22, Z
    3904:	71 81       	ldd	r23, Z+1	; 0x01
    3906:	82 81       	ldd	r24, Z+2	; 0x02
    3908:	93 81       	ldd	r25, Z+3	; 0x03
    390a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	f8 01       	movw	r30, r16
    3914:	91 83       	std	Z+1, r25	; 0x01
    3916:	80 83       	st	Z, r24
    3918:	ce 01       	movw	r24, r28
    391a:	85 5a       	subi	r24, 0xA5	; 165
    391c:	9f 4f       	sbci	r25, 0xFF	; 255
    391e:	9e 01       	movw	r18, r28
    3920:	29 5a       	subi	r18, 0xA9	; 169
    3922:	3f 4f       	sbci	r19, 0xFF	; 255
    3924:	f9 01       	movw	r30, r18
    3926:	20 81       	ld	r18, Z
    3928:	31 81       	ldd	r19, Z+1	; 0x01
    392a:	fc 01       	movw	r30, r24
    392c:	31 83       	std	Z+1, r19	; 0x01
    392e:	20 83       	st	Z, r18
    3930:	ce 01       	movw	r24, r28
    3932:	85 5a       	subi	r24, 0xA5	; 165
    3934:	9f 4f       	sbci	r25, 0xFF	; 255
    3936:	fc 01       	movw	r30, r24
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <LED_Correct_Celebration+0x482>
    3940:	9e 01       	movw	r18, r28
    3942:	25 5a       	subi	r18, 0xA5	; 165
    3944:	3f 4f       	sbci	r19, 0xFF	; 255
    3946:	f9 01       	movw	r30, r18
    3948:	91 83       	std	Z+1, r25	; 0x01
    394a:	80 83       	st	Z, r24
	_delay_ms(HALF_SECOND);
	DIO_WritePin(LED2,LOW);
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	8e e0       	ldi	r24, 0x0E	; 14
    3950:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	
	DIO_WritePin(LED3,HIGH);
    3954:	61 e0       	ldi	r22, 0x01	; 1
    3956:	8f e0       	ldi	r24, 0x0F	; 15
    3958:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	aa e7       	ldi	r26, 0x7A	; 122
    3962:	b4 e4       	ldi	r27, 0x44	; 68
    3964:	8d 87       	std	Y+13, r24	; 0x0d
    3966:	9e 87       	std	Y+14, r25	; 0x0e
    3968:	af 87       	std	Y+15, r26	; 0x0f
    396a:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    396c:	8e 01       	movw	r16, r28
    396e:	07 5b       	subi	r16, 0xB7	; 183
    3970:	1f 4f       	sbci	r17, 0xFF	; 255
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	4a e7       	ldi	r20, 0x7A	; 122
    3978:	53 e4       	ldi	r21, 0x43	; 67
    397a:	6d 85       	ldd	r22, Y+13	; 0x0d
    397c:	7e 85       	ldd	r23, Y+14	; 0x0e
    397e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3980:	98 89       	ldd	r25, Y+16	; 0x10
    3982:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	f8 01       	movw	r30, r16
    398c:	80 83       	st	Z, r24
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	a2 83       	std	Z+2, r26	; 0x02
    3992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3994:	ce 01       	movw	r24, r28
    3996:	87 5b       	subi	r24, 0xB7	; 183
    3998:	9f 4f       	sbci	r25, 0xFF	; 255
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e8       	ldi	r20, 0x80	; 128
    39a0:	5f e3       	ldi	r21, 0x3F	; 63
    39a2:	fc 01       	movw	r30, r24
    39a4:	60 81       	ld	r22, Z
    39a6:	71 81       	ldd	r23, Z+1	; 0x01
    39a8:	82 81       	ldd	r24, Z+2	; 0x02
    39aa:	93 81       	ldd	r25, Z+3	; 0x03
    39ac:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    39b0:	88 23       	and	r24, r24
    39b2:	4c f4       	brge	.+18     	; 0x39c6 <LED_Correct_Celebration+0x50c>
		__ticks = 1;
    39b4:	ce 01       	movw	r24, r28
    39b6:	83 5b       	subi	r24, 0xB3	; 179
    39b8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ba:	21 e0       	ldi	r18, 0x01	; 1
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	fc 01       	movw	r30, r24
    39c0:	31 83       	std	Z+1, r19	; 0x01
    39c2:	20 83       	st	Z, r18
    39c4:	69 c0       	rjmp	.+210    	; 0x3a98 <LED_Correct_Celebration+0x5de>
	else if (__tmp > 65535)
    39c6:	ce 01       	movw	r24, r28
    39c8:	87 5b       	subi	r24, 0xB7	; 183
    39ca:	9f 4f       	sbci	r25, 0xFF	; 255
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	3f ef       	ldi	r19, 0xFF	; 255
    39d0:	4f e7       	ldi	r20, 0x7F	; 127
    39d2:	57 e4       	ldi	r21, 0x47	; 71
    39d4:	fc 01       	movw	r30, r24
    39d6:	60 81       	ld	r22, Z
    39d8:	71 81       	ldd	r23, Z+1	; 0x01
    39da:	82 81       	ldd	r24, Z+2	; 0x02
    39dc:	93 81       	ldd	r25, Z+3	; 0x03
    39de:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    39e2:	18 16       	cp	r1, r24
    39e4:	0c f0       	brlt	.+2      	; 0x39e8 <LED_Correct_Celebration+0x52e>
    39e6:	46 c0       	rjmp	.+140    	; 0x3a74 <LED_Correct_Celebration+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e2       	ldi	r20, 0x20	; 32
    39ee:	51 e4       	ldi	r21, 0x41	; 65
    39f0:	6d 85       	ldd	r22, Y+13	; 0x0d
    39f2:	7e 85       	ldd	r23, Y+14	; 0x0e
    39f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39f6:	98 89       	ldd	r25, Y+16	; 0x10
    39f8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	8e 01       	movw	r16, r28
    3a02:	03 5b       	subi	r16, 0xB3	; 179
    3a04:	1f 4f       	sbci	r17, 0xFF	; 255
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	f8 01       	movw	r30, r16
    3a14:	91 83       	std	Z+1, r25	; 0x01
    3a16:	80 83       	st	Z, r24
    3a18:	24 c0       	rjmp	.+72     	; 0x3a62 <LED_Correct_Celebration+0x5a8>
    3a1a:	ce 01       	movw	r24, r28
    3a1c:	81 5b       	subi	r24, 0xB1	; 177
    3a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a20:	29 e1       	ldi	r18, 0x19	; 25
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	fc 01       	movw	r30, r24
    3a26:	31 83       	std	Z+1, r19	; 0x01
    3a28:	20 83       	st	Z, r18
    3a2a:	ce 01       	movw	r24, r28
    3a2c:	81 5b       	subi	r24, 0xB1	; 177
    3a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a30:	fc 01       	movw	r30, r24
    3a32:	80 81       	ld	r24, Z
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	f1 f7       	brne	.-4      	; 0x3a36 <LED_Correct_Celebration+0x57c>
    3a3a:	9e 01       	movw	r18, r28
    3a3c:	21 5b       	subi	r18, 0xB1	; 177
    3a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a40:	f9 01       	movw	r30, r18
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a46:	ce 01       	movw	r24, r28
    3a48:	83 5b       	subi	r24, 0xB3	; 179
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	9e 01       	movw	r18, r28
    3a4e:	23 5b       	subi	r18, 0xB3	; 179
    3a50:	3f 4f       	sbci	r19, 0xFF	; 255
    3a52:	f9 01       	movw	r30, r18
    3a54:	20 81       	ld	r18, Z
    3a56:	31 81       	ldd	r19, Z+1	; 0x01
    3a58:	21 50       	subi	r18, 0x01	; 1
    3a5a:	31 09       	sbc	r19, r1
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	31 83       	std	Z+1, r19	; 0x01
    3a60:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a62:	ce 01       	movw	r24, r28
    3a64:	83 5b       	subi	r24, 0xB3	; 179
    3a66:	9f 4f       	sbci	r25, 0xFF	; 255
    3a68:	fc 01       	movw	r30, r24
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	89 2b       	or	r24, r25
    3a70:	a1 f6       	brne	.-88     	; 0x3a1a <LED_Correct_Celebration+0x560>
    3a72:	2c c0       	rjmp	.+88     	; 0x3acc <LED_Correct_Celebration+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a74:	8e 01       	movw	r16, r28
    3a76:	03 5b       	subi	r16, 0xB3	; 179
    3a78:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	87 5b       	subi	r24, 0xB7	; 183
    3a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a80:	fc 01       	movw	r30, r24
    3a82:	60 81       	ld	r22, Z
    3a84:	71 81       	ldd	r23, Z+1	; 0x01
    3a86:	82 81       	ldd	r24, Z+2	; 0x02
    3a88:	93 81       	ldd	r25, Z+3	; 0x03
    3a8a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	f8 01       	movw	r30, r16
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	80 83       	st	Z, r24
    3a98:	ce 01       	movw	r24, r28
    3a9a:	8f 5a       	subi	r24, 0xAF	; 175
    3a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9e:	9e 01       	movw	r18, r28
    3aa0:	23 5b       	subi	r18, 0xB3	; 179
    3aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa4:	f9 01       	movw	r30, r18
    3aa6:	20 81       	ld	r18, Z
    3aa8:	31 81       	ldd	r19, Z+1	; 0x01
    3aaa:	fc 01       	movw	r30, r24
    3aac:	31 83       	std	Z+1, r19	; 0x01
    3aae:	20 83       	st	Z, r18
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	8f 5a       	subi	r24, 0xAF	; 175
    3ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	80 81       	ld	r24, Z
    3aba:	91 81       	ldd	r25, Z+1	; 0x01
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	f1 f7       	brne	.-4      	; 0x3abc <LED_Correct_Celebration+0x602>
    3ac0:	9e 01       	movw	r18, r28
    3ac2:	2f 5a       	subi	r18, 0xAF	; 175
    3ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac6:	f9 01       	movw	r30, r18
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	80 83       	st	Z, r24
	_delay_ms(HALF_SECOND);
	DIO_WritePin(LED3,LOW);	
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	8f e0       	ldi	r24, 0x0F	; 15
    3ad0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>

	DIO_WritePin(LED3,HIGH);
    3ad4:	61 e0       	ldi	r22, 0x01	; 1
    3ad6:	8f e0       	ldi	r24, 0x0F	; 15
    3ad8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	aa e7       	ldi	r26, 0x7A	; 122
    3ae2:	b4 e4       	ldi	r27, 0x44	; 68
    3ae4:	89 8b       	std	Y+17, r24	; 0x11
    3ae6:	9a 8b       	std	Y+18, r25	; 0x12
    3ae8:	ab 8b       	std	Y+19, r26	; 0x13
    3aea:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3aec:	8e 01       	movw	r16, r28
    3aee:	01 5c       	subi	r16, 0xC1	; 193
    3af0:	1f 4f       	sbci	r17, 0xFF	; 255
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	4a e7       	ldi	r20, 0x7A	; 122
    3af8:	53 e4       	ldi	r21, 0x43	; 67
    3afa:	69 89       	ldd	r22, Y+17	; 0x11
    3afc:	7a 89       	ldd	r23, Y+18	; 0x12
    3afe:	8b 89       	ldd	r24, Y+19	; 0x13
    3b00:	9c 89       	ldd	r25, Y+20	; 0x14
    3b02:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	80 83       	st	Z, r24
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	a2 83       	std	Z+2, r26	; 0x02
    3b12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b14:	ce 01       	movw	r24, r28
    3b16:	cf 96       	adiw	r24, 0x3f	; 63
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e8       	ldi	r20, 0x80	; 128
    3b1e:	5f e3       	ldi	r21, 0x3F	; 63
    3b20:	fc 01       	movw	r30, r24
    3b22:	60 81       	ld	r22, Z
    3b24:	71 81       	ldd	r23, Z+1	; 0x01
    3b26:	82 81       	ldd	r24, Z+2	; 0x02
    3b28:	93 81       	ldd	r25, Z+3	; 0x03
    3b2a:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3b2e:	88 23       	and	r24, r24
    3b30:	4c f4       	brge	.+18     	; 0x3b44 <LED_Correct_Celebration+0x68a>
		__ticks = 1;
    3b32:	ce 01       	movw	r24, r28
    3b34:	8d 5b       	subi	r24, 0xBD	; 189
    3b36:	9f 4f       	sbci	r25, 0xFF	; 255
    3b38:	21 e0       	ldi	r18, 0x01	; 1
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	31 83       	std	Z+1, r19	; 0x01
    3b40:	20 83       	st	Z, r18
    3b42:	67 c0       	rjmp	.+206    	; 0x3c12 <LED_Correct_Celebration+0x758>
	else if (__tmp > 65535)
    3b44:	ce 01       	movw	r24, r28
    3b46:	cf 96       	adiw	r24, 0x3f	; 63
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	3f ef       	ldi	r19, 0xFF	; 255
    3b4c:	4f e7       	ldi	r20, 0x7F	; 127
    3b4e:	57 e4       	ldi	r21, 0x47	; 71
    3b50:	fc 01       	movw	r30, r24
    3b52:	60 81       	ld	r22, Z
    3b54:	71 81       	ldd	r23, Z+1	; 0x01
    3b56:	82 81       	ldd	r24, Z+2	; 0x02
    3b58:	93 81       	ldd	r25, Z+3	; 0x03
    3b5a:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    3b5e:	18 16       	cp	r1, r24
    3b60:	0c f0       	brlt	.+2      	; 0x3b64 <LED_Correct_Celebration+0x6aa>
    3b62:	46 c0       	rjmp	.+140    	; 0x3bf0 <LED_Correct_Celebration+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e2       	ldi	r20, 0x20	; 32
    3b6a:	51 e4       	ldi	r21, 0x41	; 65
    3b6c:	69 89       	ldd	r22, Y+17	; 0x11
    3b6e:	7a 89       	ldd	r23, Y+18	; 0x12
    3b70:	8b 89       	ldd	r24, Y+19	; 0x13
    3b72:	9c 89       	ldd	r25, Y+20	; 0x14
    3b74:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	8e 01       	movw	r16, r28
    3b7e:	0d 5b       	subi	r16, 0xBD	; 189
    3b80:	1f 4f       	sbci	r17, 0xFF	; 255
    3b82:	bc 01       	movw	r22, r24
    3b84:	cd 01       	movw	r24, r26
    3b86:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	f8 01       	movw	r30, r16
    3b90:	91 83       	std	Z+1, r25	; 0x01
    3b92:	80 83       	st	Z, r24
    3b94:	24 c0       	rjmp	.+72     	; 0x3bde <LED_Correct_Celebration+0x724>
    3b96:	ce 01       	movw	r24, r28
    3b98:	8b 5b       	subi	r24, 0xBB	; 187
    3b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9c:	29 e1       	ldi	r18, 0x19	; 25
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	31 83       	std	Z+1, r19	; 0x01
    3ba4:	20 83       	st	Z, r18
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	8b 5b       	subi	r24, 0xBB	; 187
    3baa:	9f 4f       	sbci	r25, 0xFF	; 255
    3bac:	fc 01       	movw	r30, r24
    3bae:	80 81       	ld	r24, Z
    3bb0:	91 81       	ldd	r25, Z+1	; 0x01
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <LED_Correct_Celebration+0x6f8>
    3bb6:	9e 01       	movw	r18, r28
    3bb8:	2b 5b       	subi	r18, 0xBB	; 187
    3bba:	3f 4f       	sbci	r19, 0xFF	; 255
    3bbc:	f9 01       	movw	r30, r18
    3bbe:	91 83       	std	Z+1, r25	; 0x01
    3bc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	8d 5b       	subi	r24, 0xBD	; 189
    3bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc8:	9e 01       	movw	r18, r28
    3bca:	2d 5b       	subi	r18, 0xBD	; 189
    3bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bce:	f9 01       	movw	r30, r18
    3bd0:	20 81       	ld	r18, Z
    3bd2:	31 81       	ldd	r19, Z+1	; 0x01
    3bd4:	21 50       	subi	r18, 0x01	; 1
    3bd6:	31 09       	sbc	r19, r1
    3bd8:	fc 01       	movw	r30, r24
    3bda:	31 83       	std	Z+1, r19	; 0x01
    3bdc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bde:	ce 01       	movw	r24, r28
    3be0:	8d 5b       	subi	r24, 0xBD	; 189
    3be2:	9f 4f       	sbci	r25, 0xFF	; 255
    3be4:	fc 01       	movw	r30, r24
    3be6:	80 81       	ld	r24, Z
    3be8:	91 81       	ldd	r25, Z+1	; 0x01
    3bea:	89 2b       	or	r24, r25
    3bec:	a1 f6       	brne	.-88     	; 0x3b96 <LED_Correct_Celebration+0x6dc>
    3bee:	2b c0       	rjmp	.+86     	; 0x3c46 <LED_Correct_Celebration+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf0:	8e 01       	movw	r16, r28
    3bf2:	0d 5b       	subi	r16, 0xBD	; 189
    3bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	cf 96       	adiw	r24, 0x3f	; 63
    3bfa:	fc 01       	movw	r30, r24
    3bfc:	60 81       	ld	r22, Z
    3bfe:	71 81       	ldd	r23, Z+1	; 0x01
    3c00:	82 81       	ldd	r24, Z+2	; 0x02
    3c02:	93 81       	ldd	r25, Z+3	; 0x03
    3c04:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	80 83       	st	Z, r24
    3c12:	ce 01       	movw	r24, r28
    3c14:	89 5b       	subi	r24, 0xB9	; 185
    3c16:	9f 4f       	sbci	r25, 0xFF	; 255
    3c18:	9e 01       	movw	r18, r28
    3c1a:	2d 5b       	subi	r18, 0xBD	; 189
    3c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1e:	f9 01       	movw	r30, r18
    3c20:	20 81       	ld	r18, Z
    3c22:	31 81       	ldd	r19, Z+1	; 0x01
    3c24:	fc 01       	movw	r30, r24
    3c26:	31 83       	std	Z+1, r19	; 0x01
    3c28:	20 83       	st	Z, r18
    3c2a:	ce 01       	movw	r24, r28
    3c2c:	89 5b       	subi	r24, 0xB9	; 185
    3c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c30:	fc 01       	movw	r30, r24
    3c32:	80 81       	ld	r24, Z
    3c34:	91 81       	ldd	r25, Z+1	; 0x01
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	f1 f7       	brne	.-4      	; 0x3c36 <LED_Correct_Celebration+0x77c>
    3c3a:	9e 01       	movw	r18, r28
    3c3c:	29 5b       	subi	r18, 0xB9	; 185
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	f9 01       	movw	r30, r18
    3c42:	91 83       	std	Z+1, r25	; 0x01
    3c44:	80 83       	st	Z, r24
	_delay_ms(HALF_SECOND);
	DIO_WritePin(LED3,LOW);		
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	8f e0       	ldi	r24, 0x0F	; 15
    3c4a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>

	DIO_WritePin(LED2,HIGH);
    3c4e:	61 e0       	ldi	r22, 0x01	; 1
    3c50:	8e e0       	ldi	r24, 0x0E	; 14
    3c52:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	aa e7       	ldi	r26, 0x7A	; 122
    3c5c:	b4 e4       	ldi	r27, 0x44	; 68
    3c5e:	8d 8b       	std	Y+21, r24	; 0x15
    3c60:	9e 8b       	std	Y+22, r25	; 0x16
    3c62:	af 8b       	std	Y+23, r26	; 0x17
    3c64:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	4a e7       	ldi	r20, 0x7A	; 122
    3c6c:	53 e4       	ldi	r21, 0x43	; 67
    3c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c70:	7e 89       	ldd	r23, Y+22	; 0x16
    3c72:	8f 89       	ldd	r24, Y+23	; 0x17
    3c74:	98 8d       	ldd	r25, Y+24	; 0x18
    3c76:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	8d ab       	std	Y+53, r24	; 0x35
    3c80:	9e ab       	std	Y+54, r25	; 0x36
    3c82:	af ab       	std	Y+55, r26	; 0x37
    3c84:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	40 e8       	ldi	r20, 0x80	; 128
    3c8c:	5f e3       	ldi	r21, 0x3F	; 63
    3c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    3c90:	7e a9       	ldd	r23, Y+54	; 0x36
    3c92:	8f a9       	ldd	r24, Y+55	; 0x37
    3c94:	98 ad       	ldd	r25, Y+56	; 0x38
    3c96:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3c9a:	88 23       	and	r24, r24
    3c9c:	2c f4       	brge	.+10     	; 0x3ca8 <LED_Correct_Celebration+0x7ee>
		__ticks = 1;
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	9a af       	std	Y+58, r25	; 0x3a
    3ca4:	89 af       	std	Y+57, r24	; 0x39
    3ca6:	3f c0       	rjmp	.+126    	; 0x3d26 <LED_Correct_Celebration+0x86c>
	else if (__tmp > 65535)
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	3f ef       	ldi	r19, 0xFF	; 255
    3cac:	4f e7       	ldi	r20, 0x7F	; 127
    3cae:	57 e4       	ldi	r21, 0x47	; 71
    3cb0:	6d a9       	ldd	r22, Y+53	; 0x35
    3cb2:	7e a9       	ldd	r23, Y+54	; 0x36
    3cb4:	8f a9       	ldd	r24, Y+55	; 0x37
    3cb6:	98 ad       	ldd	r25, Y+56	; 0x38
    3cb8:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    3cbc:	18 16       	cp	r1, r24
    3cbe:	4c f5       	brge	.+82     	; 0x3d12 <LED_Correct_Celebration+0x858>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e2       	ldi	r20, 0x20	; 32
    3cc6:	51 e4       	ldi	r21, 0x41	; 65
    3cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cca:	7e 89       	ldd	r23, Y+22	; 0x16
    3ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cce:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd0:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	bc 01       	movw	r22, r24
    3cda:	cd 01       	movw	r24, r26
    3cdc:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	9a af       	std	Y+58, r25	; 0x3a
    3ce6:	89 af       	std	Y+57, r24	; 0x39
    3ce8:	0f c0       	rjmp	.+30     	; 0x3d08 <LED_Correct_Celebration+0x84e>
    3cea:	89 e1       	ldi	r24, 0x19	; 25
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	9c af       	std	Y+60, r25	; 0x3c
    3cf0:	8b af       	std	Y+59, r24	; 0x3b
    3cf2:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cf4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3cf6:	01 97       	sbiw	r24, 0x01	; 1
    3cf8:	f1 f7       	brne	.-4      	; 0x3cf6 <LED_Correct_Celebration+0x83c>
    3cfa:	9c af       	std	Y+60, r25	; 0x3c
    3cfc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfe:	89 ad       	ldd	r24, Y+57	; 0x39
    3d00:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	9a af       	std	Y+58, r25	; 0x3a
    3d06:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d08:	89 ad       	ldd	r24, Y+57	; 0x39
    3d0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d0c:	89 2b       	or	r24, r25
    3d0e:	69 f7       	brne	.-38     	; 0x3cea <LED_Correct_Celebration+0x830>
    3d10:	14 c0       	rjmp	.+40     	; 0x3d3a <LED_Correct_Celebration+0x880>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d12:	6d a9       	ldd	r22, Y+53	; 0x35
    3d14:	7e a9       	ldd	r23, Y+54	; 0x36
    3d16:	8f a9       	ldd	r24, Y+55	; 0x37
    3d18:	98 ad       	ldd	r25, Y+56	; 0x38
    3d1a:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	9a af       	std	Y+58, r25	; 0x3a
    3d24:	89 af       	std	Y+57, r24	; 0x39
    3d26:	89 ad       	ldd	r24, Y+57	; 0x39
    3d28:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d2a:	9e af       	std	Y+62, r25	; 0x3e
    3d2c:	8d af       	std	Y+61, r24	; 0x3d
    3d2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d30:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	f1 f7       	brne	.-4      	; 0x3d32 <LED_Correct_Celebration+0x878>
    3d36:	9e af       	std	Y+62, r25	; 0x3e
    3d38:	8d af       	std	Y+61, r24	; 0x3d
	_delay_ms(HALF_SECOND);
	DIO_WritePin(LED2,LOW);
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	8e e0       	ldi	r24, 0x0E	; 14
    3d3e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>

	DIO_WritePin(LED1,HIGH);
    3d42:	61 e0       	ldi	r22, 0x01	; 1
    3d44:	8d e0       	ldi	r24, 0x0D	; 13
    3d46:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	aa e7       	ldi	r26, 0x7A	; 122
    3d50:	b4 e4       	ldi	r27, 0x44	; 68
    3d52:	89 8f       	std	Y+25, r24	; 0x19
    3d54:	9a 8f       	std	Y+26, r25	; 0x1a
    3d56:	ab 8f       	std	Y+27, r26	; 0x1b
    3d58:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	4a e7       	ldi	r20, 0x7A	; 122
    3d60:	53 e4       	ldi	r21, 0x43	; 67
    3d62:	69 8d       	ldd	r22, Y+25	; 0x19
    3d64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d6a:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	8b a7       	std	Y+43, r24	; 0x2b
    3d74:	9c a7       	std	Y+44, r25	; 0x2c
    3d76:	ad a7       	std	Y+45, r26	; 0x2d
    3d78:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e8       	ldi	r20, 0x80	; 128
    3d80:	5f e3       	ldi	r21, 0x3F	; 63
    3d82:	6b a5       	ldd	r22, Y+43	; 0x2b
    3d84:	7c a5       	ldd	r23, Y+44	; 0x2c
    3d86:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d88:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d8a:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3d8e:	88 23       	and	r24, r24
    3d90:	2c f4       	brge	.+10     	; 0x3d9c <LED_Correct_Celebration+0x8e2>
		__ticks = 1;
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	98 ab       	std	Y+48, r25	; 0x30
    3d98:	8f a7       	std	Y+47, r24	; 0x2f
    3d9a:	3f c0       	rjmp	.+126    	; 0x3e1a <LED_Correct_Celebration+0x960>
	else if (__tmp > 65535)
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	3f ef       	ldi	r19, 0xFF	; 255
    3da0:	4f e7       	ldi	r20, 0x7F	; 127
    3da2:	57 e4       	ldi	r21, 0x47	; 71
    3da4:	6b a5       	ldd	r22, Y+43	; 0x2b
    3da6:	7c a5       	ldd	r23, Y+44	; 0x2c
    3da8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3daa:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dac:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    3db0:	18 16       	cp	r1, r24
    3db2:	4c f5       	brge	.+82     	; 0x3e06 <LED_Correct_Celebration+0x94c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	40 e2       	ldi	r20, 0x20	; 32
    3dba:	51 e4       	ldi	r21, 0x41	; 65
    3dbc:	69 8d       	ldd	r22, Y+25	; 0x19
    3dbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dc4:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	bc 01       	movw	r22, r24
    3dce:	cd 01       	movw	r24, r26
    3dd0:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	98 ab       	std	Y+48, r25	; 0x30
    3dda:	8f a7       	std	Y+47, r24	; 0x2f
    3ddc:	0f c0       	rjmp	.+30     	; 0x3dfc <LED_Correct_Celebration+0x942>
    3dde:	89 e1       	ldi	r24, 0x19	; 25
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	9a ab       	std	Y+50, r25	; 0x32
    3de4:	89 ab       	std	Y+49, r24	; 0x31
    3de6:	89 a9       	ldd	r24, Y+49	; 0x31
    3de8:	9a a9       	ldd	r25, Y+50	; 0x32
    3dea:	01 97       	sbiw	r24, 0x01	; 1
    3dec:	f1 f7       	brne	.-4      	; 0x3dea <LED_Correct_Celebration+0x930>
    3dee:	9a ab       	std	Y+50, r25	; 0x32
    3df0:	89 ab       	std	Y+49, r24	; 0x31
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3df4:	98 a9       	ldd	r25, Y+48	; 0x30
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	98 ab       	std	Y+48, r25	; 0x30
    3dfa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dfe:	98 a9       	ldd	r25, Y+48	; 0x30
    3e00:	89 2b       	or	r24, r25
    3e02:	69 f7       	brne	.-38     	; 0x3dde <LED_Correct_Celebration+0x924>
    3e04:	14 c0       	rjmp	.+40     	; 0x3e2e <LED_Correct_Celebration+0x974>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e06:	6b a5       	ldd	r22, Y+43	; 0x2b
    3e08:	7c a5       	ldd	r23, Y+44	; 0x2c
    3e0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e0e:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	98 ab       	std	Y+48, r25	; 0x30
    3e18:	8f a7       	std	Y+47, r24	; 0x2f
    3e1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e1c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e1e:	9c ab       	std	Y+52, r25	; 0x34
    3e20:	8b ab       	std	Y+51, r24	; 0x33
    3e22:	8b a9       	ldd	r24, Y+51	; 0x33
    3e24:	9c a9       	ldd	r25, Y+52	; 0x34
    3e26:	01 97       	sbiw	r24, 0x01	; 1
    3e28:	f1 f7       	brne	.-4      	; 0x3e26 <LED_Correct_Celebration+0x96c>
    3e2a:	9c ab       	std	Y+52, r25	; 0x34
    3e2c:	8b ab       	std	Y+51, r24	; 0x33
	_delay_ms(HALF_SECOND);
	DIO_WritePin(LED1,LOW);
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	8d e0       	ldi	r24, 0x0D	; 13
    3e32:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	
	DIO_WritePin(LED0,HIGH);
    3e36:	61 e0       	ldi	r22, 0x01	; 1
    3e38:	8c e0       	ldi	r24, 0x0C	; 12
    3e3a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	aa e7       	ldi	r26, 0x7A	; 122
    3e44:	b4 e4       	ldi	r27, 0x44	; 68
    3e46:	8d 8f       	std	Y+29, r24	; 0x1d
    3e48:	9e 8f       	std	Y+30, r25	; 0x1e
    3e4a:	af 8f       	std	Y+31, r26	; 0x1f
    3e4c:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	4a e7       	ldi	r20, 0x7A	; 122
    3e54:	53 e4       	ldi	r21, 0x43	; 67
    3e56:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3e58:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3e5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e5c:	98 a1       	ldd	r25, Y+32	; 0x20
    3e5e:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	89 a3       	std	Y+33, r24	; 0x21
    3e68:	9a a3       	std	Y+34, r25	; 0x22
    3e6a:	ab a3       	std	Y+35, r26	; 0x23
    3e6c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	40 e8       	ldi	r20, 0x80	; 128
    3e74:	5f e3       	ldi	r21, 0x3F	; 63
    3e76:	69 a1       	ldd	r22, Y+33	; 0x21
    3e78:	7a a1       	ldd	r23, Y+34	; 0x22
    3e7a:	8b a1       	ldd	r24, Y+35	; 0x23
    3e7c:	9c a1       	ldd	r25, Y+36	; 0x24
    3e7e:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3e82:	88 23       	and	r24, r24
    3e84:	2c f4       	brge	.+10     	; 0x3e90 <LED_Correct_Celebration+0x9d6>
		__ticks = 1;
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	9e a3       	std	Y+38, r25	; 0x26
    3e8c:	8d a3       	std	Y+37, r24	; 0x25
    3e8e:	3f c0       	rjmp	.+126    	; 0x3f0e <LED_Correct_Celebration+0xa54>
	else if (__tmp > 65535)
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	3f ef       	ldi	r19, 0xFF	; 255
    3e94:	4f e7       	ldi	r20, 0x7F	; 127
    3e96:	57 e4       	ldi	r21, 0x47	; 71
    3e98:	69 a1       	ldd	r22, Y+33	; 0x21
    3e9a:	7a a1       	ldd	r23, Y+34	; 0x22
    3e9c:	8b a1       	ldd	r24, Y+35	; 0x23
    3e9e:	9c a1       	ldd	r25, Y+36	; 0x24
    3ea0:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    3ea4:	18 16       	cp	r1, r24
    3ea6:	4c f5       	brge	.+82     	; 0x3efa <LED_Correct_Celebration+0xa40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	40 e2       	ldi	r20, 0x20	; 32
    3eae:	51 e4       	ldi	r21, 0x41	; 65
    3eb0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3eb2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3eb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3eb6:	98 a1       	ldd	r25, Y+32	; 0x20
    3eb8:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	9e a3       	std	Y+38, r25	; 0x26
    3ece:	8d a3       	std	Y+37, r24	; 0x25
    3ed0:	0f c0       	rjmp	.+30     	; 0x3ef0 <LED_Correct_Celebration+0xa36>
    3ed2:	89 e1       	ldi	r24, 0x19	; 25
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	98 a7       	std	Y+40, r25	; 0x28
    3ed8:	8f a3       	std	Y+39, r24	; 0x27
    3eda:	8f a1       	ldd	r24, Y+39	; 0x27
    3edc:	98 a5       	ldd	r25, Y+40	; 0x28
    3ede:	01 97       	sbiw	r24, 0x01	; 1
    3ee0:	f1 f7       	brne	.-4      	; 0x3ede <LED_Correct_Celebration+0xa24>
    3ee2:	98 a7       	std	Y+40, r25	; 0x28
    3ee4:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    3eea:	01 97       	sbiw	r24, 0x01	; 1
    3eec:	9e a3       	std	Y+38, r25	; 0x26
    3eee:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ef4:	89 2b       	or	r24, r25
    3ef6:	69 f7       	brne	.-38     	; 0x3ed2 <LED_Correct_Celebration+0xa18>
    3ef8:	14 c0       	rjmp	.+40     	; 0x3f22 <LED_Correct_Celebration+0xa68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3efa:	69 a1       	ldd	r22, Y+33	; 0x21
    3efc:	7a a1       	ldd	r23, Y+34	; 0x22
    3efe:	8b a1       	ldd	r24, Y+35	; 0x23
    3f00:	9c a1       	ldd	r25, Y+36	; 0x24
    3f02:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	9e a3       	std	Y+38, r25	; 0x26
    3f0c:	8d a3       	std	Y+37, r24	; 0x25
    3f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f10:	9e a1       	ldd	r25, Y+38	; 0x26
    3f12:	9a a7       	std	Y+42, r25	; 0x2a
    3f14:	89 a7       	std	Y+41, r24	; 0x29
    3f16:	89 a5       	ldd	r24, Y+41	; 0x29
    3f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <LED_Correct_Celebration+0xa60>
    3f1e:	9a a7       	std	Y+42, r25	; 0x2a
    3f20:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(HALF_SECOND);
	DIO_WritePin(LED0,LOW);
    3f22:	60 e0       	ldi	r22, 0x00	; 0
    3f24:	8c e0       	ldi	r24, 0x0C	; 12
    3f26:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
}
    3f2a:	00 00       	nop
    3f2c:	c0 59       	subi	r28, 0x90	; 144
    3f2e:	df 4f       	sbci	r29, 0xFF	; 255
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	1f 91       	pop	r17
    3f40:	0f 91       	pop	r16
    3f42:	08 95       	ret

00003f44 <End_Questions>:
 * @return: void
 *
 * Description: function that ends the Questions and do some commands   
 *
 ********************************************************************************/
void End_Questions(void){
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	cd b7       	in	r28, 0x3d	; 61
    3f4a:	de b7       	in	r29, 0x3e	; 62
    3f4c:	6d 97       	sbiw	r28, 0x1d	; 29
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
		

		LCD_gotoRowColumn(ROW2,COL4);
    3f58:	64 e0       	ldi	r22, 0x04	; 4
    3f5a:	82 e0       	ldi	r24, 0x02	; 2
    3f5c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <LCD_gotoRowColumn>
		LCD_displayString("THANK YOU ");
    3f60:	83 e2       	ldi	r24, 0x23	; 35
    3f62:	91 e0       	ldi	r25, 0x01	; 1
    3f64:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_displayString>
		LCD_displayChar(RIGHT_HEART);
    3f68:	83 e0       	ldi	r24, 0x03	; 3
    3f6a:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>
		LCD_displayChar(LEFT_HEART);
    3f6e:	82 e0       	ldi	r24, 0x02	; 2
    3f70:	0e 94 6d 07 	call	0xeda	; 0xeda <LCD_displayChar>


	for (uint8 i = 0;i<2;i++){
    3f74:	19 82       	std	Y+1, r1	; 0x01
    3f76:	0f c1       	rjmp	.+542    	; 0x4196 <End_Questions+0x252>
		
	DIO_WritePin(LED0,HIGH);
    3f78:	61 e0       	ldi	r22, 0x01	; 1
    3f7a:	8c e0       	ldi	r24, 0x0C	; 12
    3f7c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(LED1,HIGH);
    3f80:	61 e0       	ldi	r22, 0x01	; 1
    3f82:	8d e0       	ldi	r24, 0x0D	; 13
    3f84:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(LED2,HIGH);
    3f88:	61 e0       	ldi	r22, 0x01	; 1
    3f8a:	8e e0       	ldi	r24, 0x0E	; 14
    3f8c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(LED3,HIGH);
    3f90:	61 e0       	ldi	r22, 0x01	; 1
    3f92:	8f e0       	ldi	r24, 0x0F	; 15
    3f94:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(BUZZER_PIN,HIGH);
    3f98:	61 e0       	ldi	r22, 0x01	; 1
    3f9a:	8b e0       	ldi	r24, 0x0B	; 11
    3f9c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	aa e7       	ldi	r26, 0x7A	; 122
    3fa6:	b4 e4       	ldi	r27, 0x44	; 68
    3fa8:	8a 83       	std	Y+2, r24	; 0x02
    3faa:	9b 83       	std	Y+3, r25	; 0x03
    3fac:	ac 83       	std	Y+4, r26	; 0x04
    3fae:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	4a e7       	ldi	r20, 0x7A	; 122
    3fb6:	53 e4       	ldi	r21, 0x43	; 67
    3fb8:	6a 81       	ldd	r22, Y+2	; 0x02
    3fba:	7b 81       	ldd	r23, Y+3	; 0x03
    3fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3fbe:	9d 81       	ldd	r25, Y+5	; 0x05
    3fc0:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	8c 8b       	std	Y+20, r24	; 0x14
    3fca:	9d 8b       	std	Y+21, r25	; 0x15
    3fcc:	ae 8b       	std	Y+22, r26	; 0x16
    3fce:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e8       	ldi	r20, 0x80	; 128
    3fd6:	5f e3       	ldi	r21, 0x3F	; 63
    3fd8:	6c 89       	ldd	r22, Y+20	; 0x14
    3fda:	7d 89       	ldd	r23, Y+21	; 0x15
    3fdc:	8e 89       	ldd	r24, Y+22	; 0x16
    3fde:	9f 89       	ldd	r25, Y+23	; 0x17
    3fe0:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    3fe4:	88 23       	and	r24, r24
    3fe6:	2c f4       	brge	.+10     	; 0x3ff2 <End_Questions+0xae>
		__ticks = 1;
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	99 8f       	std	Y+25, r25	; 0x19
    3fee:	88 8f       	std	Y+24, r24	; 0x18
    3ff0:	3f c0       	rjmp	.+126    	; 0x4070 <End_Questions+0x12c>
	else if (__tmp > 65535)
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	3f ef       	ldi	r19, 0xFF	; 255
    3ff6:	4f e7       	ldi	r20, 0x7F	; 127
    3ff8:	57 e4       	ldi	r21, 0x47	; 71
    3ffa:	6c 89       	ldd	r22, Y+20	; 0x14
    3ffc:	7d 89       	ldd	r23, Y+21	; 0x15
    3ffe:	8e 89       	ldd	r24, Y+22	; 0x16
    4000:	9f 89       	ldd	r25, Y+23	; 0x17
    4002:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    4006:	18 16       	cp	r1, r24
    4008:	4c f5       	brge	.+82     	; 0x405c <End_Questions+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e2       	ldi	r20, 0x20	; 32
    4010:	51 e4       	ldi	r21, 0x41	; 65
    4012:	6a 81       	ldd	r22, Y+2	; 0x02
    4014:	7b 81       	ldd	r23, Y+3	; 0x03
    4016:	8c 81       	ldd	r24, Y+4	; 0x04
    4018:	9d 81       	ldd	r25, Y+5	; 0x05
    401a:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	99 8f       	std	Y+25, r25	; 0x19
    4030:	88 8f       	std	Y+24, r24	; 0x18
    4032:	0f c0       	rjmp	.+30     	; 0x4052 <End_Questions+0x10e>
    4034:	89 e1       	ldi	r24, 0x19	; 25
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	9b 8f       	std	Y+27, r25	; 0x1b
    403a:	8a 8f       	std	Y+26, r24	; 0x1a
    403c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    403e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4040:	01 97       	sbiw	r24, 0x01	; 1
    4042:	f1 f7       	brne	.-4      	; 0x4040 <End_Questions+0xfc>
    4044:	9b 8f       	std	Y+27, r25	; 0x1b
    4046:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4048:	88 8d       	ldd	r24, Y+24	; 0x18
    404a:	99 8d       	ldd	r25, Y+25	; 0x19
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	99 8f       	std	Y+25, r25	; 0x19
    4050:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4052:	88 8d       	ldd	r24, Y+24	; 0x18
    4054:	99 8d       	ldd	r25, Y+25	; 0x19
    4056:	89 2b       	or	r24, r25
    4058:	69 f7       	brne	.-38     	; 0x4034 <End_Questions+0xf0>
    405a:	14 c0       	rjmp	.+40     	; 0x4084 <End_Questions+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405c:	6c 89       	ldd	r22, Y+20	; 0x14
    405e:	7d 89       	ldd	r23, Y+21	; 0x15
    4060:	8e 89       	ldd	r24, Y+22	; 0x16
    4062:	9f 89       	ldd	r25, Y+23	; 0x17
    4064:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	99 8f       	std	Y+25, r25	; 0x19
    406e:	88 8f       	std	Y+24, r24	; 0x18
    4070:	88 8d       	ldd	r24, Y+24	; 0x18
    4072:	99 8d       	ldd	r25, Y+25	; 0x19
    4074:	9d 8f       	std	Y+29, r25	; 0x1d
    4076:	8c 8f       	std	Y+28, r24	; 0x1c
    4078:	8c 8d       	ldd	r24, Y+28	; 0x1c
    407a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    407c:	01 97       	sbiw	r24, 0x01	; 1
    407e:	f1 f7       	brne	.-4      	; 0x407c <End_Questions+0x138>
    4080:	9d 8f       	std	Y+29, r25	; 0x1d
    4082:	8c 8f       	std	Y+28, r24	; 0x1c
	_delay_ms(HALF_SECOND);
	
	DIO_WritePin(LED0,LOW);
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	8c e0       	ldi	r24, 0x0C	; 12
    4088:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(LED1,LOW);
    408c:	60 e0       	ldi	r22, 0x00	; 0
    408e:	8d e0       	ldi	r24, 0x0D	; 13
    4090:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(LED2,LOW);
    4094:	60 e0       	ldi	r22, 0x00	; 0
    4096:	8e e0       	ldi	r24, 0x0E	; 14
    4098:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(LED3,LOW);
    409c:	60 e0       	ldi	r22, 0x00	; 0
    409e:	8f e0       	ldi	r24, 0x0F	; 15
    40a0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(BUZZER_PIN,LOW);
    40a4:	60 e0       	ldi	r22, 0x00	; 0
    40a6:	8b e0       	ldi	r24, 0x0B	; 11
    40a8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	aa e7       	ldi	r26, 0x7A	; 122
    40b2:	b4 e4       	ldi	r27, 0x44	; 68
    40b4:	8e 83       	std	Y+6, r24	; 0x06
    40b6:	9f 83       	std	Y+7, r25	; 0x07
    40b8:	a8 87       	std	Y+8, r26	; 0x08
    40ba:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	4a e7       	ldi	r20, 0x7A	; 122
    40c2:	53 e4       	ldi	r21, 0x43	; 67
    40c4:	6e 81       	ldd	r22, Y+6	; 0x06
    40c6:	7f 81       	ldd	r23, Y+7	; 0x07
    40c8:	88 85       	ldd	r24, Y+8	; 0x08
    40ca:	99 85       	ldd	r25, Y+9	; 0x09
    40cc:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	8a 87       	std	Y+10, r24	; 0x0a
    40d6:	9b 87       	std	Y+11, r25	; 0x0b
    40d8:	ac 87       	std	Y+12, r26	; 0x0c
    40da:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	40 e8       	ldi	r20, 0x80	; 128
    40e2:	5f e3       	ldi	r21, 0x3F	; 63
    40e4:	6a 85       	ldd	r22, Y+10	; 0x0a
    40e6:	7b 85       	ldd	r23, Y+11	; 0x0b
    40e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    40ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    40ec:	0e 94 03 21 	call	0x4206	; 0x4206 <__cmpsf2>
    40f0:	88 23       	and	r24, r24
    40f2:	2c f4       	brge	.+10     	; 0x40fe <End_Questions+0x1ba>
		__ticks = 1;
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	9f 87       	std	Y+15, r25	; 0x0f
    40fa:	8e 87       	std	Y+14, r24	; 0x0e
    40fc:	3f c0       	rjmp	.+126    	; 0x417c <End_Questions+0x238>
	else if (__tmp > 65535)
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	3f ef       	ldi	r19, 0xFF	; 255
    4102:	4f e7       	ldi	r20, 0x7F	; 127
    4104:	57 e4       	ldi	r21, 0x47	; 71
    4106:	6a 85       	ldd	r22, Y+10	; 0x0a
    4108:	7b 85       	ldd	r23, Y+11	; 0x0b
    410a:	8c 85       	ldd	r24, Y+12	; 0x0c
    410c:	9d 85       	ldd	r25, Y+13	; 0x0d
    410e:	0e 94 84 21 	call	0x4308	; 0x4308 <__gesf2>
    4112:	18 16       	cp	r1, r24
    4114:	4c f5       	brge	.+82     	; 0x4168 <End_Questions+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	40 e2       	ldi	r20, 0x20	; 32
    411c:	51 e4       	ldi	r21, 0x41	; 65
    411e:	6e 81       	ldd	r22, Y+6	; 0x06
    4120:	7f 81       	ldd	r23, Y+7	; 0x07
    4122:	88 85       	ldd	r24, Y+8	; 0x08
    4124:	99 85       	ldd	r25, Y+9	; 0x09
    4126:	0e 94 89 21 	call	0x4312	; 0x4312 <__mulsf3>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	bc 01       	movw	r22, r24
    4130:	cd 01       	movw	r24, r26
    4132:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	9f 87       	std	Y+15, r25	; 0x0f
    413c:	8e 87       	std	Y+14, r24	; 0x0e
    413e:	0f c0       	rjmp	.+30     	; 0x415e <End_Questions+0x21a>
    4140:	89 e1       	ldi	r24, 0x19	; 25
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	99 8b       	std	Y+17, r25	; 0x11
    4146:	88 8b       	std	Y+16, r24	; 0x10
    4148:	88 89       	ldd	r24, Y+16	; 0x10
    414a:	99 89       	ldd	r25, Y+17	; 0x11
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	f1 f7       	brne	.-4      	; 0x414c <End_Questions+0x208>
    4150:	99 8b       	std	Y+17, r25	; 0x11
    4152:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4154:	8e 85       	ldd	r24, Y+14	; 0x0e
    4156:	9f 85       	ldd	r25, Y+15	; 0x0f
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	9f 87       	std	Y+15, r25	; 0x0f
    415c:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4160:	9f 85       	ldd	r25, Y+15	; 0x0f
    4162:	89 2b       	or	r24, r25
    4164:	69 f7       	brne	.-38     	; 0x4140 <End_Questions+0x1fc>
    4166:	14 c0       	rjmp	.+40     	; 0x4190 <End_Questions+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4168:	6a 85       	ldd	r22, Y+10	; 0x0a
    416a:	7b 85       	ldd	r23, Y+11	; 0x0b
    416c:	8c 85       	ldd	r24, Y+12	; 0x0c
    416e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4170:	0e 94 08 21 	call	0x4210	; 0x4210 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	9f 87       	std	Y+15, r25	; 0x0f
    417a:	8e 87       	std	Y+14, r24	; 0x0e
    417c:	8e 85       	ldd	r24, Y+14	; 0x0e
    417e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4180:	9b 8b       	std	Y+19, r25	; 0x13
    4182:	8a 8b       	std	Y+18, r24	; 0x12
    4184:	8a 89       	ldd	r24, Y+18	; 0x12
    4186:	9b 89       	ldd	r25, Y+19	; 0x13
    4188:	01 97       	sbiw	r24, 0x01	; 1
    418a:	f1 f7       	brne	.-4      	; 0x4188 <End_Questions+0x244>
    418c:	9b 8b       	std	Y+19, r25	; 0x13
    418e:	8a 8b       	std	Y+18, r24	; 0x12
		LCD_displayString("THANK YOU ");
		LCD_displayChar(RIGHT_HEART);
		LCD_displayChar(LEFT_HEART);


	for (uint8 i = 0;i<2;i++){
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	8f 5f       	subi	r24, 0xFF	; 255
    4194:	89 83       	std	Y+1, r24	; 0x01
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	82 30       	cpi	r24, 0x02	; 2
    419a:	08 f4       	brcc	.+2      	; 0x419e <End_Questions+0x25a>
    419c:	ed ce       	rjmp	.-550    	; 0x3f78 <End_Questions+0x34>
	DIO_WritePin(LED3,LOW);
	DIO_WritePin(BUZZER_PIN,LOW);
	_delay_ms(HALF_SECOND);
	
	}
}
    419e:	00 00       	nop
    41a0:	6d 96       	adiw	r28, 0x1d	; 29
    41a2:	0f b6       	in	r0, 0x3f	; 63
    41a4:	f8 94       	cli
    41a6:	de bf       	out	0x3e, r29	; 62
    41a8:	0f be       	out	0x3f, r0	; 63
    41aa:	cd bf       	out	0x3d, r28	; 61
    41ac:	df 91       	pop	r29
    41ae:	cf 91       	pop	r28
    41b0:	08 95       	ret

000041b2 <Again>:
 *			 NO, if the NO button is pressed
 *
 * Description: function that executes a set of commands after a correct answer   
 *
 ********************************************************************************/
uint8 Again(void){
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
	
	LCD_clear();
    41ba:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_clear>
	LCD_gotoRowColumn(ROW1,COL1);
    41be:	61 e0       	ldi	r22, 0x01	; 1
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <LCD_gotoRowColumn>
	LCD_displayString("Play Again ?");
    41c6:	8e e2       	ldi	r24, 0x2E	; 46
    41c8:	91 e0       	ldi	r25, 0x01	; 1
    41ca:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_displayString>
	LCD_displayStringRowColumn(ROW2,COL1,"B0:Yes B1:No");
    41ce:	4b e3       	ldi	r20, 0x3B	; 59
    41d0:	51 e0       	ldi	r21, 0x01	; 1
    41d2:	61 e0       	ldi	r22, 0x01	; 1
    41d4:	82 e0       	ldi	r24, 0x02	; 2
    41d6:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_displayStringRowColumn>
	
	while(DIO_ReadPin(BTN0) == LOW && DIO_ReadPin(BTN1) == LOW);
    41da:	00 00       	nop
    41dc:	84 e1       	ldi	r24, 0x14	; 20
    41de:	0e 94 34 01 	call	0x268	; 0x268 <DIO_ReadPin>
    41e2:	88 23       	and	r24, r24
    41e4:	29 f4       	brne	.+10     	; 0x41f0 <Again+0x3e>
    41e6:	8a e0       	ldi	r24, 0x0A	; 10
    41e8:	0e 94 34 01 	call	0x268	; 0x268 <DIO_ReadPin>
    41ec:	88 23       	and	r24, r24
    41ee:	b1 f3       	breq	.-20     	; 0x41dc <Again+0x2a>
	if (DIO_ReadPin(BTN0)==HIGH)
    41f0:	84 e1       	ldi	r24, 0x14	; 20
    41f2:	0e 94 34 01 	call	0x268	; 0x268 <DIO_ReadPin>
    41f6:	81 30       	cpi	r24, 0x01	; 1
    41f8:	11 f4       	brne	.+4      	; 0x41fe <Again+0x4c>
	{
		return YES;
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	01 c0       	rjmp	.+2      	; 0x4200 <Again+0x4e>
	}
	else return NO;
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	08 95       	ret

00004206 <__cmpsf2>:
    4206:	0e 94 37 21 	call	0x426e	; 0x426e <__fp_cmp>
    420a:	08 f4       	brcc	.+2      	; 0x420e <__cmpsf2+0x8>
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	08 95       	ret

00004210 <__fixunssfsi>:
    4210:	0e 94 63 21 	call	0x42c6	; 0x42c6 <__fp_splitA>
    4214:	88 f0       	brcs	.+34     	; 0x4238 <__fixunssfsi+0x28>
    4216:	9f 57       	subi	r25, 0x7F	; 127
    4218:	98 f0       	brcs	.+38     	; 0x4240 <__fixunssfsi+0x30>
    421a:	b9 2f       	mov	r27, r25
    421c:	99 27       	eor	r25, r25
    421e:	b7 51       	subi	r27, 0x17	; 23
    4220:	b0 f0       	brcs	.+44     	; 0x424e <__fixunssfsi+0x3e>
    4222:	e1 f0       	breq	.+56     	; 0x425c <__fixunssfsi+0x4c>
    4224:	66 0f       	add	r22, r22
    4226:	77 1f       	adc	r23, r23
    4228:	88 1f       	adc	r24, r24
    422a:	99 1f       	adc	r25, r25
    422c:	1a f0       	brmi	.+6      	; 0x4234 <__fixunssfsi+0x24>
    422e:	ba 95       	dec	r27
    4230:	c9 f7       	brne	.-14     	; 0x4224 <__fixunssfsi+0x14>
    4232:	14 c0       	rjmp	.+40     	; 0x425c <__fixunssfsi+0x4c>
    4234:	b1 30       	cpi	r27, 0x01	; 1
    4236:	91 f0       	breq	.+36     	; 0x425c <__fixunssfsi+0x4c>
    4238:	0e 94 7d 21 	call	0x42fa	; 0x42fa <__fp_zero>
    423c:	b1 e0       	ldi	r27, 0x01	; 1
    423e:	08 95       	ret
    4240:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__fp_zero>
    4244:	67 2f       	mov	r22, r23
    4246:	78 2f       	mov	r23, r24
    4248:	88 27       	eor	r24, r24
    424a:	b8 5f       	subi	r27, 0xF8	; 248
    424c:	39 f0       	breq	.+14     	; 0x425c <__fixunssfsi+0x4c>
    424e:	b9 3f       	cpi	r27, 0xF9	; 249
    4250:	cc f3       	brlt	.-14     	; 0x4244 <__fixunssfsi+0x34>
    4252:	86 95       	lsr	r24
    4254:	77 95       	ror	r23
    4256:	67 95       	ror	r22
    4258:	b3 95       	inc	r27
    425a:	d9 f7       	brne	.-10     	; 0x4252 <__fixunssfsi+0x42>
    425c:	3e f4       	brtc	.+14     	; 0x426c <__fixunssfsi+0x5c>
    425e:	90 95       	com	r25
    4260:	80 95       	com	r24
    4262:	70 95       	com	r23
    4264:	61 95       	neg	r22
    4266:	7f 4f       	sbci	r23, 0xFF	; 255
    4268:	8f 4f       	sbci	r24, 0xFF	; 255
    426a:	9f 4f       	sbci	r25, 0xFF	; 255
    426c:	08 95       	ret

0000426e <__fp_cmp>:
    426e:	99 0f       	add	r25, r25
    4270:	00 08       	sbc	r0, r0
    4272:	55 0f       	add	r21, r21
    4274:	aa 0b       	sbc	r26, r26
    4276:	e0 e8       	ldi	r30, 0x80	; 128
    4278:	fe ef       	ldi	r31, 0xFE	; 254
    427a:	16 16       	cp	r1, r22
    427c:	17 06       	cpc	r1, r23
    427e:	e8 07       	cpc	r30, r24
    4280:	f9 07       	cpc	r31, r25
    4282:	c0 f0       	brcs	.+48     	; 0x42b4 <__fp_cmp+0x46>
    4284:	12 16       	cp	r1, r18
    4286:	13 06       	cpc	r1, r19
    4288:	e4 07       	cpc	r30, r20
    428a:	f5 07       	cpc	r31, r21
    428c:	98 f0       	brcs	.+38     	; 0x42b4 <__fp_cmp+0x46>
    428e:	62 1b       	sub	r22, r18
    4290:	73 0b       	sbc	r23, r19
    4292:	84 0b       	sbc	r24, r20
    4294:	95 0b       	sbc	r25, r21
    4296:	39 f4       	brne	.+14     	; 0x42a6 <__fp_cmp+0x38>
    4298:	0a 26       	eor	r0, r26
    429a:	61 f0       	breq	.+24     	; 0x42b4 <__fp_cmp+0x46>
    429c:	23 2b       	or	r18, r19
    429e:	24 2b       	or	r18, r20
    42a0:	25 2b       	or	r18, r21
    42a2:	21 f4       	brne	.+8      	; 0x42ac <__fp_cmp+0x3e>
    42a4:	08 95       	ret
    42a6:	0a 26       	eor	r0, r26
    42a8:	09 f4       	brne	.+2      	; 0x42ac <__fp_cmp+0x3e>
    42aa:	a1 40       	sbci	r26, 0x01	; 1
    42ac:	a6 95       	lsr	r26
    42ae:	8f ef       	ldi	r24, 0xFF	; 255
    42b0:	81 1d       	adc	r24, r1
    42b2:	81 1d       	adc	r24, r1
    42b4:	08 95       	ret

000042b6 <__fp_split3>:
    42b6:	57 fd       	sbrc	r21, 7
    42b8:	90 58       	subi	r25, 0x80	; 128
    42ba:	44 0f       	add	r20, r20
    42bc:	55 1f       	adc	r21, r21
    42be:	59 f0       	breq	.+22     	; 0x42d6 <__fp_splitA+0x10>
    42c0:	5f 3f       	cpi	r21, 0xFF	; 255
    42c2:	71 f0       	breq	.+28     	; 0x42e0 <__fp_splitA+0x1a>
    42c4:	47 95       	ror	r20

000042c6 <__fp_splitA>:
    42c6:	88 0f       	add	r24, r24
    42c8:	97 fb       	bst	r25, 7
    42ca:	99 1f       	adc	r25, r25
    42cc:	61 f0       	breq	.+24     	; 0x42e6 <__fp_splitA+0x20>
    42ce:	9f 3f       	cpi	r25, 0xFF	; 255
    42d0:	79 f0       	breq	.+30     	; 0x42f0 <__fp_splitA+0x2a>
    42d2:	87 95       	ror	r24
    42d4:	08 95       	ret
    42d6:	12 16       	cp	r1, r18
    42d8:	13 06       	cpc	r1, r19
    42da:	14 06       	cpc	r1, r20
    42dc:	55 1f       	adc	r21, r21
    42de:	f2 cf       	rjmp	.-28     	; 0x42c4 <__fp_split3+0xe>
    42e0:	46 95       	lsr	r20
    42e2:	f1 df       	rcall	.-30     	; 0x42c6 <__fp_splitA>
    42e4:	08 c0       	rjmp	.+16     	; 0x42f6 <__fp_splitA+0x30>
    42e6:	16 16       	cp	r1, r22
    42e8:	17 06       	cpc	r1, r23
    42ea:	18 06       	cpc	r1, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	f1 cf       	rjmp	.-30     	; 0x42d2 <__fp_splitA+0xc>
    42f0:	86 95       	lsr	r24
    42f2:	71 05       	cpc	r23, r1
    42f4:	61 05       	cpc	r22, r1
    42f6:	08 94       	sec
    42f8:	08 95       	ret

000042fa <__fp_zero>:
    42fa:	e8 94       	clt

000042fc <__fp_szero>:
    42fc:	bb 27       	eor	r27, r27
    42fe:	66 27       	eor	r22, r22
    4300:	77 27       	eor	r23, r23
    4302:	cb 01       	movw	r24, r22
    4304:	97 f9       	bld	r25, 7
    4306:	08 95       	ret

00004308 <__gesf2>:
    4308:	0e 94 37 21 	call	0x426e	; 0x426e <__fp_cmp>
    430c:	08 f4       	brcc	.+2      	; 0x4310 <__gesf2+0x8>
    430e:	8f ef       	ldi	r24, 0xFF	; 255
    4310:	08 95       	ret

00004312 <__mulsf3>:
    4312:	0e 94 9c 21 	call	0x4338	; 0x4338 <__mulsf3x>
    4316:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__fp_round>
    431a:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__fp_pscA>
    431e:	38 f0       	brcs	.+14     	; 0x432e <__mulsf3+0x1c>
    4320:	0e 94 06 22 	call	0x440c	; 0x440c <__fp_pscB>
    4324:	20 f0       	brcs	.+8      	; 0x432e <__mulsf3+0x1c>
    4326:	95 23       	and	r25, r21
    4328:	11 f0       	breq	.+4      	; 0x432e <__mulsf3+0x1c>
    432a:	0c 94 f6 21 	jmp	0x43ec	; 0x43ec <__fp_inf>
    432e:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__fp_nan>
    4332:	11 24       	eor	r1, r1
    4334:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <__fp_szero>

00004338 <__mulsf3x>:
    4338:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__fp_split3>
    433c:	70 f3       	brcs	.-36     	; 0x431a <__mulsf3+0x8>

0000433e <__mulsf3_pse>:
    433e:	95 9f       	mul	r25, r21
    4340:	c1 f3       	breq	.-16     	; 0x4332 <__mulsf3+0x20>
    4342:	95 0f       	add	r25, r21
    4344:	50 e0       	ldi	r21, 0x00	; 0
    4346:	55 1f       	adc	r21, r21
    4348:	62 9f       	mul	r22, r18
    434a:	f0 01       	movw	r30, r0
    434c:	72 9f       	mul	r23, r18
    434e:	bb 27       	eor	r27, r27
    4350:	f0 0d       	add	r31, r0
    4352:	b1 1d       	adc	r27, r1
    4354:	63 9f       	mul	r22, r19
    4356:	aa 27       	eor	r26, r26
    4358:	f0 0d       	add	r31, r0
    435a:	b1 1d       	adc	r27, r1
    435c:	aa 1f       	adc	r26, r26
    435e:	64 9f       	mul	r22, r20
    4360:	66 27       	eor	r22, r22
    4362:	b0 0d       	add	r27, r0
    4364:	a1 1d       	adc	r26, r1
    4366:	66 1f       	adc	r22, r22
    4368:	82 9f       	mul	r24, r18
    436a:	22 27       	eor	r18, r18
    436c:	b0 0d       	add	r27, r0
    436e:	a1 1d       	adc	r26, r1
    4370:	62 1f       	adc	r22, r18
    4372:	73 9f       	mul	r23, r19
    4374:	b0 0d       	add	r27, r0
    4376:	a1 1d       	adc	r26, r1
    4378:	62 1f       	adc	r22, r18
    437a:	83 9f       	mul	r24, r19
    437c:	a0 0d       	add	r26, r0
    437e:	61 1d       	adc	r22, r1
    4380:	22 1f       	adc	r18, r18
    4382:	74 9f       	mul	r23, r20
    4384:	33 27       	eor	r19, r19
    4386:	a0 0d       	add	r26, r0
    4388:	61 1d       	adc	r22, r1
    438a:	23 1f       	adc	r18, r19
    438c:	84 9f       	mul	r24, r20
    438e:	60 0d       	add	r22, r0
    4390:	21 1d       	adc	r18, r1
    4392:	82 2f       	mov	r24, r18
    4394:	76 2f       	mov	r23, r22
    4396:	6a 2f       	mov	r22, r26
    4398:	11 24       	eor	r1, r1
    439a:	9f 57       	subi	r25, 0x7F	; 127
    439c:	50 40       	sbci	r21, 0x00	; 0
    439e:	9a f0       	brmi	.+38     	; 0x43c6 <__mulsf3_pse+0x88>
    43a0:	f1 f0       	breq	.+60     	; 0x43de <__mulsf3_pse+0xa0>
    43a2:	88 23       	and	r24, r24
    43a4:	4a f0       	brmi	.+18     	; 0x43b8 <__mulsf3_pse+0x7a>
    43a6:	ee 0f       	add	r30, r30
    43a8:	ff 1f       	adc	r31, r31
    43aa:	bb 1f       	adc	r27, r27
    43ac:	66 1f       	adc	r22, r22
    43ae:	77 1f       	adc	r23, r23
    43b0:	88 1f       	adc	r24, r24
    43b2:	91 50       	subi	r25, 0x01	; 1
    43b4:	50 40       	sbci	r21, 0x00	; 0
    43b6:	a9 f7       	brne	.-22     	; 0x43a2 <__mulsf3_pse+0x64>
    43b8:	9e 3f       	cpi	r25, 0xFE	; 254
    43ba:	51 05       	cpc	r21, r1
    43bc:	80 f0       	brcs	.+32     	; 0x43de <__mulsf3_pse+0xa0>
    43be:	0c 94 f6 21 	jmp	0x43ec	; 0x43ec <__fp_inf>
    43c2:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <__fp_szero>
    43c6:	5f 3f       	cpi	r21, 0xFF	; 255
    43c8:	e4 f3       	brlt	.-8      	; 0x43c2 <__mulsf3_pse+0x84>
    43ca:	98 3e       	cpi	r25, 0xE8	; 232
    43cc:	d4 f3       	brlt	.-12     	; 0x43c2 <__mulsf3_pse+0x84>
    43ce:	86 95       	lsr	r24
    43d0:	77 95       	ror	r23
    43d2:	67 95       	ror	r22
    43d4:	b7 95       	ror	r27
    43d6:	f7 95       	ror	r31
    43d8:	e7 95       	ror	r30
    43da:	9f 5f       	subi	r25, 0xFF	; 255
    43dc:	c1 f7       	brne	.-16     	; 0x43ce <__mulsf3_pse+0x90>
    43de:	fe 2b       	or	r31, r30
    43e0:	88 0f       	add	r24, r24
    43e2:	91 1d       	adc	r25, r1
    43e4:	96 95       	lsr	r25
    43e6:	87 95       	ror	r24
    43e8:	97 f9       	bld	r25, 7
    43ea:	08 95       	ret

000043ec <__fp_inf>:
    43ec:	97 f9       	bld	r25, 7
    43ee:	9f 67       	ori	r25, 0x7F	; 127
    43f0:	80 e8       	ldi	r24, 0x80	; 128
    43f2:	70 e0       	ldi	r23, 0x00	; 0
    43f4:	60 e0       	ldi	r22, 0x00	; 0
    43f6:	08 95       	ret

000043f8 <__fp_nan>:
    43f8:	9f ef       	ldi	r25, 0xFF	; 255
    43fa:	80 ec       	ldi	r24, 0xC0	; 192
    43fc:	08 95       	ret

000043fe <__fp_pscA>:
    43fe:	00 24       	eor	r0, r0
    4400:	0a 94       	dec	r0
    4402:	16 16       	cp	r1, r22
    4404:	17 06       	cpc	r1, r23
    4406:	18 06       	cpc	r1, r24
    4408:	09 06       	cpc	r0, r25
    440a:	08 95       	ret

0000440c <__fp_pscB>:
    440c:	00 24       	eor	r0, r0
    440e:	0a 94       	dec	r0
    4410:	12 16       	cp	r1, r18
    4412:	13 06       	cpc	r1, r19
    4414:	14 06       	cpc	r1, r20
    4416:	05 06       	cpc	r0, r21
    4418:	08 95       	ret

0000441a <__fp_round>:
    441a:	09 2e       	mov	r0, r25
    441c:	03 94       	inc	r0
    441e:	00 0c       	add	r0, r0
    4420:	11 f4       	brne	.+4      	; 0x4426 <__fp_round+0xc>
    4422:	88 23       	and	r24, r24
    4424:	52 f0       	brmi	.+20     	; 0x443a <__fp_round+0x20>
    4426:	bb 0f       	add	r27, r27
    4428:	40 f4       	brcc	.+16     	; 0x443a <__fp_round+0x20>
    442a:	bf 2b       	or	r27, r31
    442c:	11 f4       	brne	.+4      	; 0x4432 <__fp_round+0x18>
    442e:	60 ff       	sbrs	r22, 0
    4430:	04 c0       	rjmp	.+8      	; 0x443a <__fp_round+0x20>
    4432:	6f 5f       	subi	r22, 0xFF	; 255
    4434:	7f 4f       	sbci	r23, 0xFF	; 255
    4436:	8f 4f       	sbci	r24, 0xFF	; 255
    4438:	9f 4f       	sbci	r25, 0xFF	; 255
    443a:	08 95       	ret

0000443c <_exit>:
    443c:	f8 94       	cli

0000443e <__stop_program>:
    443e:	ff cf       	rjmp	.-2      	; 0x443e <__stop_program>
