
One_Million.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002628  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002628  0000269c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000027c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014ff  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c2  00000000  00000000  00003e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012bb  00000000  00000000  000046d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00005994  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000510  00000000  00000000  00005c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d1  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000065f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 82 08 	call	0x1104	; 0x1104 <main>
      7a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Button_Init>:
#include "Buttons_confg.h"
#include "DIO_Interface.h"
#include "Buttons.h"

/* this function intializes button to be input  */
void Button_Init(uint8 Pin_Num){
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	1f 92       	push	r1
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62
      8c:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(Pin_Num,INPUT_WITHOUT_PULL);
      8e:	61 e0       	ldi	r22, 0x01	; 1
      90:	89 81       	ldd	r24, Y+1	; 0x01
      92:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_SetPinDirection>
	
	
      96:	00 00       	nop
      98:	0f 90       	pop	r0
      9a:	df 91       	pop	r29
      9c:	cf 91       	pop	r28
      9e:	08 95       	ret

000000a0 <DIO_WritePin>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
      a4:	00 d0       	rcall	.+0      	; 0xa6 <DIO_WritePin+0x6>
      a6:	00 d0       	rcall	.+0      	; 0xa8 <DIO_WritePin+0x8>
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	8b 83       	std	Y+3, r24	; 0x03
      ae:	6c 83       	std	Y+4, r22	; 0x04
	GPIO* Local_Copy_Address=0;
      b0:	1a 82       	std	Y+2, r1	; 0x02
      b2:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNum<=pin7) && (PinNum>=pin0))
      b4:	8b 81       	ldd	r24, Y+3	; 0x03
      b6:	88 30       	cpi	r24, 0x08	; 8
      b8:	28 f4       	brcc	.+10     	; 0xc4 <DIO_WritePin+0x24>
	{
		Local_Copy_Address=GPIOA_DIO;
      ba:	89 e3       	ldi	r24, 0x39	; 57
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	9a 83       	std	Y+2, r25	; 0x02
      c0:	89 83       	std	Y+1, r24	; 0x01
      c2:	20 c0       	rjmp	.+64     	; 0x104 <DIO_WritePin+0x64>
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
      c4:	8b 81       	ldd	r24, Y+3	; 0x03
      c6:	80 31       	cpi	r24, 0x10	; 16
      c8:	40 f4       	brcc	.+16     	; 0xda <DIO_WritePin+0x3a>
      ca:	8b 81       	ldd	r24, Y+3	; 0x03
      cc:	88 30       	cpi	r24, 0x08	; 8
      ce:	28 f0       	brcs	.+10     	; 0xda <DIO_WritePin+0x3a>
	{
		Local_Copy_Address=GPIOB_DIO;
      d0:	86 e3       	ldi	r24, 0x36	; 54
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	89 83       	std	Y+1, r24	; 0x01
      d8:	15 c0       	rjmp	.+42     	; 0x104 <DIO_WritePin+0x64>
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
      da:	8b 81       	ldd	r24, Y+3	; 0x03
      dc:	88 31       	cpi	r24, 0x18	; 24
      de:	40 f4       	brcc	.+16     	; 0xf0 <DIO_WritePin+0x50>
      e0:	8b 81       	ldd	r24, Y+3	; 0x03
      e2:	80 31       	cpi	r24, 0x10	; 16
      e4:	28 f0       	brcs	.+10     	; 0xf0 <DIO_WritePin+0x50>
	{
		Local_Copy_Address=GPIOC_DIO;
      e6:	83 e3       	ldi	r24, 0x33	; 51
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	9a 83       	std	Y+2, r25	; 0x02
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	0a c0       	rjmp	.+20     	; 0x104 <DIO_WritePin+0x64>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
      f0:	8b 81       	ldd	r24, Y+3	; 0x03
      f2:	80 32       	cpi	r24, 0x20	; 32
      f4:	38 f4       	brcc	.+14     	; 0x104 <DIO_WritePin+0x64>
      f6:	8b 81       	ldd	r24, Y+3	; 0x03
      f8:	88 31       	cpi	r24, 0x18	; 24
      fa:	20 f0       	brcs	.+8      	; 0x104 <DIO_WritePin+0x64>
	{
		Local_Copy_Address=GPIOD_DIO;
      fc:	80 e3       	ldi	r24, 0x30	; 48
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	9a 83       	std	Y+2, r25	; 0x02
     102:	89 83       	std	Y+1, r24	; 0x01
	}
	
	Apply(Local_Copy_Address,PinValue,PinNum);
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	9a 81       	ldd	r25, Y+2	; 0x02
     108:	4b 81       	ldd	r20, Y+3	; 0x03
     10a:	6c 81       	ldd	r22, Y+4	; 0x04
     10c:	0e 94 90 00 	call	0x120	; 0x120 <Apply>
	
	
}
     110:	00 00       	nop
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <Apply>:
*           I/O:
*Return:
*Description:
*************************************************************/

static void Apply(GPIO* Gpio,uint8 Copy_u8Value,uint8 PinNum){
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	00 d0       	rcall	.+0      	; 0x126 <Apply+0x6>
     126:	00 d0       	rcall	.+0      	; 0x128 <Apply+0x8>
     128:	1f 92       	push	r1
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	9b 83       	std	Y+3, r25	; 0x03
     130:	8a 83       	std	Y+2, r24	; 0x02
     132:	6c 83       	std	Y+4, r22	; 0x04
     134:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_Copyu8_Actuall_Pin=0;
     136:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNum<=pin7) && (PinNum>=pin0))
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	88 30       	cpi	r24, 0x08	; 8
     13c:	18 f4       	brcc	.+6      	; 0x144 <Apply+0x24>
	{
		Local_Copyu8_Actuall_Pin=PinNum;
     13e:	8d 81       	ldd	r24, Y+5	; 0x05
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	1d c0       	rjmp	.+58     	; 0x17e <Apply+0x5e>
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
     144:	8d 81       	ldd	r24, Y+5	; 0x05
     146:	80 31       	cpi	r24, 0x10	; 16
     148:	38 f4       	brcc	.+14     	; 0x158 <Apply+0x38>
     14a:	8d 81       	ldd	r24, Y+5	; 0x05
     14c:	88 30       	cpi	r24, 0x08	; 8
     14e:	20 f0       	brcs	.+8      	; 0x158 <Apply+0x38>
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
     150:	8d 81       	ldd	r24, Y+5	; 0x05
     152:	88 50       	subi	r24, 0x08	; 8
     154:	89 83       	std	Y+1, r24	; 0x01
     156:	13 c0       	rjmp	.+38     	; 0x17e <Apply+0x5e>
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
     158:	8d 81       	ldd	r24, Y+5	; 0x05
     15a:	88 31       	cpi	r24, 0x18	; 24
     15c:	38 f4       	brcc	.+14     	; 0x16c <Apply+0x4c>
     15e:	8d 81       	ldd	r24, Y+5	; 0x05
     160:	80 31       	cpi	r24, 0x10	; 16
     162:	20 f0       	brcs	.+8      	; 0x16c <Apply+0x4c>
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
     164:	8d 81       	ldd	r24, Y+5	; 0x05
     166:	80 51       	subi	r24, 0x10	; 16
     168:	89 83       	std	Y+1, r24	; 0x01
     16a:	09 c0       	rjmp	.+18     	; 0x17e <Apply+0x5e>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
     16c:	8d 81       	ldd	r24, Y+5	; 0x05
     16e:	80 32       	cpi	r24, 0x20	; 32
     170:	30 f4       	brcc	.+12     	; 0x17e <Apply+0x5e>
     172:	8d 81       	ldd	r24, Y+5	; 0x05
     174:	88 31       	cpi	r24, 0x18	; 24
     176:	18 f0       	brcs	.+6      	; 0x17e <Apply+0x5e>
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
     178:	8d 81       	ldd	r24, Y+5	; 0x05
     17a:	88 51       	subi	r24, 0x18	; 24
     17c:	89 83       	std	Y+1, r24	; 0x01
	}
	switch (Copy_u8Value)
     17e:	8c 81       	ldd	r24, Y+4	; 0x04
     180:	88 2f       	mov	r24, r24
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	00 97       	sbiw	r24, 0x00	; 0
     186:	c9 f0       	breq	.+50     	; 0x1ba <Apply+0x9a>
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	09 f0       	breq	.+2      	; 0x18e <Apply+0x6e>
	{
		case High:Set_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
		case LOW:Clear_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
	}
	
}
     18c:	2d c0       	rjmp	.+90     	; 0x1e8 <Apply+0xc8>
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
	}
	switch (Copy_u8Value)
	{
		case High:Set_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	fc 01       	movw	r30, r24
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	48 2f       	mov	r20, r24
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	28 2f       	mov	r18, r24
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Apply+0x88>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	2a 95       	dec	r18
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Apply+0x84>
     1ac:	84 2b       	or	r24, r20
     1ae:	28 2f       	mov	r18, r24
     1b0:	8a 81       	ldd	r24, Y+2	; 0x02
     1b2:	9b 81       	ldd	r25, Y+3	; 0x03
     1b4:	fc 01       	movw	r30, r24
     1b6:	22 83       	std	Z+2, r18	; 0x02
     1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <Apply+0xc8>
		case LOW:Clear_Bit((Gpio->PORT),Local_Copyu8_Actuall_Pin); break;
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	9b 81       	ldd	r25, Y+3	; 0x03
     1be:	fc 01       	movw	r30, r24
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	48 2f       	mov	r20, r24
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	28 2f       	mov	r18, r24
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <Apply+0xb4>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	2a 95       	dec	r18
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <Apply+0xb0>
     1d8:	80 95       	com	r24
     1da:	84 23       	and	r24, r20
     1dc:	28 2f       	mov	r18, r24
     1de:	8a 81       	ldd	r24, Y+2	; 0x02
     1e0:	9b 81       	ldd	r25, Y+3	; 0x03
     1e2:	fc 01       	movw	r30, r24
     1e4:	22 83       	std	Z+2, r18	; 0x02
     1e6:	00 00       	nop
	}
	
}
     1e8:	00 00       	nop
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <DIO_ReadPin>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
uint8 DIO_ReadPin(uint8 PinNum){
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	00 d0       	rcall	.+0      	; 0x200 <DIO_ReadPin+0x6>
     200:	1f 92       	push	r1
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	8b 83       	std	Y+3, r24	; 0x03
	GPIO* Local_Copy_Address=0;
     208:	1a 82       	std	Y+2, r1	; 0x02
     20a:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNum<=pin7) && (PinNum>=pin0))
     20c:	8b 81       	ldd	r24, Y+3	; 0x03
     20e:	88 30       	cpi	r24, 0x08	; 8
     210:	28 f4       	brcc	.+10     	; 0x21c <DIO_ReadPin+0x22>
	{
		Local_Copy_Address=GPIOA_DIO;
     212:	89 e3       	ldi	r24, 0x39	; 57
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	20 c0       	rjmp	.+64     	; 0x25c <DIO_ReadPin+0x62>
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	80 31       	cpi	r24, 0x10	; 16
     220:	40 f4       	brcc	.+16     	; 0x232 <DIO_ReadPin+0x38>
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	88 30       	cpi	r24, 0x08	; 8
     226:	28 f0       	brcs	.+10     	; 0x232 <DIO_ReadPin+0x38>
	{
		Local_Copy_Address=GPIOB_DIO;
     228:	86 e3       	ldi	r24, 0x36	; 54
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	9a 83       	std	Y+2, r25	; 0x02
     22e:	89 83       	std	Y+1, r24	; 0x01
     230:	15 c0       	rjmp	.+42     	; 0x25c <DIO_ReadPin+0x62>
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	88 31       	cpi	r24, 0x18	; 24
     236:	40 f4       	brcc	.+16     	; 0x248 <DIO_ReadPin+0x4e>
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	80 31       	cpi	r24, 0x10	; 16
     23c:	28 f0       	brcs	.+10     	; 0x248 <DIO_ReadPin+0x4e>
	{
		Local_Copy_Address=GPIOC_DIO;
     23e:	83 e3       	ldi	r24, 0x33	; 51
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	9a 83       	std	Y+2, r25	; 0x02
     244:	89 83       	std	Y+1, r24	; 0x01
     246:	0a c0       	rjmp	.+20     	; 0x25c <DIO_ReadPin+0x62>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	80 32       	cpi	r24, 0x20	; 32
     24c:	38 f4       	brcc	.+14     	; 0x25c <DIO_ReadPin+0x62>
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	88 31       	cpi	r24, 0x18	; 24
     252:	20 f0       	brcs	.+8      	; 0x25c <DIO_ReadPin+0x62>
	{
		Local_Copy_Address=GPIOD_DIO;
     254:	80 e3       	ldi	r24, 0x30	; 48
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Apply_Read(Local_Copy_Address,PinNum);	
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	6b 81       	ldd	r22, Y+3	; 0x03
     262:	0e 94 39 01 	call	0x272	; 0x272 <Apply_Read>
	
	
}
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <Apply_Read>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
static uint8 Apply_Read(GPIO* Gpio,uint8 PinNum){
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	00 d0       	rcall	.+0      	; 0x278 <Apply_Read+0x6>
     278:	00 d0       	rcall	.+0      	; 0x27a <Apply_Read+0x8>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	9b 83       	std	Y+3, r25	; 0x03
     280:	8a 83       	std	Y+2, r24	; 0x02
     282:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_Copyu8_Actuall_Pin=0;
     284:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNum<=pin7) && (PinNum>=pin0))
     286:	8c 81       	ldd	r24, Y+4	; 0x04
     288:	88 30       	cpi	r24, 0x08	; 8
     28a:	18 f4       	brcc	.+6      	; 0x292 <Apply_Read+0x20>
	{
		Local_Copyu8_Actuall_Pin=PinNum;
     28c:	8c 81       	ldd	r24, Y+4	; 0x04
     28e:	89 83       	std	Y+1, r24	; 0x01
     290:	1d c0       	rjmp	.+58     	; 0x2cc <Apply_Read+0x5a>
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
     292:	8c 81       	ldd	r24, Y+4	; 0x04
     294:	80 31       	cpi	r24, 0x10	; 16
     296:	38 f4       	brcc	.+14     	; 0x2a6 <Apply_Read+0x34>
     298:	8c 81       	ldd	r24, Y+4	; 0x04
     29a:	88 30       	cpi	r24, 0x08	; 8
     29c:	20 f0       	brcs	.+8      	; 0x2a6 <Apply_Read+0x34>
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
     29e:	8c 81       	ldd	r24, Y+4	; 0x04
     2a0:	88 50       	subi	r24, 0x08	; 8
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	13 c0       	rjmp	.+38     	; 0x2cc <Apply_Read+0x5a>
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
     2a6:	8c 81       	ldd	r24, Y+4	; 0x04
     2a8:	88 31       	cpi	r24, 0x18	; 24
     2aa:	38 f4       	brcc	.+14     	; 0x2ba <Apply_Read+0x48>
     2ac:	8c 81       	ldd	r24, Y+4	; 0x04
     2ae:	80 31       	cpi	r24, 0x10	; 16
     2b0:	20 f0       	brcs	.+8      	; 0x2ba <Apply_Read+0x48>
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
     2b2:	8c 81       	ldd	r24, Y+4	; 0x04
     2b4:	80 51       	subi	r24, 0x10	; 16
     2b6:	89 83       	std	Y+1, r24	; 0x01
     2b8:	09 c0       	rjmp	.+18     	; 0x2cc <Apply_Read+0x5a>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
     2ba:	8c 81       	ldd	r24, Y+4	; 0x04
     2bc:	80 32       	cpi	r24, 0x20	; 32
     2be:	30 f4       	brcc	.+12     	; 0x2cc <Apply_Read+0x5a>
     2c0:	8c 81       	ldd	r24, Y+4	; 0x04
     2c2:	88 31       	cpi	r24, 0x18	; 24
     2c4:	18 f0       	brcs	.+6      	; 0x2cc <Apply_Read+0x5a>
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
     2c6:	8c 81       	ldd	r24, Y+4	; 0x04
     2c8:	88 51       	subi	r24, 0x18	; 24
     2ca:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Get_Bit(Gpio->PIN,Local_Copyu8_Actuall_Pin);
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	9b 81       	ldd	r25, Y+3	; 0x03
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	28 2f       	mov	r18, r24
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	48 2f       	mov	r20, r24
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <Apply_Read+0x76>
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	4a 95       	dec	r20
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <Apply_Read+0x72>
     2ec:	82 23       	and	r24, r18
     2ee:	93 23       	and	r25, r19
     2f0:	29 81       	ldd	r18, Y+1	; 0x01
     2f2:	22 2f       	mov	r18, r18
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <Apply_Read+0x8a>
     2f8:	95 95       	asr	r25
     2fa:	87 95       	ror	r24
     2fc:	2a 95       	dec	r18
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <Apply_Read+0x86>
	
	
}
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <DIO_SetPinDirection>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	00 d0       	rcall	.+0      	; 0x314 <DIO_SetPinDirection+0x6>
     314:	00 d0       	rcall	.+0      	; 0x316 <DIO_SetPinDirection+0x8>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	8b 83       	std	Y+3, r24	; 0x03
     31c:	6c 83       	std	Y+4, r22	; 0x04
	GPIO* Local_Copy_Address=0;
     31e:	1a 82       	std	Y+2, r1	; 0x02
     320:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNum<=pin7) && (PinNum>=pin0))
     322:	8b 81       	ldd	r24, Y+3	; 0x03
     324:	88 30       	cpi	r24, 0x08	; 8
     326:	28 f4       	brcc	.+10     	; 0x332 <DIO_SetPinDirection+0x24>
	{
		Local_Copy_Address=GPIOA_DIO;
     328:	89 e3       	ldi	r24, 0x39	; 57
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	9a 83       	std	Y+2, r25	; 0x02
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	20 c0       	rjmp	.+64     	; 0x372 <DIO_SetPinDirection+0x64>
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
     332:	8b 81       	ldd	r24, Y+3	; 0x03
     334:	80 31       	cpi	r24, 0x10	; 16
     336:	40 f4       	brcc	.+16     	; 0x348 <DIO_SetPinDirection+0x3a>
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	88 30       	cpi	r24, 0x08	; 8
     33c:	28 f0       	brcs	.+10     	; 0x348 <DIO_SetPinDirection+0x3a>
	{
		Local_Copy_Address=GPIOB_DIO;
     33e:	86 e3       	ldi	r24, 0x36	; 54
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	9a 83       	std	Y+2, r25	; 0x02
     344:	89 83       	std	Y+1, r24	; 0x01
     346:	15 c0       	rjmp	.+42     	; 0x372 <DIO_SetPinDirection+0x64>
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	88 31       	cpi	r24, 0x18	; 24
     34c:	40 f4       	brcc	.+16     	; 0x35e <DIO_SetPinDirection+0x50>
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	80 31       	cpi	r24, 0x10	; 16
     352:	28 f0       	brcs	.+10     	; 0x35e <DIO_SetPinDirection+0x50>
	{
		Local_Copy_Address=GPIOC_DIO;
     354:	83 e3       	ldi	r24, 0x33	; 51
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9a 83       	std	Y+2, r25	; 0x02
     35a:	89 83       	std	Y+1, r24	; 0x01
     35c:	0a c0       	rjmp	.+20     	; 0x372 <DIO_SetPinDirection+0x64>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	80 32       	cpi	r24, 0x20	; 32
     362:	38 f4       	brcc	.+14     	; 0x372 <DIO_SetPinDirection+0x64>
     364:	8b 81       	ldd	r24, Y+3	; 0x03
     366:	88 31       	cpi	r24, 0x18	; 24
     368:	20 f0       	brcs	.+8      	; 0x372 <DIO_SetPinDirection+0x64>
	{
		Local_Copy_Address=GPIOD_DIO;
     36a:	80 e3       	ldi	r24, 0x30	; 48
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	9a 83       	std	Y+2, r25	; 0x02
     370:	89 83       	std	Y+1, r24	; 0x01
	}
	
	Apply_Dir(Local_Copy_Address,PinNum,PinDirection);
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	4c 81       	ldd	r20, Y+4	; 0x04
     378:	6b 81       	ldd	r22, Y+3	; 0x03
     37a:	0e 94 c7 01 	call	0x38e	; 0x38e <Apply_Dir>
	
}
     37e:	00 00       	nop
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <Apply_Dir>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
static void Apply_Dir(GPIO* Gpio,uint8 PinNum,uint8 PinDirection){
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <Apply_Dir+0x6>
     394:	00 d0       	rcall	.+0      	; 0x396 <Apply_Dir+0x8>
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	9b 83       	std	Y+3, r25	; 0x03
     39e:	8a 83       	std	Y+2, r24	; 0x02
     3a0:	6c 83       	std	Y+4, r22	; 0x04
     3a2:	4d 83       	std	Y+5, r20	; 0x05
	
	uint8 Local_Copyu8_Actuall_Pin=0;
     3a4:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNum<=pin7) && (PinNum>=pin0))
     3a6:	8c 81       	ldd	r24, Y+4	; 0x04
     3a8:	88 30       	cpi	r24, 0x08	; 8
     3aa:	18 f4       	brcc	.+6      	; 0x3b2 <Apply_Dir+0x24>
	{
		Local_Copyu8_Actuall_Pin=PinNum;
     3ac:	8c 81       	ldd	r24, Y+4	; 0x04
     3ae:	89 83       	std	Y+1, r24	; 0x01
     3b0:	1d c0       	rjmp	.+58     	; 0x3ec <Apply_Dir+0x5e>
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
     3b2:	8c 81       	ldd	r24, Y+4	; 0x04
     3b4:	80 31       	cpi	r24, 0x10	; 16
     3b6:	38 f4       	brcc	.+14     	; 0x3c6 <Apply_Dir+0x38>
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	88 30       	cpi	r24, 0x08	; 8
     3bc:	20 f0       	brcs	.+8      	; 0x3c6 <Apply_Dir+0x38>
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
     3be:	8c 81       	ldd	r24, Y+4	; 0x04
     3c0:	88 50       	subi	r24, 0x08	; 8
     3c2:	89 83       	std	Y+1, r24	; 0x01
     3c4:	13 c0       	rjmp	.+38     	; 0x3ec <Apply_Dir+0x5e>
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
     3c6:	8c 81       	ldd	r24, Y+4	; 0x04
     3c8:	88 31       	cpi	r24, 0x18	; 24
     3ca:	38 f4       	brcc	.+14     	; 0x3da <Apply_Dir+0x4c>
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	80 31       	cpi	r24, 0x10	; 16
     3d0:	20 f0       	brcs	.+8      	; 0x3da <Apply_Dir+0x4c>
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
     3d2:	8c 81       	ldd	r24, Y+4	; 0x04
     3d4:	80 51       	subi	r24, 0x10	; 16
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	09 c0       	rjmp	.+18     	; 0x3ec <Apply_Dir+0x5e>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
     3da:	8c 81       	ldd	r24, Y+4	; 0x04
     3dc:	80 32       	cpi	r24, 0x20	; 32
     3de:	30 f4       	brcc	.+12     	; 0x3ec <Apply_Dir+0x5e>
     3e0:	8c 81       	ldd	r24, Y+4	; 0x04
     3e2:	88 31       	cpi	r24, 0x18	; 24
     3e4:	18 f0       	brcs	.+6      	; 0x3ec <Apply_Dir+0x5e>
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
     3e6:	8c 81       	ldd	r24, Y+4	; 0x04
     3e8:	88 51       	subi	r24, 0x18	; 24
     3ea:	89 83       	std	Y+1, r24	; 0x01
	}
	switch(PinDirection){
     3ec:	8d 81       	ldd	r24, Y+5	; 0x05
     3ee:	88 2f       	mov	r24, r24
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	91 05       	cpc	r25, r1
     3f6:	99 f1       	breq	.+102    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     3f8:	82 30       	cpi	r24, 0x02	; 2
     3fa:	91 05       	cpc	r25, r1
     3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	5c c0       	rjmp	.+184    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     400:	89 2b       	or	r24, r25
     402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		case OUTPUT:Set_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);break;
		
		
	}
	
     404:	6f c0       	rjmp	.+222    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
	}
	switch(PinDirection){
		case Input_PUll_UP:Clear_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);Set_Bit(Gpio->PORT,Local_Copyu8_Actuall_Pin); break;
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	9b 81       	ldd	r25, Y+3	; 0x03
     40a:	fc 01       	movw	r30, r24
     40c:	81 81       	ldd	r24, Z+1	; 0x01
     40e:	48 2f       	mov	r20, r24
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	28 2f       	mov	r18, r24
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	2a 95       	dec	r18
     422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	80 95       	com	r24
     426:	84 23       	and	r24, r20
     428:	28 2f       	mov	r18, r24
     42a:	8a 81       	ldd	r24, Y+2	; 0x02
     42c:	9b 81       	ldd	r25, Y+3	; 0x03
     42e:	fc 01       	movw	r30, r24
     430:	21 83       	std	Z+1, r18	; 0x01
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	9b 81       	ldd	r25, Y+3	; 0x03
     436:	fc 01       	movw	r30, r24
     438:	82 81       	ldd	r24, Z+2	; 0x02
     43a:	48 2f       	mov	r20, r24
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	28 2f       	mov	r18, r24
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	2a 95       	dec	r18
     44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     450:	84 2b       	or	r24, r20
     452:	28 2f       	mov	r18, r24
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	fc 01       	movw	r30, r24
     45a:	22 83       	std	Z+2, r18	; 0x02
     45c:	43 c0       	rjmp	.+134    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
		case INPUT_WITHOUT_PULL:Clear_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);Clear_Bit(Gpio->PORT,Local_Copyu8_Actuall_Pin); break;
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	9b 81       	ldd	r25, Y+3	; 0x03
     462:	fc 01       	movw	r30, r24
     464:	81 81       	ldd	r24, Z+1	; 0x01
     466:	48 2f       	mov	r20, r24
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	28 2f       	mov	r18, r24
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	2a 95       	dec	r18
     47a:	e2 f7       	brpl	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     47c:	80 95       	com	r24
     47e:	84 23       	and	r24, r20
     480:	28 2f       	mov	r18, r24
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	9b 81       	ldd	r25, Y+3	; 0x03
     486:	fc 01       	movw	r30, r24
     488:	21 83       	std	Z+1, r18	; 0x01
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	9b 81       	ldd	r25, Y+3	; 0x03
     48e:	fc 01       	movw	r30, r24
     490:	82 81       	ldd	r24, Z+2	; 0x02
     492:	48 2f       	mov	r20, r24
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	28 2f       	mov	r18, r24
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	2a 95       	dec	r18
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     4a8:	80 95       	com	r24
     4aa:	84 23       	and	r24, r20
     4ac:	28 2f       	mov	r18, r24
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	9b 81       	ldd	r25, Y+3	; 0x03
     4b2:	fc 01       	movw	r30, r24
     4b4:	22 83       	std	Z+2, r18	; 0x02
     4b6:	16 c0       	rjmp	.+44     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
		case OUTPUT:Set_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);break;
     4b8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ba:	9b 81       	ldd	r25, Y+3	; 0x03
     4bc:	fc 01       	movw	r30, r24
     4be:	81 81       	ldd	r24, Z+1	; 0x01
     4c0:	48 2f       	mov	r20, r24
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	28 2f       	mov	r18, r24
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	2a 95       	dec	r18
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4d6:	84 2b       	or	r24, r20
     4d8:	28 2f       	mov	r18, r24
     4da:	8a 81       	ldd	r24, Y+2	; 0x02
     4dc:	9b 81       	ldd	r25, Y+3	; 0x03
     4de:	fc 01       	movw	r30, r24
     4e0:	21 83       	std	Z+1, r18	; 0x01
     4e2:	00 00       	nop
		
		
	}
	
     4e4:	00 00       	nop
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <LCD_init>:
*           I/O:
*Return: 
*Description:                                                       
*************************************************************/

void LCD_init(){
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	6c 97       	sbiw	r28, 0x1c	; 28
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
	#ifdef FOUR_BIT_MODE
	/* portA output */
	DIO_SetPinDirection(LCD_RS,OUTPUT);
     50a:	62 e0       	ldi	r22, 0x02	; 2
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN,OUTPUT);
     512:	62 e0       	ldi	r22, 0x02	; 2
     514:	83 e0       	ldi	r24, 0x03	; 3
     516:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW,OUTPUT);
     51a:	62 e0       	ldi	r22, 0x02	; 2
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D4,OUTPUT);
     522:	62 e0       	ldi	r22, 0x02	; 2
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5,OUTPUT);
     52a:	62 e0       	ldi	r22, 0x02	; 2
     52c:	85 e0       	ldi	r24, 0x05	; 5
     52e:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6,OUTPUT);
     532:	62 e0       	ldi	r22, 0x02	; 2
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7,OUTPUT);
     53a:	62 e0       	ldi	r22, 0x02	; 2
     53c:	87 e0       	ldi	r24, 0x07	; 7
     53e:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_SetPinDirection>
	DIO_WritePin(LCD_EN,LOW);	
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	a0 e7       	ldi	r26, 0x70	; 112
     550:	b1 e4       	ldi	r27, 0x41	; 65
     552:	89 83       	std	Y+1, r24	; 0x01
     554:	9a 83       	std	Y+2, r25	; 0x02
     556:	ab 83       	std	Y+3, r26	; 0x03
     558:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	4a e7       	ldi	r20, 0x7A	; 122
     560:	55 e4       	ldi	r21, 0x45	; 69
     562:	69 81       	ldd	r22, Y+1	; 0x01
     564:	7a 81       	ldd	r23, Y+2	; 0x02
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     56e:	dc 01       	movw	r26, r24
     570:	cb 01       	movw	r24, r22
     572:	8b 8b       	std	Y+19, r24	; 0x13
     574:	9c 8b       	std	Y+20, r25	; 0x14
     576:	ad 8b       	std	Y+21, r26	; 0x15
     578:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e8       	ldi	r20, 0x80	; 128
     580:	5f e3       	ldi	r21, 0x3F	; 63
     582:	6b 89       	ldd	r22, Y+19	; 0x13
     584:	7c 89       	ldd	r23, Y+20	; 0x14
     586:	8d 89       	ldd	r24, Y+21	; 0x15
     588:	9e 89       	ldd	r25, Y+22	; 0x16
     58a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     58e:	88 23       	and	r24, r24
     590:	2c f4       	brge	.+10     	; 0x59c <LCD_init+0xa6>
		__ticks = 1;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	98 8f       	std	Y+24, r25	; 0x18
     598:	8f 8b       	std	Y+23, r24	; 0x17
     59a:	3f c0       	rjmp	.+126    	; 0x61a <LCD_init+0x124>
	else if (__tmp > 65535)
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	3f ef       	ldi	r19, 0xFF	; 255
     5a0:	4f e7       	ldi	r20, 0x7F	; 127
     5a2:	57 e4       	ldi	r21, 0x47	; 71
     5a4:	6b 89       	ldd	r22, Y+19	; 0x13
     5a6:	7c 89       	ldd	r23, Y+20	; 0x14
     5a8:	8d 89       	ldd	r24, Y+21	; 0x15
     5aa:	9e 89       	ldd	r25, Y+22	; 0x16
     5ac:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     5b0:	18 16       	cp	r1, r24
     5b2:	4c f5       	brge	.+82     	; 0x606 <LCD_init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e2       	ldi	r20, 0x20	; 32
     5ba:	51 e4       	ldi	r21, 0x41	; 65
     5bc:	69 81       	ldd	r22, Y+1	; 0x01
     5be:	7a 81       	ldd	r23, Y+2	; 0x02
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
     5d0:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	98 8f       	std	Y+24, r25	; 0x18
     5da:	8f 8b       	std	Y+23, r24	; 0x17
     5dc:	0f c0       	rjmp	.+30     	; 0x5fc <LCD_init+0x106>
     5de:	80 e9       	ldi	r24, 0x90	; 144
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	9a 8f       	std	Y+26, r25	; 0x1a
     5e4:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5e6:	89 8d       	ldd	r24, Y+25	; 0x19
     5e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCD_init+0xf4>
     5ee:	9a 8f       	std	Y+26, r25	; 0x1a
     5f0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5f2:	8f 89       	ldd	r24, Y+23	; 0x17
     5f4:	98 8d       	ldd	r25, Y+24	; 0x18
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	98 8f       	std	Y+24, r25	; 0x18
     5fa:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5fc:	8f 89       	ldd	r24, Y+23	; 0x17
     5fe:	98 8d       	ldd	r25, Y+24	; 0x18
     600:	89 2b       	or	r24, r25
     602:	69 f7       	brne	.-38     	; 0x5de <LCD_init+0xe8>
     604:	14 c0       	rjmp	.+40     	; 0x62e <LCD_init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     606:	6b 89       	ldd	r22, Y+19	; 0x13
     608:	7c 89       	ldd	r23, Y+20	; 0x14
     60a:	8d 89       	ldd	r24, Y+21	; 0x15
     60c:	9e 89       	ldd	r25, Y+22	; 0x16
     60e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	98 8f       	std	Y+24, r25	; 0x18
     618:	8f 8b       	std	Y+23, r24	; 0x17
     61a:	8f 89       	ldd	r24, Y+23	; 0x17
     61c:	98 8d       	ldd	r25, Y+24	; 0x18
     61e:	9c 8f       	std	Y+28, r25	; 0x1c
     620:	8b 8f       	std	Y+27, r24	; 0x1b
     622:	8b 8d       	ldd	r24, Y+27	; 0x1b
     624:	9c 8d       	ldd	r25, Y+28	; 0x1c
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <LCD_init+0x130>
     62a:	9c 8f       	std	Y+28, r25	; 0x1c
     62c:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(t_15ms);	
	
	LCD_sendCommand(LCD_INIT_PHASE_ONE);
     62e:	83 e3       	ldi	r24, 0x33	; 51
     630:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_INIT_PHASE_TWO);
     634:	82 e3       	ldi	r24, 0x32	; 50
     636:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
	/* set function to be 4 bit mode */
	LCD_sendCommand(LCD_INIT_PHASE_THREE);
     63a:	88 e2       	ldi	r24, 0x28	; 40
     63c:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
	/* shift right and i/d=0 */
	LCD_sendCommand(LCD_DISPLAY_OPTIONS);
     640:	8e e0       	ldi	r24, 0x0E	; 14
     642:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
	/* clear LCD */
	LCD_sendCommand(LCD_CLEAR);
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
	/* increment cursor */
	LCD_sendCommand(LCD_INCREMENT_CURSOR);
     64c:	86 e0       	ldi	r24, 0x06	; 6
     64e:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	a0 e8       	ldi	r26, 0x80	; 128
     658:	bf e3       	ldi	r27, 0x3F	; 63
     65a:	8d 83       	std	Y+5, r24	; 0x05
     65c:	9e 83       	std	Y+6, r25	; 0x06
     65e:	af 83       	std	Y+7, r26	; 0x07
     660:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	4a e7       	ldi	r20, 0x7A	; 122
     668:	55 e4       	ldi	r21, 0x45	; 69
     66a:	6d 81       	ldd	r22, Y+5	; 0x05
     66c:	7e 81       	ldd	r23, Y+6	; 0x06
     66e:	8f 81       	ldd	r24, Y+7	; 0x07
     670:	98 85       	ldd	r25, Y+8	; 0x08
     672:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	89 87       	std	Y+9, r24	; 0x09
     67c:	9a 87       	std	Y+10, r25	; 0x0a
     67e:	ab 87       	std	Y+11, r26	; 0x0b
     680:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e8       	ldi	r20, 0x80	; 128
     688:	5f e3       	ldi	r21, 0x3F	; 63
     68a:	69 85       	ldd	r22, Y+9	; 0x09
     68c:	7a 85       	ldd	r23, Y+10	; 0x0a
     68e:	8b 85       	ldd	r24, Y+11	; 0x0b
     690:	9c 85       	ldd	r25, Y+12	; 0x0c
     692:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     696:	88 23       	and	r24, r24
     698:	2c f4       	brge	.+10     	; 0x6a4 <LCD_init+0x1ae>
		__ticks = 1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	9e 87       	std	Y+14, r25	; 0x0e
     6a0:	8d 87       	std	Y+13, r24	; 0x0d
     6a2:	3f c0       	rjmp	.+126    	; 0x722 <LCD_init+0x22c>
	else if (__tmp > 65535)
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	3f ef       	ldi	r19, 0xFF	; 255
     6a8:	4f e7       	ldi	r20, 0x7F	; 127
     6aa:	57 e4       	ldi	r21, 0x47	; 71
     6ac:	69 85       	ldd	r22, Y+9	; 0x09
     6ae:	7a 85       	ldd	r23, Y+10	; 0x0a
     6b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     6b8:	18 16       	cp	r1, r24
     6ba:	4c f5       	brge	.+82     	; 0x70e <LCD_init+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e2       	ldi	r20, 0x20	; 32
     6c2:	51 e4       	ldi	r21, 0x41	; 65
     6c4:	6d 81       	ldd	r22, Y+5	; 0x05
     6c6:	7e 81       	ldd	r23, Y+6	; 0x06
     6c8:	8f 81       	ldd	r24, Y+7	; 0x07
     6ca:	98 85       	ldd	r25, Y+8	; 0x08
     6cc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     6d0:	dc 01       	movw	r26, r24
     6d2:	cb 01       	movw	r24, r22
     6d4:	bc 01       	movw	r22, r24
     6d6:	cd 01       	movw	r24, r26
     6d8:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	9e 87       	std	Y+14, r25	; 0x0e
     6e2:	8d 87       	std	Y+13, r24	; 0x0d
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <LCD_init+0x20e>
     6e6:	80 e9       	ldi	r24, 0x90	; 144
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	98 8b       	std	Y+16, r25	; 0x10
     6ec:	8f 87       	std	Y+15, r24	; 0x0f
     6ee:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f0:	98 89       	ldd	r25, Y+16	; 0x10
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <LCD_init+0x1fc>
     6f6:	98 8b       	std	Y+16, r25	; 0x10
     6f8:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6fa:	8d 85       	ldd	r24, Y+13	; 0x0d
     6fc:	9e 85       	ldd	r25, Y+14	; 0x0e
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	9e 87       	std	Y+14, r25	; 0x0e
     702:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     704:	8d 85       	ldd	r24, Y+13	; 0x0d
     706:	9e 85       	ldd	r25, Y+14	; 0x0e
     708:	89 2b       	or	r24, r25
     70a:	69 f7       	brne	.-38     	; 0x6e6 <LCD_init+0x1f0>
	_delay_ms(t_1ms);
	#elif EIGHT_BIT_MODE
	#endif
}
     70c:	14 c0       	rjmp	.+40     	; 0x736 <LCD_init+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     70e:	69 85       	ldd	r22, Y+9	; 0x09
     710:	7a 85       	ldd	r23, Y+10	; 0x0a
     712:	8b 85       	ldd	r24, Y+11	; 0x0b
     714:	9c 85       	ldd	r25, Y+12	; 0x0c
     716:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	9e 87       	std	Y+14, r25	; 0x0e
     720:	8d 87       	std	Y+13, r24	; 0x0d
     722:	8d 85       	ldd	r24, Y+13	; 0x0d
     724:	9e 85       	ldd	r25, Y+14	; 0x0e
     726:	9a 8b       	std	Y+18, r25	; 0x12
     728:	89 8b       	std	Y+17, r24	; 0x11
     72a:	89 89       	ldd	r24, Y+17	; 0x11
     72c:	9a 89       	ldd	r25, Y+18	; 0x12
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <LCD_init+0x238>
     732:	9a 8b       	std	Y+18, r25	; 0x12
     734:	89 8b       	std	Y+17, r24	; 0x11
     736:	00 00       	nop
     738:	6c 96       	adiw	r28, 0x1c	; 28
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <LCD_sendCommand>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
void LCD_sendCommand(uint8 command){
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	e9 97       	sbiw	r28, 0x39	; 57
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	89 af       	std	Y+57, r24	; 0x39
	#ifdef FOUR_BIT_MODE
	/* 1- Register select choose send command mode Rs=0 */
	DIO_WritePin(LCD_RS,LOW);
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	/* 2- choose write rw =0 */
	DIO_WritePin(LCD_RW,LOW);
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	/* send High nibble */
	DIO_WritePin(LCD_D4,((LCD_CMD_BIT_FOUR & command)>>LCD_SHIFT_FOUR));
     770:	89 ad       	ldd	r24, Y+57	; 0x39
     772:	80 71       	andi	r24, 0x10	; 16
     774:	82 95       	swap	r24
     776:	8f 70       	andi	r24, 0x0F	; 15
     778:	68 2f       	mov	r22, r24
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D5,((LCD_CMD_BIT_FIVE & command)>>LCD_SHIFT_FIVE));
     780:	89 ad       	ldd	r24, Y+57	; 0x39
     782:	80 72       	andi	r24, 0x20	; 32
     784:	82 95       	swap	r24
     786:	86 95       	lsr	r24
     788:	87 70       	andi	r24, 0x07	; 7
     78a:	68 2f       	mov	r22, r24
     78c:	85 e0       	ldi	r24, 0x05	; 5
     78e:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D6,((LCD_CMD_BIT_SIX & command)>>LCD_SHIFT_SIX));
     792:	89 ad       	ldd	r24, Y+57	; 0x39
     794:	80 74       	andi	r24, 0x40	; 64
     796:	82 95       	swap	r24
     798:	86 95       	lsr	r24
     79a:	86 95       	lsr	r24
     79c:	83 70       	andi	r24, 0x03	; 3
     79e:	68 2f       	mov	r22, r24
     7a0:	86 e0       	ldi	r24, 0x06	; 6
     7a2:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D7,((LCD_CMD_BIT_SEVEN & command)>>LCD_SHIFT_SEVEN));
     7a6:	89 ad       	ldd	r24, Y+57	; 0x39
     7a8:	88 1f       	adc	r24, r24
     7aa:	88 27       	eor	r24, r24
     7ac:	88 1f       	adc	r24, r24
     7ae:	68 2f       	mov	r22, r24
     7b0:	87 e0       	ldi	r24, 0x07	; 7
     7b2:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	/* Latch Enable */
	DIO_WritePin(LCD_EN,High);
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	a0 e8       	ldi	r26, 0x80	; 128
     7c4:	bf e3       	ldi	r27, 0x3F	; 63
     7c6:	89 83       	std	Y+1, r24	; 0x01
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	ab 83       	std	Y+3, r26	; 0x03
     7cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	4a e7       	ldi	r20, 0x7A	; 122
     7d4:	55 e4       	ldi	r21, 0x45	; 69
     7d6:	69 81       	ldd	r22, Y+1	; 0x01
     7d8:	7a 81       	ldd	r23, Y+2	; 0x02
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     7e2:	dc 01       	movw	r26, r24
     7e4:	cb 01       	movw	r24, r22
     7e6:	8f a7       	std	Y+47, r24	; 0x2f
     7e8:	98 ab       	std	Y+48, r25	; 0x30
     7ea:	a9 ab       	std	Y+49, r26	; 0x31
     7ec:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e8       	ldi	r20, 0x80	; 128
     7f4:	5f e3       	ldi	r21, 0x3F	; 63
     7f6:	6f a5       	ldd	r22, Y+47	; 0x2f
     7f8:	78 a9       	ldd	r23, Y+48	; 0x30
     7fa:	89 a9       	ldd	r24, Y+49	; 0x31
     7fc:	9a a9       	ldd	r25, Y+50	; 0x32
     7fe:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     802:	88 23       	and	r24, r24
     804:	2c f4       	brge	.+10     	; 0x810 <LCD_sendCommand+0xc6>
		__ticks = 1;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	9c ab       	std	Y+52, r25	; 0x34
     80c:	8b ab       	std	Y+51, r24	; 0x33
     80e:	3f c0       	rjmp	.+126    	; 0x88e <__stack+0x2f>
	else if (__tmp > 65535)
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	3f ef       	ldi	r19, 0xFF	; 255
     814:	4f e7       	ldi	r20, 0x7F	; 127
     816:	57 e4       	ldi	r21, 0x47	; 71
     818:	6f a5       	ldd	r22, Y+47	; 0x2f
     81a:	78 a9       	ldd	r23, Y+48	; 0x30
     81c:	89 a9       	ldd	r24, Y+49	; 0x31
     81e:	9a a9       	ldd	r25, Y+50	; 0x32
     820:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     824:	18 16       	cp	r1, r24
     826:	4c f5       	brge	.+82     	; 0x87a <__stack+0x1b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	40 e2       	ldi	r20, 0x20	; 32
     82e:	51 e4       	ldi	r21, 0x41	; 65
     830:	69 81       	ldd	r22, Y+1	; 0x01
     832:	7a 81       	ldd	r23, Y+2	; 0x02
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	9c 81       	ldd	r25, Y+4	; 0x04
     838:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	9c ab       	std	Y+52, r25	; 0x34
     84e:	8b ab       	std	Y+51, r24	; 0x33
     850:	0f c0       	rjmp	.+30     	; 0x870 <__stack+0x11>
     852:	80 e9       	ldi	r24, 0x90	; 144
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	9e ab       	std	Y+54, r25	; 0x36
     858:	8d ab       	std	Y+53, r24	; 0x35
     85a:	8d a9       	ldd	r24, Y+53	; 0x35
     85c:	9e a9       	ldd	r25, Y+54	; 0x36
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <LCD_sendCommand+0x114>
     862:	9e ab       	std	Y+54, r25	; 0x36
     864:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     866:	8b a9       	ldd	r24, Y+51	; 0x33
     868:	9c a9       	ldd	r25, Y+52	; 0x34
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	9c ab       	std	Y+52, r25	; 0x34
     86e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     870:	8b a9       	ldd	r24, Y+51	; 0x33
     872:	9c a9       	ldd	r25, Y+52	; 0x34
     874:	89 2b       	or	r24, r25
     876:	69 f7       	brne	.-38     	; 0x852 <LCD_sendCommand+0x108>
     878:	14 c0       	rjmp	.+40     	; 0x8a2 <__stack+0x43>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     87a:	6f a5       	ldd	r22, Y+47	; 0x2f
     87c:	78 a9       	ldd	r23, Y+48	; 0x30
     87e:	89 a9       	ldd	r24, Y+49	; 0x31
     880:	9a a9       	ldd	r25, Y+50	; 0x32
     882:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     886:	dc 01       	movw	r26, r24
     888:	cb 01       	movw	r24, r22
     88a:	9c ab       	std	Y+52, r25	; 0x34
     88c:	8b ab       	std	Y+51, r24	; 0x33
     88e:	8b a9       	ldd	r24, Y+51	; 0x33
     890:	9c a9       	ldd	r25, Y+52	; 0x34
     892:	98 af       	std	Y+56, r25	; 0x38
     894:	8f ab       	std	Y+55, r24	; 0x37
     896:	8f a9       	ldd	r24, Y+55	; 0x37
     898:	98 ad       	ldd	r25, Y+56	; 0x38
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <__stack+0x3b>
     89e:	98 af       	std	Y+56, r25	; 0x38
     8a0:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(t_1ms);
	DIO_WritePin(LCD_EN,LOW);
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	a0 e8       	ldi	r26, 0x80	; 128
     8b0:	bf e3       	ldi	r27, 0x3F	; 63
     8b2:	8d 83       	std	Y+5, r24	; 0x05
     8b4:	9e 83       	std	Y+6, r25	; 0x06
     8b6:	af 83       	std	Y+7, r26	; 0x07
     8b8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	4a e7       	ldi	r20, 0x7A	; 122
     8c0:	55 e4       	ldi	r21, 0x45	; 69
     8c2:	6d 81       	ldd	r22, Y+5	; 0x05
     8c4:	7e 81       	ldd	r23, Y+6	; 0x06
     8c6:	8f 81       	ldd	r24, Y+7	; 0x07
     8c8:	98 85       	ldd	r25, Y+8	; 0x08
     8ca:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	8d a3       	std	Y+37, r24	; 0x25
     8d4:	9e a3       	std	Y+38, r25	; 0x26
     8d6:	af a3       	std	Y+39, r26	; 0x27
     8d8:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e8       	ldi	r20, 0x80	; 128
     8e0:	5f e3       	ldi	r21, 0x3F	; 63
     8e2:	6d a1       	ldd	r22, Y+37	; 0x25
     8e4:	7e a1       	ldd	r23, Y+38	; 0x26
     8e6:	8f a1       	ldd	r24, Y+39	; 0x27
     8e8:	98 a5       	ldd	r25, Y+40	; 0x28
     8ea:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     8ee:	88 23       	and	r24, r24
     8f0:	2c f4       	brge	.+10     	; 0x8fc <__stack+0x9d>
		__ticks = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	9a a7       	std	Y+42, r25	; 0x2a
     8f8:	89 a7       	std	Y+41, r24	; 0x29
     8fa:	3f c0       	rjmp	.+126    	; 0x97a <__stack+0x11b>
	else if (__tmp > 65535)
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	3f ef       	ldi	r19, 0xFF	; 255
     900:	4f e7       	ldi	r20, 0x7F	; 127
     902:	57 e4       	ldi	r21, 0x47	; 71
     904:	6d a1       	ldd	r22, Y+37	; 0x25
     906:	7e a1       	ldd	r23, Y+38	; 0x26
     908:	8f a1       	ldd	r24, Y+39	; 0x27
     90a:	98 a5       	ldd	r25, Y+40	; 0x28
     90c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     910:	18 16       	cp	r1, r24
     912:	4c f5       	brge	.+82     	; 0x966 <__stack+0x107>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e2       	ldi	r20, 0x20	; 32
     91a:	51 e4       	ldi	r21, 0x41	; 65
     91c:	6d 81       	ldd	r22, Y+5	; 0x05
     91e:	7e 81       	ldd	r23, Y+6	; 0x06
     920:	8f 81       	ldd	r24, Y+7	; 0x07
     922:	98 85       	ldd	r25, Y+8	; 0x08
     924:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	bc 01       	movw	r22, r24
     92e:	cd 01       	movw	r24, r26
     930:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     934:	dc 01       	movw	r26, r24
     936:	cb 01       	movw	r24, r22
     938:	9a a7       	std	Y+42, r25	; 0x2a
     93a:	89 a7       	std	Y+41, r24	; 0x29
     93c:	0f c0       	rjmp	.+30     	; 0x95c <__stack+0xfd>
     93e:	80 e9       	ldi	r24, 0x90	; 144
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	9c a7       	std	Y+44, r25	; 0x2c
     944:	8b a7       	std	Y+43, r24	; 0x2b
     946:	8b a5       	ldd	r24, Y+43	; 0x2b
     948:	9c a5       	ldd	r25, Y+44	; 0x2c
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <__stack+0xeb>
     94e:	9c a7       	std	Y+44, r25	; 0x2c
     950:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     952:	89 a5       	ldd	r24, Y+41	; 0x29
     954:	9a a5       	ldd	r25, Y+42	; 0x2a
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	9a a7       	std	Y+42, r25	; 0x2a
     95a:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     95c:	89 a5       	ldd	r24, Y+41	; 0x29
     95e:	9a a5       	ldd	r25, Y+42	; 0x2a
     960:	89 2b       	or	r24, r25
     962:	69 f7       	brne	.-38     	; 0x93e <__stack+0xdf>
     964:	14 c0       	rjmp	.+40     	; 0x98e <__stack+0x12f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     966:	6d a1       	ldd	r22, Y+37	; 0x25
     968:	7e a1       	ldd	r23, Y+38	; 0x26
     96a:	8f a1       	ldd	r24, Y+39	; 0x27
     96c:	98 a5       	ldd	r25, Y+40	; 0x28
     96e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	9a a7       	std	Y+42, r25	; 0x2a
     978:	89 a7       	std	Y+41, r24	; 0x29
     97a:	89 a5       	ldd	r24, Y+41	; 0x29
     97c:	9a a5       	ldd	r25, Y+42	; 0x2a
     97e:	9e a7       	std	Y+46, r25	; 0x2e
     980:	8d a7       	std	Y+45, r24	; 0x2d
     982:	8d a5       	ldd	r24, Y+45	; 0x2d
     984:	9e a5       	ldd	r25, Y+46	; 0x2e
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <__stack+0x127>
     98a:	9e a7       	std	Y+46, r25	; 0x2e
     98c:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(t_1ms);
	/* Send Low Nibble */
   DIO_WritePin(LCD_D4,((LCD_CMD_BIT_ZERO & command)>>LCD_SHIFT_ZERO));
     98e:	89 ad       	ldd	r24, Y+57	; 0x39
     990:	81 70       	andi	r24, 0x01	; 1
     992:	68 2f       	mov	r22, r24
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
   DIO_WritePin(LCD_D5,((LCD_CMD_BIT_ONE & command)>>LCD_SHIFT_ONE));
     99a:	89 ad       	ldd	r24, Y+57	; 0x39
     99c:	82 70       	andi	r24, 0x02	; 2
     99e:	86 95       	lsr	r24
     9a0:	68 2f       	mov	r22, r24
     9a2:	85 e0       	ldi	r24, 0x05	; 5
     9a4:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
   DIO_WritePin(LCD_D6,((LCD_CMD_BIT_TWO & command)>>LCD_SHIFT_TWO));
     9a8:	89 ad       	ldd	r24, Y+57	; 0x39
     9aa:	84 70       	andi	r24, 0x04	; 4
     9ac:	86 95       	lsr	r24
     9ae:	86 95       	lsr	r24
     9b0:	68 2f       	mov	r22, r24
     9b2:	86 e0       	ldi	r24, 0x06	; 6
     9b4:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
   DIO_WritePin(LCD_D7,((LCD_CMD_BIT_THREE & command)>>LCD_SHIFT_THREE));
     9b8:	89 ad       	ldd	r24, Y+57	; 0x39
     9ba:	88 70       	andi	r24, 0x08	; 8
     9bc:	86 95       	lsr	r24
     9be:	86 95       	lsr	r24
     9c0:	86 95       	lsr	r24
     9c2:	68 2f       	mov	r22, r24
     9c4:	87 e0       	ldi	r24, 0x07	; 7
     9c6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
   	/* Latch Enable */
   	DIO_WritePin(LCD_EN,High);
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a0 e8       	ldi	r26, 0x80	; 128
     9d8:	bf e3       	ldi	r27, 0x3F	; 63
     9da:	89 87       	std	Y+9, r24	; 0x09
     9dc:	9a 87       	std	Y+10, r25	; 0x0a
     9de:	ab 87       	std	Y+11, r26	; 0x0b
     9e0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	4a e7       	ldi	r20, 0x7A	; 122
     9e8:	55 e4       	ldi	r21, 0x45	; 69
     9ea:	69 85       	ldd	r22, Y+9	; 0x09
     9ec:	7a 85       	ldd	r23, Y+10	; 0x0a
     9ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     9f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     9f2:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	8b 8f       	std	Y+27, r24	; 0x1b
     9fc:	9c 8f       	std	Y+28, r25	; 0x1c
     9fe:	ad 8f       	std	Y+29, r26	; 0x1d
     a00:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e8       	ldi	r20, 0x80	; 128
     a08:	5f e3       	ldi	r21, 0x3F	; 63
     a0a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a0c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a10:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a12:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     a16:	88 23       	and	r24, r24
     a18:	2c f4       	brge	.+10     	; 0xa24 <__stack+0x1c5>
		__ticks = 1;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	98 a3       	std	Y+32, r25	; 0x20
     a20:	8f 8f       	std	Y+31, r24	; 0x1f
     a22:	3f c0       	rjmp	.+126    	; 0xaa2 <__stack+0x243>
	else if (__tmp > 65535)
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	3f ef       	ldi	r19, 0xFF	; 255
     a28:	4f e7       	ldi	r20, 0x7F	; 127
     a2a:	57 e4       	ldi	r21, 0x47	; 71
     a2c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a2e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a30:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a32:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a34:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     a38:	18 16       	cp	r1, r24
     a3a:	4c f5       	brge	.+82     	; 0xa8e <__stack+0x22f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e2       	ldi	r20, 0x20	; 32
     a42:	51 e4       	ldi	r21, 0x41	; 65
     a44:	69 85       	ldd	r22, Y+9	; 0x09
     a46:	7a 85       	ldd	r23, Y+10	; 0x0a
     a48:	8b 85       	ldd	r24, Y+11	; 0x0b
     a4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     a4c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	bc 01       	movw	r22, r24
     a56:	cd 01       	movw	r24, r26
     a58:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	98 a3       	std	Y+32, r25	; 0x20
     a62:	8f 8f       	std	Y+31, r24	; 0x1f
     a64:	0f c0       	rjmp	.+30     	; 0xa84 <__stack+0x225>
     a66:	80 e9       	ldi	r24, 0x90	; 144
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	9a a3       	std	Y+34, r25	; 0x22
     a6c:	89 a3       	std	Y+33, r24	; 0x21
     a6e:	89 a1       	ldd	r24, Y+33	; 0x21
     a70:	9a a1       	ldd	r25, Y+34	; 0x22
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <__stack+0x213>
     a76:	9a a3       	std	Y+34, r25	; 0x22
     a78:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a7c:	98 a1       	ldd	r25, Y+32	; 0x20
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	98 a3       	std	Y+32, r25	; 0x20
     a82:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a84:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a86:	98 a1       	ldd	r25, Y+32	; 0x20
     a88:	89 2b       	or	r24, r25
     a8a:	69 f7       	brne	.-38     	; 0xa66 <__stack+0x207>
     a8c:	14 c0       	rjmp	.+40     	; 0xab6 <__stack+0x257>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a8e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a90:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a94:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a96:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	98 a3       	std	Y+32, r25	; 0x20
     aa0:	8f 8f       	std	Y+31, r24	; 0x1f
     aa2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     aa4:	98 a1       	ldd	r25, Y+32	; 0x20
     aa6:	9c a3       	std	Y+36, r25	; 0x24
     aa8:	8b a3       	std	Y+35, r24	; 0x23
     aaa:	8b a1       	ldd	r24, Y+35	; 0x23
     aac:	9c a1       	ldd	r25, Y+36	; 0x24
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <__stack+0x24f>
     ab2:	9c a3       	std	Y+36, r25	; 0x24
     ab4:	8b a3       	std	Y+35, r24	; 0x23
   	_delay_ms(t_1ms);
   	DIO_WritePin(LCD_EN,LOW);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	83 e0       	ldi	r24, 0x03	; 3
     aba:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e8       	ldi	r26, 0x80	; 128
     ac4:	bf e3       	ldi	r27, 0x3F	; 63
     ac6:	8d 87       	std	Y+13, r24	; 0x0d
     ac8:	9e 87       	std	Y+14, r25	; 0x0e
     aca:	af 87       	std	Y+15, r26	; 0x0f
     acc:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	4a e7       	ldi	r20, 0x7A	; 122
     ad4:	55 e4       	ldi	r21, 0x45	; 69
     ad6:	6d 85       	ldd	r22, Y+13	; 0x0d
     ad8:	7e 85       	ldd	r23, Y+14	; 0x0e
     ada:	8f 85       	ldd	r24, Y+15	; 0x0f
     adc:	98 89       	ldd	r25, Y+16	; 0x10
     ade:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     ae2:	dc 01       	movw	r26, r24
     ae4:	cb 01       	movw	r24, r22
     ae6:	89 8b       	std	Y+17, r24	; 0x11
     ae8:	9a 8b       	std	Y+18, r25	; 0x12
     aea:	ab 8b       	std	Y+19, r26	; 0x13
     aec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e8       	ldi	r20, 0x80	; 128
     af4:	5f e3       	ldi	r21, 0x3F	; 63
     af6:	69 89       	ldd	r22, Y+17	; 0x11
     af8:	7a 89       	ldd	r23, Y+18	; 0x12
     afa:	8b 89       	ldd	r24, Y+19	; 0x13
     afc:	9c 89       	ldd	r25, Y+20	; 0x14
     afe:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     b02:	88 23       	and	r24, r24
     b04:	2c f4       	brge	.+10     	; 0xb10 <__stack+0x2b1>
		__ticks = 1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	9e 8b       	std	Y+22, r25	; 0x16
     b0c:	8d 8b       	std	Y+21, r24	; 0x15
     b0e:	3f c0       	rjmp	.+126    	; 0xb8e <__stack+0x32f>
	else if (__tmp > 65535)
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	3f ef       	ldi	r19, 0xFF	; 255
     b14:	4f e7       	ldi	r20, 0x7F	; 127
     b16:	57 e4       	ldi	r21, 0x47	; 71
     b18:	69 89       	ldd	r22, Y+17	; 0x11
     b1a:	7a 89       	ldd	r23, Y+18	; 0x12
     b1c:	8b 89       	ldd	r24, Y+19	; 0x13
     b1e:	9c 89       	ldd	r25, Y+20	; 0x14
     b20:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     b24:	18 16       	cp	r1, r24
     b26:	4c f5       	brge	.+82     	; 0xb7a <__stack+0x31b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	40 e2       	ldi	r20, 0x20	; 32
     b2e:	51 e4       	ldi	r21, 0x41	; 65
     b30:	6d 85       	ldd	r22, Y+13	; 0x0d
     b32:	7e 85       	ldd	r23, Y+14	; 0x0e
     b34:	8f 85       	ldd	r24, Y+15	; 0x0f
     b36:	98 89       	ldd	r25, Y+16	; 0x10
     b38:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     b3c:	dc 01       	movw	r26, r24
     b3e:	cb 01       	movw	r24, r22
     b40:	bc 01       	movw	r22, r24
     b42:	cd 01       	movw	r24, r26
     b44:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	9e 8b       	std	Y+22, r25	; 0x16
     b4e:	8d 8b       	std	Y+21, r24	; 0x15
     b50:	0f c0       	rjmp	.+30     	; 0xb70 <__stack+0x311>
     b52:	80 e9       	ldi	r24, 0x90	; 144
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	98 8f       	std	Y+24, r25	; 0x18
     b58:	8f 8b       	std	Y+23, r24	; 0x17
     b5a:	8f 89       	ldd	r24, Y+23	; 0x17
     b5c:	98 8d       	ldd	r25, Y+24	; 0x18
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	f1 f7       	brne	.-4      	; 0xb5e <__stack+0x2ff>
     b62:	98 8f       	std	Y+24, r25	; 0x18
     b64:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b66:	8d 89       	ldd	r24, Y+21	; 0x15
     b68:	9e 89       	ldd	r25, Y+22	; 0x16
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	9e 8b       	std	Y+22, r25	; 0x16
     b6e:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b70:	8d 89       	ldd	r24, Y+21	; 0x15
     b72:	9e 89       	ldd	r25, Y+22	; 0x16
     b74:	89 2b       	or	r24, r25
     b76:	69 f7       	brne	.-38     	; 0xb52 <__stack+0x2f3>
   	_delay_ms(t_1ms);
	#elif EIGHT_BIT_MODE
	#endif
}
     b78:	14 c0       	rjmp	.+40     	; 0xba2 <__stack+0x343>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7a:	69 89       	ldd	r22, Y+17	; 0x11
     b7c:	7a 89       	ldd	r23, Y+18	; 0x12
     b7e:	8b 89       	ldd	r24, Y+19	; 0x13
     b80:	9c 89       	ldd	r25, Y+20	; 0x14
     b82:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	9e 8b       	std	Y+22, r25	; 0x16
     b8c:	8d 8b       	std	Y+21, r24	; 0x15
     b8e:	8d 89       	ldd	r24, Y+21	; 0x15
     b90:	9e 89       	ldd	r25, Y+22	; 0x16
     b92:	9a 8f       	std	Y+26, r25	; 0x1a
     b94:	89 8f       	std	Y+25, r24	; 0x19
     b96:	89 8d       	ldd	r24, Y+25	; 0x19
     b98:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <__stack+0x33b>
     b9e:	9a 8f       	std	Y+26, r25	; 0x1a
     ba0:	89 8f       	std	Y+25, r24	; 0x19
     ba2:	00 00       	nop
     ba4:	e9 96       	adiw	r28, 0x39	; 57
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <LCD_displayChar>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
void LCD_displayChar(uint8 Char){
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	e9 97       	sbiw	r28, 0x39	; 57
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	89 af       	std	Y+57, r24	; 0x39
	#ifdef FOUR_BIT_MODE
	/* 1- Register select choose send Data mode Rs=1 */
	DIO_WritePin(LCD_RS,High);
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	/* 2- choose write rw =0 */
	DIO_WritePin(LCD_RW,LOW);
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	/* send High nibble */
	DIO_WritePin(LCD_D4,((LCD_DATA_BIT_FOUR & Char)>>LCD_SHIFT_FOUR));
     bdc:	89 ad       	ldd	r24, Y+57	; 0x39
     bde:	80 71       	andi	r24, 0x10	; 16
     be0:	82 95       	swap	r24
     be2:	8f 70       	andi	r24, 0x0F	; 15
     be4:	68 2f       	mov	r22, r24
     be6:	84 e0       	ldi	r24, 0x04	; 4
     be8:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D5,((LCD_DATA_BIT_FIVE & Char)>>LCD_SHIFT_FIVE));
     bec:	89 ad       	ldd	r24, Y+57	; 0x39
     bee:	80 72       	andi	r24, 0x20	; 32
     bf0:	82 95       	swap	r24
     bf2:	86 95       	lsr	r24
     bf4:	87 70       	andi	r24, 0x07	; 7
     bf6:	68 2f       	mov	r22, r24
     bf8:	85 e0       	ldi	r24, 0x05	; 5
     bfa:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D6,((LCD_DATA_BIT_SIX  & Char)>>LCD_SHIFT_SIX));
     bfe:	89 ad       	ldd	r24, Y+57	; 0x39
     c00:	80 74       	andi	r24, 0x40	; 64
     c02:	82 95       	swap	r24
     c04:	86 95       	lsr	r24
     c06:	86 95       	lsr	r24
     c08:	83 70       	andi	r24, 0x03	; 3
     c0a:	68 2f       	mov	r22, r24
     c0c:	86 e0       	ldi	r24, 0x06	; 6
     c0e:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D7,((LCD_DATA_BIT_SEVEN & Char)>>LCD_SHIFT_SEVEN));
     c12:	89 ad       	ldd	r24, Y+57	; 0x39
     c14:	88 1f       	adc	r24, r24
     c16:	88 27       	eor	r24, r24
     c18:	88 1f       	adc	r24, r24
     c1a:	68 2f       	mov	r22, r24
     c1c:	87 e0       	ldi	r24, 0x07	; 7
     c1e:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	/* Latch Enable */
	DIO_WritePin(LCD_EN,High);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 e8       	ldi	r26, 0x80	; 128
     c30:	bf e3       	ldi	r27, 0x3F	; 63
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	ab 83       	std	Y+3, r26	; 0x03
     c38:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	4a e7       	ldi	r20, 0x7A	; 122
     c40:	55 e4       	ldi	r21, 0x45	; 69
     c42:	69 81       	ldd	r22, Y+1	; 0x01
     c44:	7a 81       	ldd	r23, Y+2	; 0x02
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	8f a7       	std	Y+47, r24	; 0x2f
     c54:	98 ab       	std	Y+48, r25	; 0x30
     c56:	a9 ab       	std	Y+49, r26	; 0x31
     c58:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e8       	ldi	r20, 0x80	; 128
     c60:	5f e3       	ldi	r21, 0x3F	; 63
     c62:	6f a5       	ldd	r22, Y+47	; 0x2f
     c64:	78 a9       	ldd	r23, Y+48	; 0x30
     c66:	89 a9       	ldd	r24, Y+49	; 0x31
     c68:	9a a9       	ldd	r25, Y+50	; 0x32
     c6a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     c6e:	88 23       	and	r24, r24
     c70:	2c f4       	brge	.+10     	; 0xc7c <LCD_displayChar+0xc6>
		__ticks = 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9c ab       	std	Y+52, r25	; 0x34
     c78:	8b ab       	std	Y+51, r24	; 0x33
     c7a:	3f c0       	rjmp	.+126    	; 0xcfa <LCD_displayChar+0x144>
	else if (__tmp > 65535)
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	3f ef       	ldi	r19, 0xFF	; 255
     c80:	4f e7       	ldi	r20, 0x7F	; 127
     c82:	57 e4       	ldi	r21, 0x47	; 71
     c84:	6f a5       	ldd	r22, Y+47	; 0x2f
     c86:	78 a9       	ldd	r23, Y+48	; 0x30
     c88:	89 a9       	ldd	r24, Y+49	; 0x31
     c8a:	9a a9       	ldd	r25, Y+50	; 0x32
     c8c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     c90:	18 16       	cp	r1, r24
     c92:	4c f5       	brge	.+82     	; 0xce6 <LCD_displayChar+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e2       	ldi	r20, 0x20	; 32
     c9a:	51 e4       	ldi	r21, 0x41	; 65
     c9c:	69 81       	ldd	r22, Y+1	; 0x01
     c9e:	7a 81       	ldd	r23, Y+2	; 0x02
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	9c ab       	std	Y+52, r25	; 0x34
     cba:	8b ab       	std	Y+51, r24	; 0x33
     cbc:	0f c0       	rjmp	.+30     	; 0xcdc <LCD_displayChar+0x126>
     cbe:	80 e9       	ldi	r24, 0x90	; 144
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	9e ab       	std	Y+54, r25	; 0x36
     cc4:	8d ab       	std	Y+53, r24	; 0x35
     cc6:	8d a9       	ldd	r24, Y+53	; 0x35
     cc8:	9e a9       	ldd	r25, Y+54	; 0x36
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <LCD_displayChar+0x114>
     cce:	9e ab       	std	Y+54, r25	; 0x36
     cd0:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd2:	8b a9       	ldd	r24, Y+51	; 0x33
     cd4:	9c a9       	ldd	r25, Y+52	; 0x34
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	9c ab       	std	Y+52, r25	; 0x34
     cda:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cdc:	8b a9       	ldd	r24, Y+51	; 0x33
     cde:	9c a9       	ldd	r25, Y+52	; 0x34
     ce0:	89 2b       	or	r24, r25
     ce2:	69 f7       	brne	.-38     	; 0xcbe <LCD_displayChar+0x108>
     ce4:	14 c0       	rjmp	.+40     	; 0xd0e <LCD_displayChar+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce6:	6f a5       	ldd	r22, Y+47	; 0x2f
     ce8:	78 a9       	ldd	r23, Y+48	; 0x30
     cea:	89 a9       	ldd	r24, Y+49	; 0x31
     cec:	9a a9       	ldd	r25, Y+50	; 0x32
     cee:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	9c ab       	std	Y+52, r25	; 0x34
     cf8:	8b ab       	std	Y+51, r24	; 0x33
     cfa:	8b a9       	ldd	r24, Y+51	; 0x33
     cfc:	9c a9       	ldd	r25, Y+52	; 0x34
     cfe:	98 af       	std	Y+56, r25	; 0x38
     d00:	8f ab       	std	Y+55, r24	; 0x37
     d02:	8f a9       	ldd	r24, Y+55	; 0x37
     d04:	98 ad       	ldd	r25, Y+56	; 0x38
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <LCD_displayChar+0x150>
     d0a:	98 af       	std	Y+56, r25	; 0x38
     d0c:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(t_1ms);
	DIO_WritePin(LCD_EN,LOW);
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e8       	ldi	r26, 0x80	; 128
     d1c:	bf e3       	ldi	r27, 0x3F	; 63
     d1e:	8d 83       	std	Y+5, r24	; 0x05
     d20:	9e 83       	std	Y+6, r25	; 0x06
     d22:	af 83       	std	Y+7, r26	; 0x07
     d24:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4a e7       	ldi	r20, 0x7A	; 122
     d2c:	55 e4       	ldi	r21, 0x45	; 69
     d2e:	6d 81       	ldd	r22, Y+5	; 0x05
     d30:	7e 81       	ldd	r23, Y+6	; 0x06
     d32:	8f 81       	ldd	r24, Y+7	; 0x07
     d34:	98 85       	ldd	r25, Y+8	; 0x08
     d36:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	8d a3       	std	Y+37, r24	; 0x25
     d40:	9e a3       	std	Y+38, r25	; 0x26
     d42:	af a3       	std	Y+39, r26	; 0x27
     d44:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	6d a1       	ldd	r22, Y+37	; 0x25
     d50:	7e a1       	ldd	r23, Y+38	; 0x26
     d52:	8f a1       	ldd	r24, Y+39	; 0x27
     d54:	98 a5       	ldd	r25, Y+40	; 0x28
     d56:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     d5a:	88 23       	and	r24, r24
     d5c:	2c f4       	brge	.+10     	; 0xd68 <LCD_displayChar+0x1b2>
		__ticks = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9a a7       	std	Y+42, r25	; 0x2a
     d64:	89 a7       	std	Y+41, r24	; 0x29
     d66:	3f c0       	rjmp	.+126    	; 0xde6 <LCD_displayChar+0x230>
	else if (__tmp > 65535)
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	3f ef       	ldi	r19, 0xFF	; 255
     d6c:	4f e7       	ldi	r20, 0x7F	; 127
     d6e:	57 e4       	ldi	r21, 0x47	; 71
     d70:	6d a1       	ldd	r22, Y+37	; 0x25
     d72:	7e a1       	ldd	r23, Y+38	; 0x26
     d74:	8f a1       	ldd	r24, Y+39	; 0x27
     d76:	98 a5       	ldd	r25, Y+40	; 0x28
     d78:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     d7c:	18 16       	cp	r1, r24
     d7e:	4c f5       	brge	.+82     	; 0xdd2 <LCD_displayChar+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e2       	ldi	r20, 0x20	; 32
     d86:	51 e4       	ldi	r21, 0x41	; 65
     d88:	6d 81       	ldd	r22, Y+5	; 0x05
     d8a:	7e 81       	ldd	r23, Y+6	; 0x06
     d8c:	8f 81       	ldd	r24, Y+7	; 0x07
     d8e:	98 85       	ldd	r25, Y+8	; 0x08
     d90:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	9a a7       	std	Y+42, r25	; 0x2a
     da6:	89 a7       	std	Y+41, r24	; 0x29
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <LCD_displayChar+0x212>
     daa:	80 e9       	ldi	r24, 0x90	; 144
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	9c a7       	std	Y+44, r25	; 0x2c
     db0:	8b a7       	std	Y+43, r24	; 0x2b
     db2:	8b a5       	ldd	r24, Y+43	; 0x2b
     db4:	9c a5       	ldd	r25, Y+44	; 0x2c
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <LCD_displayChar+0x200>
     dba:	9c a7       	std	Y+44, r25	; 0x2c
     dbc:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	89 a5       	ldd	r24, Y+41	; 0x29
     dc0:	9a a5       	ldd	r25, Y+42	; 0x2a
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	9a a7       	std	Y+42, r25	; 0x2a
     dc6:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc8:	89 a5       	ldd	r24, Y+41	; 0x29
     dca:	9a a5       	ldd	r25, Y+42	; 0x2a
     dcc:	89 2b       	or	r24, r25
     dce:	69 f7       	brne	.-38     	; 0xdaa <LCD_displayChar+0x1f4>
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <LCD_displayChar+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd2:	6d a1       	ldd	r22, Y+37	; 0x25
     dd4:	7e a1       	ldd	r23, Y+38	; 0x26
     dd6:	8f a1       	ldd	r24, Y+39	; 0x27
     dd8:	98 a5       	ldd	r25, Y+40	; 0x28
     dda:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	9a a7       	std	Y+42, r25	; 0x2a
     de4:	89 a7       	std	Y+41, r24	; 0x29
     de6:	89 a5       	ldd	r24, Y+41	; 0x29
     de8:	9a a5       	ldd	r25, Y+42	; 0x2a
     dea:	9e a7       	std	Y+46, r25	; 0x2e
     dec:	8d a7       	std	Y+45, r24	; 0x2d
     dee:	8d a5       	ldd	r24, Y+45	; 0x2d
     df0:	9e a5       	ldd	r25, Y+46	; 0x2e
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <LCD_displayChar+0x23c>
     df6:	9e a7       	std	Y+46, r25	; 0x2e
     df8:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(t_1ms);
	/* Send Low Nibble */
	DIO_WritePin(LCD_D4,((LCD_DATA_BIT_ZERO & Char)>>LCD_SHIFT_ZERO));
     dfa:	89 ad       	ldd	r24, Y+57	; 0x39
     dfc:	81 70       	andi	r24, 0x01	; 1
     dfe:	68 2f       	mov	r22, r24
     e00:	84 e0       	ldi	r24, 0x04	; 4
     e02:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D5,((LCD_DATA_BIT_ONE  &  Char)>>LCD_SHIFT_ONE));
     e06:	89 ad       	ldd	r24, Y+57	; 0x39
     e08:	82 70       	andi	r24, 0x02	; 2
     e0a:	86 95       	lsr	r24
     e0c:	68 2f       	mov	r22, r24
     e0e:	85 e0       	ldi	r24, 0x05	; 5
     e10:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D6,((LCD_DATA_BIT_TWO  &  Char)>>LCD_SHIFT_TWO));
     e14:	89 ad       	ldd	r24, Y+57	; 0x39
     e16:	84 70       	andi	r24, 0x04	; 4
     e18:	86 95       	lsr	r24
     e1a:	86 95       	lsr	r24
     e1c:	68 2f       	mov	r22, r24
     e1e:	86 e0       	ldi	r24, 0x06	; 6
     e20:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	DIO_WritePin(LCD_D7,((LCD_DATA_BIT_THREE & Char)>>LCD_SHIFT_THREE));
     e24:	89 ad       	ldd	r24, Y+57	; 0x39
     e26:	88 70       	andi	r24, 0x08	; 8
     e28:	86 95       	lsr	r24
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	68 2f       	mov	r22, r24
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
	/* Latch Enable */
	DIO_WritePin(LCD_EN,High);
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	83 e0       	ldi	r24, 0x03	; 3
     e3a:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a0 e8       	ldi	r26, 0x80	; 128
     e44:	bf e3       	ldi	r27, 0x3F	; 63
     e46:	89 87       	std	Y+9, r24	; 0x09
     e48:	9a 87       	std	Y+10, r25	; 0x0a
     e4a:	ab 87       	std	Y+11, r26	; 0x0b
     e4c:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a e7       	ldi	r20, 0x7A	; 122
     e54:	55 e4       	ldi	r21, 0x45	; 69
     e56:	69 85       	ldd	r22, Y+9	; 0x09
     e58:	7a 85       	ldd	r23, Y+10	; 0x0a
     e5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e5e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	8b 8f       	std	Y+27, r24	; 0x1b
     e68:	9c 8f       	std	Y+28, r25	; 0x1c
     e6a:	ad 8f       	std	Y+29, r26	; 0x1d
     e6c:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e78:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e7e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     e82:	88 23       	and	r24, r24
     e84:	2c f4       	brge	.+10     	; 0xe90 <LCD_displayChar+0x2da>
		__ticks = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	98 a3       	std	Y+32, r25	; 0x20
     e8c:	8f 8f       	std	Y+31, r24	; 0x1f
     e8e:	3f c0       	rjmp	.+126    	; 0xf0e <LCD_displayChar+0x358>
	else if (__tmp > 65535)
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e9a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ea0:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     ea4:	18 16       	cp	r1, r24
     ea6:	4c f5       	brge	.+82     	; 0xefa <LCD_displayChar+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	69 85       	ldd	r22, Y+9	; 0x09
     eb2:	7a 85       	ldd	r23, Y+10	; 0x0a
     eb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     eb8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	98 a3       	std	Y+32, r25	; 0x20
     ece:	8f 8f       	std	Y+31, r24	; 0x1f
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <LCD_displayChar+0x33a>
     ed2:	80 e9       	ldi	r24, 0x90	; 144
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	9a a3       	std	Y+34, r25	; 0x22
     ed8:	89 a3       	std	Y+33, r24	; 0x21
     eda:	89 a1       	ldd	r24, Y+33	; 0x21
     edc:	9a a1       	ldd	r25, Y+34	; 0x22
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <LCD_displayChar+0x328>
     ee2:	9a a3       	std	Y+34, r25	; 0x22
     ee4:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ee8:	98 a1       	ldd	r25, Y+32	; 0x20
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	98 a3       	std	Y+32, r25	; 0x20
     eee:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ef2:	98 a1       	ldd	r25, Y+32	; 0x20
     ef4:	89 2b       	or	r24, r25
     ef6:	69 f7       	brne	.-38     	; 0xed2 <LCD_displayChar+0x31c>
     ef8:	14 c0       	rjmp	.+40     	; 0xf22 <LCD_displayChar+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efa:	6b 8d       	ldd	r22, Y+27	; 0x1b
     efc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     efe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f00:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f02:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	98 a3       	std	Y+32, r25	; 0x20
     f0c:	8f 8f       	std	Y+31, r24	; 0x1f
     f0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f10:	98 a1       	ldd	r25, Y+32	; 0x20
     f12:	9c a3       	std	Y+36, r25	; 0x24
     f14:	8b a3       	std	Y+35, r24	; 0x23
     f16:	8b a1       	ldd	r24, Y+35	; 0x23
     f18:	9c a1       	ldd	r25, Y+36	; 0x24
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <LCD_displayChar+0x364>
     f1e:	9c a3       	std	Y+36, r25	; 0x24
     f20:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(t_1ms);
	DIO_WritePin(LCD_EN,LOW);
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_WritePin>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a0 e8       	ldi	r26, 0x80	; 128
     f30:	bf e3       	ldi	r27, 0x3F	; 63
     f32:	8d 87       	std	Y+13, r24	; 0x0d
     f34:	9e 87       	std	Y+14, r25	; 0x0e
     f36:	af 87       	std	Y+15, r26	; 0x0f
     f38:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	4a e7       	ldi	r20, 0x7A	; 122
     f40:	55 e4       	ldi	r21, 0x45	; 69
     f42:	6d 85       	ldd	r22, Y+13	; 0x0d
     f44:	7e 85       	ldd	r23, Y+14	; 0x0e
     f46:	8f 85       	ldd	r24, Y+15	; 0x0f
     f48:	98 89       	ldd	r25, Y+16	; 0x10
     f4a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	89 8b       	std	Y+17, r24	; 0x11
     f54:	9a 8b       	std	Y+18, r25	; 0x12
     f56:	ab 8b       	std	Y+19, r26	; 0x13
     f58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e8       	ldi	r20, 0x80	; 128
     f60:	5f e3       	ldi	r21, 0x3F	; 63
     f62:	69 89       	ldd	r22, Y+17	; 0x11
     f64:	7a 89       	ldd	r23, Y+18	; 0x12
     f66:	8b 89       	ldd	r24, Y+19	; 0x13
     f68:	9c 89       	ldd	r25, Y+20	; 0x14
     f6a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
     f6e:	88 23       	and	r24, r24
     f70:	2c f4       	brge	.+10     	; 0xf7c <LCD_displayChar+0x3c6>
		__ticks = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9e 8b       	std	Y+22, r25	; 0x16
     f78:	8d 8b       	std	Y+21, r24	; 0x15
     f7a:	3f c0       	rjmp	.+126    	; 0xffa <LCD_displayChar+0x444>
	else if (__tmp > 65535)
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	3f ef       	ldi	r19, 0xFF	; 255
     f80:	4f e7       	ldi	r20, 0x7F	; 127
     f82:	57 e4       	ldi	r21, 0x47	; 71
     f84:	69 89       	ldd	r22, Y+17	; 0x11
     f86:	7a 89       	ldd	r23, Y+18	; 0x12
     f88:	8b 89       	ldd	r24, Y+19	; 0x13
     f8a:	9c 89       	ldd	r25, Y+20	; 0x14
     f8c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     f90:	18 16       	cp	r1, r24
     f92:	4c f5       	brge	.+82     	; 0xfe6 <LCD_displayChar+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e2       	ldi	r20, 0x20	; 32
     f9a:	51 e4       	ldi	r21, 0x41	; 65
     f9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     f9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa2:	98 89       	ldd	r25, Y+16	; 0x10
     fa4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9e 8b       	std	Y+22, r25	; 0x16
     fba:	8d 8b       	std	Y+21, r24	; 0x15
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <LCD_displayChar+0x426>
     fbe:	80 e9       	ldi	r24, 0x90	; 144
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	98 8f       	std	Y+24, r25	; 0x18
     fc4:	8f 8b       	std	Y+23, r24	; 0x17
     fc6:	8f 89       	ldd	r24, Y+23	; 0x17
     fc8:	98 8d       	ldd	r25, Y+24	; 0x18
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <LCD_displayChar+0x414>
     fce:	98 8f       	std	Y+24, r25	; 0x18
     fd0:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	8d 89       	ldd	r24, Y+21	; 0x15
     fd4:	9e 89       	ldd	r25, Y+22	; 0x16
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	9e 8b       	std	Y+22, r25	; 0x16
     fda:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	8d 89       	ldd	r24, Y+21	; 0x15
     fde:	9e 89       	ldd	r25, Y+22	; 0x16
     fe0:	89 2b       	or	r24, r25
     fe2:	69 f7       	brne	.-38     	; 0xfbe <LCD_displayChar+0x408>
	_delay_ms(t_1ms);
	#elif EIGHT_BIT_MODE
	#endif
}
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <LCD_displayChar+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe6:	69 89       	ldd	r22, Y+17	; 0x11
     fe8:	7a 89       	ldd	r23, Y+18	; 0x12
     fea:	8b 89       	ldd	r24, Y+19	; 0x13
     fec:	9c 89       	ldd	r25, Y+20	; 0x14
     fee:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9e 8b       	std	Y+22, r25	; 0x16
     ff8:	8d 8b       	std	Y+21, r24	; 0x15
     ffa:	8d 89       	ldd	r24, Y+21	; 0x15
     ffc:	9e 89       	ldd	r25, Y+22	; 0x16
     ffe:	9a 8f       	std	Y+26, r25	; 0x1a
    1000:	89 8f       	std	Y+25, r24	; 0x19
    1002:	89 8d       	ldd	r24, Y+25	; 0x19
    1004:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <LCD_displayChar+0x450>
    100a:	9a 8f       	std	Y+26, r25	; 0x1a
    100c:	89 8f       	std	Y+25, r24	; 0x19
    100e:	00 00       	nop
    1010:	e9 96       	adiw	r28, 0x39	; 57
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <LCD_displayString>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
void LCD_displayString(uint8* data){
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	00 d0       	rcall	.+0      	; 0x1028 <LCD_displayString+0x6>
    1028:	00 d0       	rcall	.+0      	; 0x102a <LCD_displayString+0x8>
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
		uint32 i=0;
    1032:	1a 82       	std	Y+2, r1	; 0x02
    1034:	19 82       	std	Y+1, r1	; 0x01
		/* Loop till the Finding the Null Pointer */
		while (data[i] != '\0')
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <LCD_displayString+0x34>
		{
			LCD_displayChar(data[i]);
    1038:	2b 81       	ldd	r18, Y+3	; 0x03
    103a:	3c 81       	ldd	r19, Y+4	; 0x04
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	fc 01       	movw	r30, r24
    1046:	80 81       	ld	r24, Z
    1048:	0e 94 db 05 	call	0xbb6	; 0xbb6 <LCD_displayChar>
			i++;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
*Description:
*************************************************************/
void LCD_displayString(uint8* data){
		uint32 i=0;
		/* Loop till the Finding the Null Pointer */
		while (data[i] != '\0')
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	82 0f       	add	r24, r18
    1060:	93 1f       	adc	r25, r19
    1062:	fc 01       	movw	r30, r24
    1064:	80 81       	ld	r24, Z
    1066:	88 23       	and	r24, r24
    1068:	39 f7       	brne	.-50     	; 0x1038 <LCD_displayString+0x16>
		{
			LCD_displayChar(data[i]);
			i++;
		}
}
    106a:	00 00       	nop
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <LCD_gotoRowColumn>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
void LCD_gotoRowColumn(uint8 row,uint8 col){
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	00 d0       	rcall	.+0      	; 0x1080 <LCD_gotoRowColumn+0x6>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	6a 83       	std	Y+2, r22	; 0x02
	/* Choose Between the two rows then add the coulomn to define the index in the lcd 2*16 */
	switch(row){
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	91 05       	cpc	r25, r1
    1092:	19 f0       	breq	.+6      	; 0x109a <LCD_gotoRowColumn+0x20>
    1094:	02 97       	sbiw	r24, 0x02	; 2
    1096:	31 f0       	breq	.+12     	; 0x10a4 <LCD_gotoRowColumn+0x2a>
		case ROW_ONE:LCD_sendCommand(LCD_START_LINE_ONE+col); break;
		case ROW_TWO:LCD_sendCommand(LCD_START_LINE_TWO+col); break;
	
	}
}
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <LCD_gotoRowColumn+0x34>
*Description:
*************************************************************/
void LCD_gotoRowColumn(uint8 row,uint8 col){
	/* Choose Between the two rows then add the coulomn to define the index in the lcd 2*16 */
	switch(row){
		case ROW_ONE:LCD_sendCommand(LCD_START_LINE_ONE+col); break;
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 58       	subi	r24, 0x80	; 128
    109e:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <LCD_gotoRowColumn+0x34>
		case ROW_TWO:LCD_sendCommand(LCD_START_LINE_TWO+col); break;
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 54       	subi	r24, 0x40	; 64
    10a8:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
    10ac:	00 00       	nop
	
	}
}
    10ae:	00 00       	nop
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <LCD_clear>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
void LCD_clear(){
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
	/* Send Command To Clear The LCD */
	LCD_sendCommand(LCD_CLEAR);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
	
}
    10c8:	00 00       	nop
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <LCD_displayStringRowColumn>:
*			O/P:
*           I/O:
*Return:
*Description:
*************************************************************/
void LCD_displayStringRowColumn(uint8 row,uint8 col,uint8* data){
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <LCD_displayStringRowColumn+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <LCD_displayStringRowColumn+0x8>
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	6a 83       	std	Y+2, r22	; 0x02
    10e0:	5c 83       	std	Y+4, r21	; 0x04
    10e2:	4b 83       	std	Y+3, r20	; 0x03
	/* Call The two functions write string and goto  */
	LCD_gotoRowColumn(row,col);
    10e4:	6a 81       	ldd	r22, Y+2	; 0x02
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
	LCD_displayString(data);
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	0e 94 11 08 	call	0x1022	; 0x1022 <LCD_displayString>
    10f4:	00 00       	nop
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <main>:
/*Static APIS used in the app layer*/
static void Disp_Cgram(uint8* arr,uint8 loc);
static uint8 Button_Is_Pressed();

int main(void)
{
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	c6 59       	subi	r28, 0x96	; 150
    1112:	d1 09       	sbc	r29, r1
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    uint8 flag1=NUM_ONE,flag2=NUM_ZERO,flag3=NUM_ZERO,flag4=NUM_ZERO,flag5=NUM_ZERO,flag6=NUM_ZERO,flag7=NUM_ZERO;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	1a 82       	std	Y+2, r1	; 0x02
    1124:	1b 82       	std	Y+3, r1	; 0x03
    1126:	1c 82       	std	Y+4, r1	; 0x04
    1128:	1d 82       	std	Y+5, r1	; 0x05
    112a:	1e 82       	std	Y+6, r1	; 0x06
    112c:	1f 82       	std	Y+7, r1	; 0x07
    uint8 i=NUM_ZERO,ret;
    112e:	19 86       	std	Y+9, r1	; 0x09
    uint8 counter=NUM_ZERO;
    1130:	18 86       	std	Y+8, r1	; 0x08
    LCD_init();
    1132:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_init>
    /* we initialize button zero and one as input with pull up */
    Button_Init(BUTTON_ZERO);
    1136:	84 e1       	ldi	r24, 0x14	; 20
    1138:	0e 94 41 00 	call	0x82	; 0x82 <Button_Init>
    Button_Init(BUTTON_ONE);
    113c:	8a e0       	ldi	r24, 0x0A	; 10
    113e:	0e 94 41 00 	call	0x82	; 0x82 <Button_Init>
    /* Display Greeting on the LCD */
    LCD_displayStringRowColumn(NUM_ONE,NUM_THREE,"Welcome To");
    1142:	40 e7       	ldi	r20, 0x70	; 112
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	63 e0       	ldi	r22, 0x03	; 3
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(NUM_TWO,NUM_TWO,"ONE MILLION ");
    114e:	4b e7       	ldi	r20, 0x7B	; 123
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	62 e0       	ldi	r22, 0x02	; 2
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	aa ef       	ldi	r26, 0xFA	; 250
    1160:	b4 e4       	ldi	r27, 0x44	; 68
    1162:	8e 87       	std	Y+14, r24	; 0x0e
    1164:	9f 87       	std	Y+15, r25	; 0x0f
    1166:	a8 8b       	std	Y+16, r26	; 0x10
    1168:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    116a:	8e 01       	movw	r16, r28
    116c:	09 5b       	subi	r16, 0xB9	; 185
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a e7       	ldi	r20, 0x7A	; 122
    1176:	55 e4       	ldi	r21, 0x45	; 69
    1178:	6e 85       	ldd	r22, Y+14	; 0x0e
    117a:	7f 85       	ldd	r23, Y+15	; 0x0f
    117c:	88 89       	ldd	r24, Y+16	; 0x10
    117e:	99 89       	ldd	r25, Y+17	; 0x11
    1180:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	f8 01       	movw	r30, r16
    118a:	80 83       	st	Z, r24
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	a2 83       	std	Z+2, r26	; 0x02
    1190:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1192:	ce 01       	movw	r24, r28
    1194:	89 5b       	subi	r24, 0xB9	; 185
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e8       	ldi	r20, 0x80	; 128
    119e:	5f e3       	ldi	r21, 0x3F	; 63
    11a0:	fc 01       	movw	r30, r24
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    11ae:	88 23       	and	r24, r24
    11b0:	4c f4       	brge	.+18     	; 0x11c4 <main+0xc0>
		__ticks = 1;
    11b2:	ce 01       	movw	r24, r28
    11b4:	85 5b       	subi	r24, 0xB5	; 181
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	fc 01       	movw	r30, r24
    11be:	31 83       	std	Z+1, r19	; 0x01
    11c0:	20 83       	st	Z, r18
    11c2:	69 c0       	rjmp	.+210    	; 0x1296 <main+0x192>
	else if (__tmp > 65535)
    11c4:	ce 01       	movw	r24, r28
    11c6:	89 5b       	subi	r24, 0xB9	; 185
    11c8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	3f ef       	ldi	r19, 0xFF	; 255
    11ce:	4f e7       	ldi	r20, 0x7F	; 127
    11d0:	57 e4       	ldi	r21, 0x47	; 71
    11d2:	fc 01       	movw	r30, r24
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    11e0:	18 16       	cp	r1, r24
    11e2:	0c f0       	brlt	.+2      	; 0x11e6 <main+0xe2>
    11e4:	46 c0       	rjmp	.+140    	; 0x1272 <main+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e2       	ldi	r20, 0x20	; 32
    11ec:	51 e4       	ldi	r21, 0x41	; 65
    11ee:	6e 85       	ldd	r22, Y+14	; 0x0e
    11f0:	7f 85       	ldd	r23, Y+15	; 0x0f
    11f2:	88 89       	ldd	r24, Y+16	; 0x10
    11f4:	99 89       	ldd	r25, Y+17	; 0x11
    11f6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	8e 01       	movw	r16, r28
    1200:	05 5b       	subi	r16, 0xB5	; 181
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	f8 01       	movw	r30, r16
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24
    1216:	24 c0       	rjmp	.+72     	; 0x1260 <main+0x15c>
    1218:	ce 01       	movw	r24, r28
    121a:	83 5b       	subi	r24, 0xB3	; 179
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	20 e9       	ldi	r18, 0x90	; 144
    1220:	31 e0       	ldi	r19, 0x01	; 1
    1222:	fc 01       	movw	r30, r24
    1224:	31 83       	std	Z+1, r19	; 0x01
    1226:	20 83       	st	Z, r18
    1228:	ce 01       	movw	r24, r28
    122a:	83 5b       	subi	r24, 0xB3	; 179
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	fc 01       	movw	r30, r24
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <main+0x130>
    1238:	9e 01       	movw	r18, r28
    123a:	23 5b       	subi	r18, 0xB3	; 179
    123c:	3f 4f       	sbci	r19, 0xFF	; 255
    123e:	f9 01       	movw	r30, r18
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1244:	ce 01       	movw	r24, r28
    1246:	85 5b       	subi	r24, 0xB5	; 181
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	9e 01       	movw	r18, r28
    124c:	25 5b       	subi	r18, 0xB5	; 181
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	f9 01       	movw	r30, r18
    1252:	20 81       	ld	r18, Z
    1254:	31 81       	ldd	r19, Z+1	; 0x01
    1256:	21 50       	subi	r18, 0x01	; 1
    1258:	31 09       	sbc	r19, r1
    125a:	fc 01       	movw	r30, r24
    125c:	31 83       	std	Z+1, r19	; 0x01
    125e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1260:	ce 01       	movw	r24, r28
    1262:	85 5b       	subi	r24, 0xB5	; 181
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	fc 01       	movw	r30, r24
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	89 2b       	or	r24, r25
    126e:	a1 f6       	brne	.-88     	; 0x1218 <main+0x114>
    1270:	2c c0       	rjmp	.+88     	; 0x12ca <main+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1272:	8e 01       	movw	r16, r28
    1274:	05 5b       	subi	r16, 0xB5	; 181
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
    1278:	ce 01       	movw	r24, r28
    127a:	89 5b       	subi	r24, 0xB9	; 185
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	fc 01       	movw	r30, r24
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	f8 01       	movw	r30, r16
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24
    1296:	ce 01       	movw	r24, r28
    1298:	81 5b       	subi	r24, 0xB1	; 177
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	9e 01       	movw	r18, r28
    129e:	25 5b       	subi	r18, 0xB5	; 181
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	f9 01       	movw	r30, r18
    12a4:	20 81       	ld	r18, Z
    12a6:	31 81       	ldd	r19, Z+1	; 0x01
    12a8:	fc 01       	movw	r30, r24
    12aa:	31 83       	std	Z+1, r19	; 0x01
    12ac:	20 83       	st	Z, r18
    12ae:	ce 01       	movw	r24, r28
    12b0:	81 5b       	subi	r24, 0xB1	; 177
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	fc 01       	movw	r30, r24
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <main+0x1b6>
    12be:	9e 01       	movw	r18, r28
    12c0:	21 5b       	subi	r18, 0xB1	; 177
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	f9 01       	movw	r30, r18
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	80 83       	st	Z, r24
    _delay_ms(t_2000ms);
    LCD_clear();
    12ca:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
    LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO," 0 for yes ");
    12ce:	48 e8       	ldi	r20, 0x88	; 136
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(NUM_TWO,NUM_ZERO," 1 for No ");
    12da:	44 e9       	ldi	r20, 0x94	; 148
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	aa ef       	ldi	r26, 0xFA	; 250
    12ec:	b4 e4       	ldi	r27, 0x44	; 68
    12ee:	8a 8b       	std	Y+18, r24	; 0x12
    12f0:	9b 8b       	std	Y+19, r25	; 0x13
    12f2:	ac 8b       	std	Y+20, r26	; 0x14
    12f4:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a e7       	ldi	r20, 0x7A	; 122
    12fc:	55 e4       	ldi	r21, 0x45	; 69
    12fe:	6a 89       	ldd	r22, Y+18	; 0x12
    1300:	7b 89       	ldd	r23, Y+19	; 0x13
    1302:	8c 89       	ldd	r24, Y+20	; 0x14
    1304:	9d 89       	ldd	r25, Y+21	; 0x15
    1306:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9e 01       	movw	r18, r28
    1310:	23 5c       	subi	r18, 0xC3	; 195
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	f9 01       	movw	r30, r18
    1316:	80 83       	st	Z, r24
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	a2 83       	std	Z+2, r26	; 0x02
    131c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e8       	ldi	r20, 0x80	; 128
    1324:	5f e3       	ldi	r21, 0x3F	; 63
    1326:	ce 01       	movw	r24, r28
    1328:	cd 96       	adiw	r24, 0x3d	; 61
    132a:	fc 01       	movw	r30, r24
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    1338:	88 23       	and	r24, r24
    133a:	4c f4       	brge	.+18     	; 0x134e <main+0x24a>
		__ticks = 1;
    133c:	ce 01       	movw	r24, r28
    133e:	8f 5b       	subi	r24, 0xBF	; 191
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	fc 01       	movw	r30, r24
    1348:	31 83       	std	Z+1, r19	; 0x01
    134a:	20 83       	st	Z, r18
    134c:	67 c0       	rjmp	.+206    	; 0x141c <main+0x318>
	else if (__tmp > 65535)
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	3f ef       	ldi	r19, 0xFF	; 255
    1352:	4f e7       	ldi	r20, 0x7F	; 127
    1354:	57 e4       	ldi	r21, 0x47	; 71
    1356:	ce 01       	movw	r24, r28
    1358:	cd 96       	adiw	r24, 0x3d	; 61
    135a:	fc 01       	movw	r30, r24
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1368:	18 16       	cp	r1, r24
    136a:	0c f0       	brlt	.+2      	; 0x136e <main+0x26a>
    136c:	46 c0       	rjmp	.+140    	; 0x13fa <main+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e2       	ldi	r20, 0x20	; 32
    1374:	51 e4       	ldi	r21, 0x41	; 65
    1376:	6a 89       	ldd	r22, Y+18	; 0x12
    1378:	7b 89       	ldd	r23, Y+19	; 0x13
    137a:	8c 89       	ldd	r24, Y+20	; 0x14
    137c:	9d 89       	ldd	r25, Y+21	; 0x15
    137e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8e 01       	movw	r16, r28
    1388:	0f 5b       	subi	r16, 0xBF	; 191
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	f8 01       	movw	r30, r16
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	80 83       	st	Z, r24
    139e:	24 c0       	rjmp	.+72     	; 0x13e8 <main+0x2e4>
    13a0:	ce 01       	movw	r24, r28
    13a2:	8d 5b       	subi	r24, 0xBD	; 189
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	20 e9       	ldi	r18, 0x90	; 144
    13a8:	31 e0       	ldi	r19, 0x01	; 1
    13aa:	fc 01       	movw	r30, r24
    13ac:	31 83       	std	Z+1, r19	; 0x01
    13ae:	20 83       	st	Z, r18
    13b0:	ce 01       	movw	r24, r28
    13b2:	8d 5b       	subi	r24, 0xBD	; 189
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	fc 01       	movw	r30, r24
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <main+0x2b8>
    13c0:	9e 01       	movw	r18, r28
    13c2:	2d 5b       	subi	r18, 0xBD	; 189
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	f9 01       	movw	r30, r18
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	ce 01       	movw	r24, r28
    13ce:	8f 5b       	subi	r24, 0xBF	; 191
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	9e 01       	movw	r18, r28
    13d4:	2f 5b       	subi	r18, 0xBF	; 191
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	f9 01       	movw	r30, r18
    13da:	20 81       	ld	r18, Z
    13dc:	31 81       	ldd	r19, Z+1	; 0x01
    13de:	21 50       	subi	r18, 0x01	; 1
    13e0:	31 09       	sbc	r19, r1
    13e2:	fc 01       	movw	r30, r24
    13e4:	31 83       	std	Z+1, r19	; 0x01
    13e6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e8:	ce 01       	movw	r24, r28
    13ea:	8f 5b       	subi	r24, 0xBF	; 191
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	fc 01       	movw	r30, r24
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	89 2b       	or	r24, r25
    13f6:	a1 f6       	brne	.-88     	; 0x13a0 <main+0x29c>
    13f8:	2b c0       	rjmp	.+86     	; 0x1450 <main+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fa:	8e 01       	movw	r16, r28
    13fc:	0f 5b       	subi	r16, 0xBF	; 191
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	ce 01       	movw	r24, r28
    1402:	cd 96       	adiw	r24, 0x3d	; 61
    1404:	fc 01       	movw	r30, r24
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	82 81       	ldd	r24, Z+2	; 0x02
    140c:	93 81       	ldd	r25, Z+3	; 0x03
    140e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	f8 01       	movw	r30, r16
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	80 83       	st	Z, r24
    141c:	ce 01       	movw	r24, r28
    141e:	8b 5b       	subi	r24, 0xBB	; 187
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	9e 01       	movw	r18, r28
    1424:	2f 5b       	subi	r18, 0xBF	; 191
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	f9 01       	movw	r30, r18
    142a:	20 81       	ld	r18, Z
    142c:	31 81       	ldd	r19, Z+1	; 0x01
    142e:	fc 01       	movw	r30, r24
    1430:	31 83       	std	Z+1, r19	; 0x01
    1432:	20 83       	st	Z, r18
    1434:	ce 01       	movw	r24, r28
    1436:	8b 5b       	subi	r24, 0xBB	; 187
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	fc 01       	movw	r30, r24
    143c:	80 81       	ld	r24, Z
    143e:	91 81       	ldd	r25, Z+1	; 0x01
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <main+0x33c>
    1444:	9e 01       	movw	r18, r28
    1446:	2b 5b       	subi	r18, 0xBB	; 187
    1448:	3f 4f       	sbci	r19, 0xFF	; 255
    144a:	f9 01       	movw	r30, r18
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    _delay_ms(t_2000ms);
    LCD_clear();
    1450:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
    LCD_displayStringRowColumn(NUM_ONE,NUM_TWO," READY !!!! ");
    1454:	4f e9       	ldi	r20, 0x9F	; 159
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	62 e0       	ldi	r22, 0x02	; 2
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	aa ef       	ldi	r26, 0xFA	; 250
    1466:	b4 e4       	ldi	r27, 0x44	; 68
    1468:	8f a7       	std	Y+47, r24	; 0x2f
    146a:	98 ab       	std	Y+48, r25	; 0x30
    146c:	a9 ab       	std	Y+49, r26	; 0x31
    146e:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a e7       	ldi	r20, 0x7A	; 122
    1476:	55 e4       	ldi	r21, 0x45	; 69
    1478:	6f a5       	ldd	r22, Y+47	; 0x2f
    147a:	78 a9       	ldd	r23, Y+48	; 0x30
    147c:	89 a9       	ldd	r24, Y+49	; 0x31
    147e:	9a a9       	ldd	r25, Y+50	; 0x32
    1480:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8b ab       	std	Y+51, r24	; 0x33
    148a:	9c ab       	std	Y+52, r25	; 0x34
    148c:	ad ab       	std	Y+53, r26	; 0x35
    148e:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	6b a9       	ldd	r22, Y+51	; 0x33
    149a:	7c a9       	ldd	r23, Y+52	; 0x34
    149c:	8d a9       	ldd	r24, Y+53	; 0x35
    149e:	9e a9       	ldd	r25, Y+54	; 0x36
    14a0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <main+0x3ae>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	98 af       	std	Y+56, r25	; 0x38
    14ae:	8f ab       	std	Y+55, r24	; 0x37
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <main+0x42c>
	else if (__tmp > 65535)
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	4f e7       	ldi	r20, 0x7F	; 127
    14b8:	57 e4       	ldi	r21, 0x47	; 71
    14ba:	6b a9       	ldd	r22, Y+51	; 0x33
    14bc:	7c a9       	ldd	r23, Y+52	; 0x34
    14be:	8d a9       	ldd	r24, Y+53	; 0x35
    14c0:	9e a9       	ldd	r25, Y+54	; 0x36
    14c2:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <main+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	6f a5       	ldd	r22, Y+47	; 0x2f
    14d4:	78 a9       	ldd	r23, Y+48	; 0x30
    14d6:	89 a9       	ldd	r24, Y+49	; 0x31
    14d8:	9a a9       	ldd	r25, Y+50	; 0x32
    14da:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	98 af       	std	Y+56, r25	; 0x38
    14f0:	8f ab       	std	Y+55, r24	; 0x37
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <main+0x40e>
    14f4:	80 e9       	ldi	r24, 0x90	; 144
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	9a af       	std	Y+58, r25	; 0x3a
    14fa:	89 af       	std	Y+57, r24	; 0x39
    14fc:	89 ad       	ldd	r24, Y+57	; 0x39
    14fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <main+0x3fc>
    1504:	9a af       	std	Y+58, r25	; 0x3a
    1506:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8f a9       	ldd	r24, Y+55	; 0x37
    150a:	98 ad       	ldd	r25, Y+56	; 0x38
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	98 af       	std	Y+56, r25	; 0x38
    1510:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8f a9       	ldd	r24, Y+55	; 0x37
    1514:	98 ad       	ldd	r25, Y+56	; 0x38
    1516:	89 2b       	or	r24, r25
    1518:	69 f7       	brne	.-38     	; 0x14f4 <main+0x3f0>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <main+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6b a9       	ldd	r22, Y+51	; 0x33
    151e:	7c a9       	ldd	r23, Y+52	; 0x34
    1520:	8d a9       	ldd	r24, Y+53	; 0x35
    1522:	9e a9       	ldd	r25, Y+54	; 0x36
    1524:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	98 af       	std	Y+56, r25	; 0x38
    152e:	8f ab       	std	Y+55, r24	; 0x37
    1530:	8f a9       	ldd	r24, Y+55	; 0x37
    1532:	98 ad       	ldd	r25, Y+56	; 0x38
    1534:	9c af       	std	Y+60, r25	; 0x3c
    1536:	8b af       	std	Y+59, r24	; 0x3b
    1538:	8b ad       	ldd	r24, Y+59	; 0x3b
    153a:	9c ad       	ldd	r25, Y+60	; 0x3c
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <main+0x438>
    1540:	9c af       	std	Y+60, r25	; 0x3c
    1542:	8b af       	std	Y+59, r24	; 0x3b
    _delay_ms(t_2000ms);
    LCD_clear();
    1544:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>


    while (1)
    {
        counter = 0;
    1548:	18 86       	std	Y+8, r1	; 0x08
        if (flag1==NUM_ONE)
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	09 f0       	breq	.+2      	; 0x1552 <main+0x44e>
    1550:	f2 c0       	rjmp	.+484    	; 0x1736 <main+0x632>
        {
            LCD_clear();
    1552:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO,"Did Egypt WON");
    1556:	4c ea       	ldi	r20, 0xAC	; 172
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(NUM_TWO,NUM_ZERO,"CAN in 1986 ?");
    1562:	4a eb       	ldi	r20, 0xBA	; 186
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	aa ef       	ldi	r26, 0xFA	; 250
    1574:	b4 e4       	ldi	r27, 0x44	; 68
    1576:	8a 87       	std	Y+10, r24	; 0x0a
    1578:	9b 87       	std	Y+11, r25	; 0x0b
    157a:	ac 87       	std	Y+12, r26	; 0x0c
    157c:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    157e:	8e 01       	movw	r16, r28
    1580:	0f 5a       	subi	r16, 0xAF	; 175
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a e7       	ldi	r20, 0x7A	; 122
    158a:	55 e4       	ldi	r21, 0x45	; 69
    158c:	6a 85       	ldd	r22, Y+10	; 0x0a
    158e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1590:	8c 85       	ldd	r24, Y+12	; 0x0c
    1592:	9d 85       	ldd	r25, Y+13	; 0x0d
    1594:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	f8 01       	movw	r30, r16
    159e:	80 83       	st	Z, r24
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	a2 83       	std	Z+2, r26	; 0x02
    15a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15a6:	ce 01       	movw	r24, r28
    15a8:	8f 5a       	subi	r24, 0xAF	; 175
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	fc 01       	movw	r30, r24
    15b6:	60 81       	ld	r22, Z
    15b8:	71 81       	ldd	r23, Z+1	; 0x01
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	4c f4       	brge	.+18     	; 0x15d8 <main+0x4d4>
		__ticks = 1;
    15c6:	ce 01       	movw	r24, r28
    15c8:	8b 5a       	subi	r24, 0xAB	; 171
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	fc 01       	movw	r30, r24
    15d2:	31 83       	std	Z+1, r19	; 0x01
    15d4:	20 83       	st	Z, r18
    15d6:	69 c0       	rjmp	.+210    	; 0x16aa <main+0x5a6>
	else if (__tmp > 65535)
    15d8:	ce 01       	movw	r24, r28
    15da:	8f 5a       	subi	r24, 0xAF	; 175
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	fc 01       	movw	r30, r24
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    15f4:	18 16       	cp	r1, r24
    15f6:	0c f0       	brlt	.+2      	; 0x15fa <main+0x4f6>
    15f8:	46 c0       	rjmp	.+140    	; 0x1686 <main+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	6a 85       	ldd	r22, Y+10	; 0x0a
    1604:	7b 85       	ldd	r23, Y+11	; 0x0b
    1606:	8c 85       	ldd	r24, Y+12	; 0x0c
    1608:	9d 85       	ldd	r25, Y+13	; 0x0d
    160a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8e 01       	movw	r16, r28
    1614:	0b 5a       	subi	r16, 0xAB	; 171
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	f8 01       	movw	r30, r16
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	80 83       	st	Z, r24
    162a:	24 c0       	rjmp	.+72     	; 0x1674 <main+0x570>
    162c:	ce 01       	movw	r24, r28
    162e:	89 5a       	subi	r24, 0xA9	; 169
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	20 e9       	ldi	r18, 0x90	; 144
    1634:	31 e0       	ldi	r19, 0x01	; 1
    1636:	fc 01       	movw	r30, r24
    1638:	31 83       	std	Z+1, r19	; 0x01
    163a:	20 83       	st	Z, r18
    163c:	ce 01       	movw	r24, r28
    163e:	89 5a       	subi	r24, 0xA9	; 169
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <main+0x544>
    164c:	9e 01       	movw	r18, r28
    164e:	29 5a       	subi	r18, 0xA9	; 169
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	f9 01       	movw	r30, r18
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	ce 01       	movw	r24, r28
    165a:	8b 5a       	subi	r24, 0xAB	; 171
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	9e 01       	movw	r18, r28
    1660:	2b 5a       	subi	r18, 0xAB	; 171
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	f9 01       	movw	r30, r18
    1666:	20 81       	ld	r18, Z
    1668:	31 81       	ldd	r19, Z+1	; 0x01
    166a:	21 50       	subi	r18, 0x01	; 1
    166c:	31 09       	sbc	r19, r1
    166e:	fc 01       	movw	r30, r24
    1670:	31 83       	std	Z+1, r19	; 0x01
    1672:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	ce 01       	movw	r24, r28
    1676:	8b 5a       	subi	r24, 0xAB	; 171
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	fc 01       	movw	r30, r24
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	89 2b       	or	r24, r25
    1682:	a1 f6       	brne	.-88     	; 0x162c <main+0x528>
    1684:	2c c0       	rjmp	.+88     	; 0x16de <main+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	8e 01       	movw	r16, r28
    1688:	0b 5a       	subi	r16, 0xAB	; 171
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	ce 01       	movw	r24, r28
    168e:	8f 5a       	subi	r24, 0xAF	; 175
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	fc 01       	movw	r30, r24
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	f8 01       	movw	r30, r16
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	80 83       	st	Z, r24
    16aa:	ce 01       	movw	r24, r28
    16ac:	87 5a       	subi	r24, 0xA7	; 167
    16ae:	9f 4f       	sbci	r25, 0xFF	; 255
    16b0:	9e 01       	movw	r18, r28
    16b2:	2b 5a       	subi	r18, 0xAB	; 171
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	f9 01       	movw	r30, r18
    16b8:	20 81       	ld	r18, Z
    16ba:	31 81       	ldd	r19, Z+1	; 0x01
    16bc:	fc 01       	movw	r30, r24
    16be:	31 83       	std	Z+1, r19	; 0x01
    16c0:	20 83       	st	Z, r18
    16c2:	ce 01       	movw	r24, r28
    16c4:	87 5a       	subi	r24, 0xA7	; 167
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	fc 01       	movw	r30, r24
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <main+0x5ca>
    16d2:	9e 01       	movw	r18, r28
    16d4:	27 5a       	subi	r18, 0xA7	; 167
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	f9 01       	movw	r30, r18
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
            _delay_ms(t_2000ms);
            LCD_clear();
    16de:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_displayStringRowColumn(NUM_ONE,NUM_TWO,"0.yes  1.No");
    16e2:	48 ec       	ldi	r20, 0xC8	; 200
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
            ret = Button_Is_Pressed();
    16ee:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Button_Is_Pressed>
    16f2:	8a 8f       	std	Y+26, r24	; 0x1a
            if (ret==NUM_ONE)
    16f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	81 f4       	brne	.+32     	; 0x171a <main+0x616>
            {
                LCD_clear();
    16fa:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
                counter+=ret;
    16fe:	98 85       	ldd	r25, Y+8	; 0x08
    1700:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1702:	89 0f       	add	r24, r25
    1704:	88 87       	std	Y+8, r24	; 0x08
                LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    1706:	67 e0       	ldi	r22, 0x07	; 7
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
                Disp_Cgram(Happy,NUM_ZERO);
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	80 e6       	ldi	r24, 0x60	; 96
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
    1718:	0b c0       	rjmp	.+22     	; 0x1730 <main+0x62c>
            }
            else
            {
                LCD_clear();
    171a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
                LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    171e:	67 e0       	ldi	r22, 0x07	; 7
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
                Disp_Cgram(Sad,NUM_ZERO);
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	88 e6       	ldi	r24, 0x68	; 104
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
            }
            flag1=0;
    1730:	19 82       	std	Y+1, r1	; 0x01
            flag2=1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	8a 83       	std	Y+2, r24	; 0x02
        }

        if (flag2==1)
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	09 f0       	breq	.+2      	; 0x173e <main+0x63a>
    173c:	f1 c0       	rjmp	.+482    	; 0x1920 <main+0x81c>
        {
            LCD_clear();
    173e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO,"Did Nadal Won US");
    1742:	44 ed       	ldi	r20, 0xD4	; 212
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(NUM_TWO,NUM_ONE,"open in 2018?");
    174e:	45 ee       	ldi	r20, 0xE5	; 229
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	aa ef       	ldi	r26, 0xFA	; 250
    1760:	b4 e4       	ldi	r27, 0x44	; 68
    1762:	8e 8b       	std	Y+22, r24	; 0x16
    1764:	9f 8b       	std	Y+23, r25	; 0x17
    1766:	a8 8f       	std	Y+24, r26	; 0x18
    1768:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    176a:	8e 01       	movw	r16, r28
    176c:	05 5a       	subi	r16, 0xA5	; 165
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4a e7       	ldi	r20, 0x7A	; 122
    1776:	55 e4       	ldi	r21, 0x45	; 69
    1778:	6e 89       	ldd	r22, Y+22	; 0x16
    177a:	7f 89       	ldd	r23, Y+23	; 0x17
    177c:	88 8d       	ldd	r24, Y+24	; 0x18
    177e:	99 8d       	ldd	r25, Y+25	; 0x19
    1780:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	f8 01       	movw	r30, r16
    178a:	80 83       	st	Z, r24
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	a2 83       	std	Z+2, r26	; 0x02
    1790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1792:	ce 01       	movw	r24, r28
    1794:	85 5a       	subi	r24, 0xA5	; 165
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	fc 01       	movw	r30, r24
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    17ae:	88 23       	and	r24, r24
    17b0:	4c f4       	brge	.+18     	; 0x17c4 <main+0x6c0>
		__ticks = 1;
    17b2:	ce 01       	movw	r24, r28
    17b4:	81 5a       	subi	r24, 0xA1	; 161
    17b6:	9f 4f       	sbci	r25, 0xFF	; 255
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	fc 01       	movw	r30, r24
    17be:	31 83       	std	Z+1, r19	; 0x01
    17c0:	20 83       	st	Z, r18
    17c2:	69 c0       	rjmp	.+210    	; 0x1896 <main+0x792>
	else if (__tmp > 65535)
    17c4:	ce 01       	movw	r24, r28
    17c6:	85 5a       	subi	r24, 0xA5	; 165
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	fc 01       	movw	r30, r24
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <main+0x6e2>
    17e4:	46 c0       	rjmp	.+140    	; 0x1872 <main+0x76e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	6e 89       	ldd	r22, Y+22	; 0x16
    17f0:	7f 89       	ldd	r23, Y+23	; 0x17
    17f2:	88 8d       	ldd	r24, Y+24	; 0x18
    17f4:	99 8d       	ldd	r25, Y+25	; 0x19
    17f6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8e 01       	movw	r16, r28
    1800:	01 5a       	subi	r16, 0xA1	; 161
    1802:	1f 4f       	sbci	r17, 0xFF	; 255
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	f8 01       	movw	r30, r16
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	24 c0       	rjmp	.+72     	; 0x1860 <main+0x75c>
    1818:	ce 01       	movw	r24, r28
    181a:	8f 59       	subi	r24, 0x9F	; 159
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	20 e9       	ldi	r18, 0x90	; 144
    1820:	31 e0       	ldi	r19, 0x01	; 1
    1822:	fc 01       	movw	r30, r24
    1824:	31 83       	std	Z+1, r19	; 0x01
    1826:	20 83       	st	Z, r18
    1828:	ce 01       	movw	r24, r28
    182a:	8f 59       	subi	r24, 0x9F	; 159
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	fc 01       	movw	r30, r24
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <main+0x730>
    1838:	9e 01       	movw	r18, r28
    183a:	2f 59       	subi	r18, 0x9F	; 159
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	f9 01       	movw	r30, r18
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	ce 01       	movw	r24, r28
    1846:	81 5a       	subi	r24, 0xA1	; 161
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	9e 01       	movw	r18, r28
    184c:	21 5a       	subi	r18, 0xA1	; 161
    184e:	3f 4f       	sbci	r19, 0xFF	; 255
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	31 81       	ldd	r19, Z+1	; 0x01
    1856:	21 50       	subi	r18, 0x01	; 1
    1858:	31 09       	sbc	r19, r1
    185a:	fc 01       	movw	r30, r24
    185c:	31 83       	std	Z+1, r19	; 0x01
    185e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	ce 01       	movw	r24, r28
    1862:	81 5a       	subi	r24, 0xA1	; 161
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	fc 01       	movw	r30, r24
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	89 2b       	or	r24, r25
    186e:	a1 f6       	brne	.-88     	; 0x1818 <main+0x714>
    1870:	2c c0       	rjmp	.+88     	; 0x18ca <main+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1872:	8e 01       	movw	r16, r28
    1874:	01 5a       	subi	r16, 0xA1	; 161
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	ce 01       	movw	r24, r28
    187a:	85 5a       	subi	r24, 0xA5	; 165
    187c:	9f 4f       	sbci	r25, 0xFF	; 255
    187e:	fc 01       	movw	r30, r24
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	f8 01       	movw	r30, r16
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	ce 01       	movw	r24, r28
    1898:	8d 59       	subi	r24, 0x9D	; 157
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	9e 01       	movw	r18, r28
    189e:	21 5a       	subi	r18, 0xA1	; 161
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	f9 01       	movw	r30, r18
    18a4:	20 81       	ld	r18, Z
    18a6:	31 81       	ldd	r19, Z+1	; 0x01
    18a8:	fc 01       	movw	r30, r24
    18aa:	31 83       	std	Z+1, r19	; 0x01
    18ac:	20 83       	st	Z, r18
    18ae:	ce 01       	movw	r24, r28
    18b0:	8d 59       	subi	r24, 0x9D	; 157
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <main+0x7b6>
    18be:	9e 01       	movw	r18, r28
    18c0:	2d 59       	subi	r18, 0x9D	; 157
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	f9 01       	movw	r30, r18
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
            _delay_ms(t_2000ms);
            LCD_clear();
    18ca:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_displayStringRowColumn(NUM_ONE,NUM_TWO,"0.yes  1.No");
    18ce:	48 ec       	ldi	r20, 0xC8	; 200
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
            ret = Button_Is_Pressed();
    18da:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Button_Is_Pressed>
    18de:	8a 8f       	std	Y+26, r24	; 0x1a
            if (ret==NUM_ONE)
    18e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	61 f4       	brne	.+24     	; 0x18fe <main+0x7fa>
            {
	            LCD_clear();
    18e6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
				LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    18ea:	67 e0       	ldi	r22, 0x07	; 7
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
				Disp_Cgram(Sad,NUM_ZERO);
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	88 e6       	ldi	r24, 0x68	; 104
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
    18fc:	0e c0       	rjmp	.+28     	; 0x191a <main+0x816>

            }
            else
            {
	            LCD_clear();
    18fe:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
			     counter+=NUM_ONE;
    1902:	88 85       	ldd	r24, Y+8	; 0x08
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	88 87       	std	Y+8, r24	; 0x08
				 LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    1908:	67 e0       	ldi	r22, 0x07	; 7
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
				 Disp_Cgram(Happy,NUM_ZERO);
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	80 e6       	ldi	r24, 0x60	; 96
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
            }
            flag2=0;
    191a:	1a 82       	std	Y+2, r1	; 0x02
            flag3=1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	8b 83       	std	Y+3, r24	; 0x03
        }
        if (flag3==1)
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	09 f0       	breq	.+2      	; 0x1928 <main+0x824>
    1926:	f2 c0       	rjmp	.+484    	; 0x1b0c <main+0xa08>
         {
                  LCD_clear();
    1928:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
        LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO,"Did Uruguay win");
    192c:	43 ef       	ldi	r20, 0xF3	; 243
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
        LCD_displayStringRowColumn(NUM_TWO,NUM_ZERO,"first world CUP?");
    1938:	43 e0       	ldi	r20, 0x03	; 3
    193a:	51 e0       	ldi	r21, 0x01	; 1
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	aa ef       	ldi	r26, 0xFA	; 250
    194a:	b4 e4       	ldi	r27, 0x44	; 68
    194c:	8b 8f       	std	Y+27, r24	; 0x1b
    194e:	9c 8f       	std	Y+28, r25	; 0x1c
    1950:	ad 8f       	std	Y+29, r26	; 0x1d
    1952:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1954:	8e 01       	movw	r16, r28
    1956:	0b 59       	subi	r16, 0x9B	; 155
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	55 e4       	ldi	r21, 0x45	; 69
    1962:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1964:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1966:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1968:	9e 8d       	ldd	r25, Y+30	; 0x1e
    196a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	f8 01       	movw	r30, r16
    1974:	80 83       	st	Z, r24
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	a2 83       	std	Z+2, r26	; 0x02
    197a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    197c:	ce 01       	movw	r24, r28
    197e:	8b 59       	subi	r24, 0x9B	; 155
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	fc 01       	movw	r30, r24
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    1998:	88 23       	and	r24, r24
    199a:	4c f4       	brge	.+18     	; 0x19ae <main+0x8aa>
		__ticks = 1;
    199c:	ce 01       	movw	r24, r28
    199e:	87 59       	subi	r24, 0x97	; 151
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	21 e0       	ldi	r18, 0x01	; 1
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	fc 01       	movw	r30, r24
    19a8:	31 83       	std	Z+1, r19	; 0x01
    19aa:	20 83       	st	Z, r18
    19ac:	69 c0       	rjmp	.+210    	; 0x1a80 <main+0x97c>
	else if (__tmp > 65535)
    19ae:	ce 01       	movw	r24, r28
    19b0:	8b 59       	subi	r24, 0x9B	; 155
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	fc 01       	movw	r30, r24
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	0c f0       	brlt	.+2      	; 0x19d0 <main+0x8cc>
    19ce:	46 c0       	rjmp	.+140    	; 0x1a5c <main+0x958>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    19da:	7c 8d       	ldd	r23, Y+28	; 0x1c
    19dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19e0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8e 01       	movw	r16, r28
    19ea:	07 59       	subi	r16, 0x97	; 151
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	24 c0       	rjmp	.+72     	; 0x1a4a <main+0x946>
    1a02:	ce 01       	movw	r24, r28
    1a04:	85 59       	subi	r24, 0x95	; 149
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	20 e9       	ldi	r18, 0x90	; 144
    1a0a:	31 e0       	ldi	r19, 0x01	; 1
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	31 83       	std	Z+1, r19	; 0x01
    1a10:	20 83       	st	Z, r18
    1a12:	ce 01       	movw	r24, r28
    1a14:	85 59       	subi	r24, 0x95	; 149
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	fc 01       	movw	r30, r24
    1a1a:	80 81       	ld	r24, Z
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <main+0x91a>
    1a22:	9e 01       	movw	r18, r28
    1a24:	25 59       	subi	r18, 0x95	; 149
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	f9 01       	movw	r30, r18
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	ce 01       	movw	r24, r28
    1a30:	87 59       	subi	r24, 0x97	; 151
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	9e 01       	movw	r18, r28
    1a36:	27 59       	subi	r18, 0x97	; 151
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	f9 01       	movw	r30, r18
    1a3c:	20 81       	ld	r18, Z
    1a3e:	31 81       	ldd	r19, Z+1	; 0x01
    1a40:	21 50       	subi	r18, 0x01	; 1
    1a42:	31 09       	sbc	r19, r1
    1a44:	fc 01       	movw	r30, r24
    1a46:	31 83       	std	Z+1, r19	; 0x01
    1a48:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	87 59       	subi	r24, 0x97	; 151
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	fc 01       	movw	r30, r24
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	89 2b       	or	r24, r25
    1a58:	a1 f6       	brne	.-88     	; 0x1a02 <main+0x8fe>
    1a5a:	2c c0       	rjmp	.+88     	; 0x1ab4 <main+0x9b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5c:	8e 01       	movw	r16, r28
    1a5e:	07 59       	subi	r16, 0x97	; 151
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	ce 01       	movw	r24, r28
    1a64:	8b 59       	subi	r24, 0x9B	; 155
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	fc 01       	movw	r30, r24
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	80 83       	st	Z, r24
    1a80:	ce 01       	movw	r24, r28
    1a82:	83 59       	subi	r24, 0x93	; 147
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	9e 01       	movw	r18, r28
    1a88:	27 59       	subi	r18, 0x97	; 151
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	f9 01       	movw	r30, r18
    1a8e:	20 81       	ld	r18, Z
    1a90:	31 81       	ldd	r19, Z+1	; 0x01
    1a92:	fc 01       	movw	r30, r24
    1a94:	31 83       	std	Z+1, r19	; 0x01
    1a96:	20 83       	st	Z, r18
    1a98:	ce 01       	movw	r24, r28
    1a9a:	83 59       	subi	r24, 0x93	; 147
    1a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	80 81       	ld	r24, Z
    1aa2:	91 81       	ldd	r25, Z+1	; 0x01
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <main+0x9a0>
    1aa8:	9e 01       	movw	r18, r28
    1aaa:	23 59       	subi	r18, 0x93	; 147
    1aac:	3f 4f       	sbci	r19, 0xFF	; 255
    1aae:	f9 01       	movw	r30, r18
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
        _delay_ms(t_2000ms);
        LCD_clear();
    1ab4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
        LCD_displayStringRowColumn(NUM_ONE,NUM_TWO,"0.yes  1.No");
    1ab8:	48 ec       	ldi	r20, 0xC8	; 200
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	62 e0       	ldi	r22, 0x02	; 2
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
        ret = Button_Is_Pressed();
    1ac4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Button_Is_Pressed>
    1ac8:	8a 8f       	std	Y+26, r24	; 0x1a
        if (ret==NUM_ONE)
    1aca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	81 f4       	brne	.+32     	; 0x1af0 <main+0x9ec>
        {
            LCD_clear();
    1ad0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            counter+=ret;
    1ad4:	98 85       	ldd	r25, Y+8	; 0x08
    1ad6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ad8:	89 0f       	add	r24, r25
    1ada:	88 87       	std	Y+8, r24	; 0x08
            LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    1adc:	67 e0       	ldi	r22, 0x07	; 7
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
            Disp_Cgram(Happy,NUM_ZERO);
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	80 e6       	ldi	r24, 0x60	; 96
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
    1aee:	0b c0       	rjmp	.+22     	; 0x1b06 <main+0xa02>
        }
        else
        {
            LCD_clear();
    1af0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    1af4:	67 e0       	ldi	r22, 0x07	; 7
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
            Disp_Cgram(Sad,NUM_ZERO);
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	88 e6       	ldi	r24, 0x68	; 104
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
        }
            flag3=0;
    1b06:	1b 82       	std	Y+3, r1	; 0x03
            flag4=1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	8c 83       	std	Y+4, r24	; 0x04
        }
        if (flag4==1)
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <main+0xa10>
    1b12:	f2 c0       	rjmp	.+484    	; 0x1cf8 <main+0xbf4>
        {
              LCD_clear();
    1b14:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
               LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO,"Is Kabul Capital");
    1b18:	44 e1       	ldi	r20, 0x14	; 20
    1b1a:	51 e0       	ldi	r21, 0x01	; 1
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
               LCD_displayStringRowColumn(NUM_TWO,NUM_ONE,"OF Afghanistan ?");
    1b24:	45 e2       	ldi	r20, 0x25	; 37
    1b26:	51 e0       	ldi	r21, 0x01	; 1
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	aa ef       	ldi	r26, 0xFA	; 250
    1b36:	b4 e4       	ldi	r27, 0x44	; 68
    1b38:	8f 8f       	std	Y+31, r24	; 0x1f
    1b3a:	98 a3       	std	Y+32, r25	; 0x20
    1b3c:	a9 a3       	std	Y+33, r26	; 0x21
    1b3e:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	8e 01       	movw	r16, r28
    1b42:	01 59       	subi	r16, 0x91	; 145
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	4a e7       	ldi	r20, 0x7A	; 122
    1b4c:	55 e4       	ldi	r21, 0x45	; 69
    1b4e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b50:	78 a1       	ldd	r23, Y+32	; 0x20
    1b52:	89 a1       	ldd	r24, Y+33	; 0x21
    1b54:	9a a1       	ldd	r25, Y+34	; 0x22
    1b56:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	f8 01       	movw	r30, r16
    1b60:	80 83       	st	Z, r24
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	a2 83       	std	Z+2, r26	; 0x02
    1b66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b68:	ce 01       	movw	r24, r28
    1b6a:	81 59       	subi	r24, 0x91	; 145
    1b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e8       	ldi	r20, 0x80	; 128
    1b74:	5f e3       	ldi	r21, 0x3F	; 63
    1b76:	fc 01       	movw	r30, r24
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	4c f4       	brge	.+18     	; 0x1b9a <main+0xa96>
		__ticks = 1;
    1b88:	ce 01       	movw	r24, r28
    1b8a:	8d 58       	subi	r24, 0x8D	; 141
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	21 e0       	ldi	r18, 0x01	; 1
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	fc 01       	movw	r30, r24
    1b94:	31 83       	std	Z+1, r19	; 0x01
    1b96:	20 83       	st	Z, r18
    1b98:	69 c0       	rjmp	.+210    	; 0x1c6c <main+0xb68>
	else if (__tmp > 65535)
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	81 59       	subi	r24, 0x91	; 145
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	3f ef       	ldi	r19, 0xFF	; 255
    1ba4:	4f e7       	ldi	r20, 0x7F	; 127
    1ba6:	57 e4       	ldi	r21, 0x47	; 71
    1ba8:	fc 01       	movw	r30, r24
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	0c f0       	brlt	.+2      	; 0x1bbc <main+0xab8>
    1bba:	46 c0       	rjmp	.+140    	; 0x1c48 <main+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e2       	ldi	r20, 0x20	; 32
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bc6:	78 a1       	ldd	r23, Y+32	; 0x20
    1bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bca:	9a a1       	ldd	r25, Y+34	; 0x22
    1bcc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8e 01       	movw	r16, r28
    1bd6:	0d 58       	subi	r16, 0x8D	; 141
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	f8 01       	movw	r30, r16
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
    1bec:	24 c0       	rjmp	.+72     	; 0x1c36 <main+0xb32>
    1bee:	ce 01       	movw	r24, r28
    1bf0:	8b 58       	subi	r24, 0x8B	; 139
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf4:	20 e9       	ldi	r18, 0x90	; 144
    1bf6:	31 e0       	ldi	r19, 0x01	; 1
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	31 83       	std	Z+1, r19	; 0x01
    1bfc:	20 83       	st	Z, r18
    1bfe:	ce 01       	movw	r24, r28
    1c00:	8b 58       	subi	r24, 0x8B	; 139
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	fc 01       	movw	r30, r24
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <main+0xb06>
    1c0e:	9e 01       	movw	r18, r28
    1c10:	2b 58       	subi	r18, 0x8B	; 139
    1c12:	3f 4f       	sbci	r19, 0xFF	; 255
    1c14:	f9 01       	movw	r30, r18
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	8d 58       	subi	r24, 0x8D	; 141
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	9e 01       	movw	r18, r28
    1c22:	2d 58       	subi	r18, 0x8D	; 141
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	f9 01       	movw	r30, r18
    1c28:	20 81       	ld	r18, Z
    1c2a:	31 81       	ldd	r19, Z+1	; 0x01
    1c2c:	21 50       	subi	r18, 0x01	; 1
    1c2e:	31 09       	sbc	r19, r1
    1c30:	fc 01       	movw	r30, r24
    1c32:	31 83       	std	Z+1, r19	; 0x01
    1c34:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	ce 01       	movw	r24, r28
    1c38:	8d 58       	subi	r24, 0x8D	; 141
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	89 2b       	or	r24, r25
    1c44:	a1 f6       	brne	.-88     	; 0x1bee <main+0xaea>
    1c46:	2c c0       	rjmp	.+88     	; 0x1ca0 <main+0xb9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c48:	8e 01       	movw	r16, r28
    1c4a:	0d 58       	subi	r16, 0x8D	; 141
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	ce 01       	movw	r24, r28
    1c50:	81 59       	subi	r24, 0x91	; 145
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	fc 01       	movw	r30, r24
    1c56:	60 81       	ld	r22, Z
    1c58:	71 81       	ldd	r23, Z+1	; 0x01
    1c5a:	82 81       	ldd	r24, Z+2	; 0x02
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	f8 01       	movw	r30, r16
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	89 58       	subi	r24, 0x89	; 137
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	9e 01       	movw	r18, r28
    1c74:	2d 58       	subi	r18, 0x8D	; 141
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	f9 01       	movw	r30, r18
    1c7a:	20 81       	ld	r18, Z
    1c7c:	31 81       	ldd	r19, Z+1	; 0x01
    1c7e:	fc 01       	movw	r30, r24
    1c80:	31 83       	std	Z+1, r19	; 0x01
    1c82:	20 83       	st	Z, r18
    1c84:	ce 01       	movw	r24, r28
    1c86:	89 58       	subi	r24, 0x89	; 137
    1c88:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <main+0xb8c>
    1c94:	9e 01       	movw	r18, r28
    1c96:	29 58       	subi	r18, 0x89	; 137
    1c98:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9a:	f9 01       	movw	r30, r18
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
               _delay_ms(t_2000ms);
               LCD_clear();
    1ca0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
               LCD_displayStringRowColumn(NUM_ONE,NUM_TWO,"0.yes  1.No");
    1ca4:	48 ec       	ldi	r20, 0xC8	; 200
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
               ret = Button_Is_Pressed();
    1cb0:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Button_Is_Pressed>
    1cb4:	8a 8f       	std	Y+26, r24	; 0x1a
               if (ret==NUM_ONE)
    1cb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	81 f4       	brne	.+32     	; 0x1cdc <main+0xbd8>
               {
                   LCD_clear();
    1cbc:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
                   counter+=ret;
    1cc0:	98 85       	ldd	r25, Y+8	; 0x08
    1cc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cc4:	89 0f       	add	r24, r25
    1cc6:	88 87       	std	Y+8, r24	; 0x08
                   LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    1cc8:	67 e0       	ldi	r22, 0x07	; 7
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
                   Disp_Cgram(Happy,NUM_ZERO);
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	80 e6       	ldi	r24, 0x60	; 96
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
    1cda:	0b c0       	rjmp	.+22     	; 0x1cf2 <main+0xbee>
               }
               else
               {
                   LCD_clear();
    1cdc:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
                   LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    1ce0:	67 e0       	ldi	r22, 0x07	; 7
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
                   Disp_Cgram(Sad,NUM_ZERO);
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	88 e6       	ldi	r24, 0x68	; 104
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
               }
             flag4=0;
    1cf2:	1c 82       	std	Y+4, r1	; 0x04
             flag5=1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
         }
         if (flag5==1)
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <main+0xbfc>
    1cfe:	f1 c0       	rjmp	.+482    	; 0x1ee2 <main+0xdde>
         {
               LCD_clear();
    1d00:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
         LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO,"Does Ramy goes to");
    1d04:	46 e3       	ldi	r20, 0x36	; 54
    1d06:	51 e0       	ldi	r21, 0x01	; 1
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
         LCD_displayStringRowColumn(NUM_TWO,NUM_ZERO,"life GYM?");
    1d10:	48 e4       	ldi	r20, 0x48	; 72
    1d12:	51 e0       	ldi	r21, 0x01	; 1
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	aa ef       	ldi	r26, 0xFA	; 250
    1d22:	b4 e4       	ldi	r27, 0x44	; 68
    1d24:	8b a3       	std	Y+35, r24	; 0x23
    1d26:	9c a3       	std	Y+36, r25	; 0x24
    1d28:	ad a3       	std	Y+37, r26	; 0x25
    1d2a:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	07 58       	subi	r16, 0x87	; 135
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4a e7       	ldi	r20, 0x7A	; 122
    1d38:	55 e4       	ldi	r21, 0x45	; 69
    1d3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d40:	9e a1       	ldd	r25, Y+38	; 0x26
    1d42:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d54:	ce 01       	movw	r24, r28
    1d56:	87 58       	subi	r24, 0x87	; 135
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	fc 01       	movw	r30, r24
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	4c f4       	brge	.+18     	; 0x1d86 <main+0xc82>
		__ticks = 1;
    1d74:	ce 01       	movw	r24, r28
    1d76:	83 58       	subi	r24, 0x83	; 131
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	21 e0       	ldi	r18, 0x01	; 1
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	fc 01       	movw	r30, r24
    1d80:	31 83       	std	Z+1, r19	; 0x01
    1d82:	20 83       	st	Z, r18
    1d84:	69 c0       	rjmp	.+210    	; 0x1e58 <main+0xd54>
	else if (__tmp > 65535)
    1d86:	ce 01       	movw	r24, r28
    1d88:	87 58       	subi	r24, 0x87	; 135
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	fc 01       	movw	r30, r24
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	0c f0       	brlt	.+2      	; 0x1da8 <main+0xca4>
    1da6:	46 c0       	rjmp	.+140    	; 0x1e34 <main+0xd30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	6b a1       	ldd	r22, Y+35	; 0x23
    1db2:	7c a1       	ldd	r23, Y+36	; 0x24
    1db4:	8d a1       	ldd	r24, Y+37	; 0x25
    1db6:	9e a1       	ldd	r25, Y+38	; 0x26
    1db8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	03 58       	subi	r16, 0x83	; 131
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
    1dd8:	24 c0       	rjmp	.+72     	; 0x1e22 <main+0xd1e>
    1dda:	ce 01       	movw	r24, r28
    1ddc:	81 58       	subi	r24, 0x81	; 129
    1dde:	9f 4f       	sbci	r25, 0xFF	; 255
    1de0:	20 e9       	ldi	r18, 0x90	; 144
    1de2:	31 e0       	ldi	r19, 0x01	; 1
    1de4:	fc 01       	movw	r30, r24
    1de6:	31 83       	std	Z+1, r19	; 0x01
    1de8:	20 83       	st	Z, r18
    1dea:	ce 01       	movw	r24, r28
    1dec:	81 58       	subi	r24, 0x81	; 129
    1dee:	9f 4f       	sbci	r25, 0xFF	; 255
    1df0:	fc 01       	movw	r30, r24
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <main+0xcf2>
    1dfa:	9e 01       	movw	r18, r28
    1dfc:	21 58       	subi	r18, 0x81	; 129
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	f9 01       	movw	r30, r18
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e06:	ce 01       	movw	r24, r28
    1e08:	83 58       	subi	r24, 0x83	; 131
    1e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0c:	9e 01       	movw	r18, r28
    1e0e:	23 58       	subi	r18, 0x83	; 131
    1e10:	3f 4f       	sbci	r19, 0xFF	; 255
    1e12:	f9 01       	movw	r30, r18
    1e14:	20 81       	ld	r18, Z
    1e16:	31 81       	ldd	r19, Z+1	; 0x01
    1e18:	21 50       	subi	r18, 0x01	; 1
    1e1a:	31 09       	sbc	r19, r1
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	31 83       	std	Z+1, r19	; 0x01
    1e20:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	ce 01       	movw	r24, r28
    1e24:	83 58       	subi	r24, 0x83	; 131
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	fc 01       	movw	r30, r24
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	89 2b       	or	r24, r25
    1e30:	a1 f6       	brne	.-88     	; 0x1dda <main+0xcd6>
    1e32:	2c c0       	rjmp	.+88     	; 0x1e8c <main+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	8e 01       	movw	r16, r28
    1e36:	03 58       	subi	r16, 0x83	; 131
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	87 58       	subi	r24, 0x87	; 135
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	fc 01       	movw	r30, r24
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	f8 01       	movw	r30, r16
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
    1e58:	ce 01       	movw	r24, r28
    1e5a:	8f 57       	subi	r24, 0x7F	; 127
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	9e 01       	movw	r18, r28
    1e60:	23 58       	subi	r18, 0x83	; 131
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	f9 01       	movw	r30, r18
    1e66:	20 81       	ld	r18, Z
    1e68:	31 81       	ldd	r19, Z+1	; 0x01
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	31 83       	std	Z+1, r19	; 0x01
    1e6e:	20 83       	st	Z, r18
    1e70:	ce 01       	movw	r24, r28
    1e72:	8f 57       	subi	r24, 0x7F	; 127
    1e74:	9f 4f       	sbci	r25, 0xFF	; 255
    1e76:	fc 01       	movw	r30, r24
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <main+0xd78>
    1e80:	9e 01       	movw	r18, r28
    1e82:	2f 57       	subi	r18, 0x7F	; 127
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	f9 01       	movw	r30, r18
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
         _delay_ms(t_2000ms);
         LCD_clear();
    1e8c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
         LCD_displayStringRowColumn(NUM_ONE,NUM_TWO,"0.yes  1.No");
    1e90:	48 ec       	ldi	r20, 0xC8	; 200
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
         ret = Button_Is_Pressed();
    1e9c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Button_Is_Pressed>
    1ea0:	8a 8f       	std	Y+26, r24	; 0x1a
         if (ret==NUM_ONE)
    1ea2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	79 f4       	brne	.+30     	; 0x1ec6 <main+0xdc2>
         {
            LCD_clear();
    1ea8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
					  counter+=NUM_ONE;
    1eac:	88 85       	ldd	r24, Y+8	; 0x08
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	88 87       	std	Y+8, r24	; 0x08
					  LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    1eb2:	67 e0       	ldi	r22, 0x07	; 7
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
					  Disp_Cgram(Happy,NUM_ZERO);
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	80 e6       	ldi	r24, 0x60	; 96
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <main+0xdd8>


         }
         else
         {
            LCD_clear();
    1ec6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
			LCD_gotoRowColumn(NUM_ONE,NUM_SEVEN);
    1eca:	67 e0       	ldi	r22, 0x07	; 7
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
			Disp_Cgram(Sad,NUM_ZERO);
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	88 e6       	ldi	r24, 0x68	; 104
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 25 11 	call	0x224a	; 0x224a <Disp_Cgram>

         }
            flag5=0;
    1edc:	1d 82       	std	Y+5, r1	; 0x05
            flag6=1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	8e 83       	std	Y+6, r24	; 0x06
        }
        if (flag6==1)
    1ee2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <main+0xde6>
    1ee8:	a3 c1       	rjmp	.+838    	; 0x2230 <main+0x112c>
        {
            LCD_clear();
    1eea:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO,"your score is:");
    1eee:	42 e5       	ldi	r20, 0x52	; 82
    1ef0:	51 e0       	ldi	r21, 0x01	; 1
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
            LCD_gotoRowColumn(NUM_TWO,NUM_SEVEN);
    1efa:	67 e0       	ldi	r22, 0x07	; 7
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_gotoRowColumn>
            LCD_displayChar(counter+48);
    1f02:	88 85       	ldd	r24, Y+8	; 0x08
    1f04:	80 5d       	subi	r24, 0xD0	; 208
    1f06:	0e 94 db 05 	call	0xbb6	; 0xbb6 <LCD_displayChar>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	aa ef       	ldi	r26, 0xFA	; 250
    1f10:	b4 e4       	ldi	r27, 0x44	; 68
    1f12:	8b a7       	std	Y+43, r24	; 0x2b
    1f14:	9c a7       	std	Y+44, r25	; 0x2c
    1f16:	ad a7       	std	Y+45, r26	; 0x2d
    1f18:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f1a:	8e 01       	movw	r16, r28
    1f1c:	03 57       	subi	r16, 0x73	; 115
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a e7       	ldi	r20, 0x7A	; 122
    1f26:	55 e4       	ldi	r21, 0x45	; 69
    1f28:	6b a5       	ldd	r22, Y+43	; 0x2b
    1f2a:	7c a5       	ldd	r23, Y+44	; 0x2c
    1f2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f30:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	f8 01       	movw	r30, r16
    1f3a:	80 83       	st	Z, r24
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	a2 83       	std	Z+2, r26	; 0x02
    1f40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f42:	ce 01       	movw	r24, r28
    1f44:	83 57       	subi	r24, 0x73	; 115
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	fc 01       	movw	r30, r24
    1f52:	60 81       	ld	r22, Z
    1f54:	71 81       	ldd	r23, Z+1	; 0x01
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	4c f4       	brge	.+18     	; 0x1f74 <main+0xe70>
		__ticks = 1;
    1f62:	ce 01       	movw	r24, r28
    1f64:	8f 56       	subi	r24, 0x6F	; 111
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	21 e0       	ldi	r18, 0x01	; 1
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	31 83       	std	Z+1, r19	; 0x01
    1f70:	20 83       	st	Z, r18
    1f72:	69 c0       	rjmp	.+210    	; 0x2046 <main+0xf42>
	else if (__tmp > 65535)
    1f74:	ce 01       	movw	r24, r28
    1f76:	83 57       	subi	r24, 0x73	; 115
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	fc 01       	movw	r30, r24
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1f90:	18 16       	cp	r1, r24
    1f92:	0c f0       	brlt	.+2      	; 0x1f96 <main+0xe92>
    1f94:	46 c0       	rjmp	.+140    	; 0x2022 <main+0xf1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1fa0:	7c a5       	ldd	r23, Y+44	; 0x2c
    1fa2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fa4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fa6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8e 01       	movw	r16, r28
    1fb0:	0f 56       	subi	r16, 0x6F	; 111
    1fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
    1fc6:	24 c0       	rjmp	.+72     	; 0x2010 <main+0xf0c>
    1fc8:	ce 01       	movw	r24, r28
    1fca:	8d 56       	subi	r24, 0x6D	; 109
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	20 e9       	ldi	r18, 0x90	; 144
    1fd0:	31 e0       	ldi	r19, 0x01	; 1
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	31 83       	std	Z+1, r19	; 0x01
    1fd6:	20 83       	st	Z, r18
    1fd8:	ce 01       	movw	r24, r28
    1fda:	8d 56       	subi	r24, 0x6D	; 109
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	fc 01       	movw	r30, r24
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <main+0xee0>
    1fe8:	9e 01       	movw	r18, r28
    1fea:	2d 56       	subi	r18, 0x6D	; 109
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	f9 01       	movw	r30, r18
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	8f 56       	subi	r24, 0x6F	; 111
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	9e 01       	movw	r18, r28
    1ffc:	2f 56       	subi	r18, 0x6F	; 111
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	f9 01       	movw	r30, r18
    2002:	20 81       	ld	r18, Z
    2004:	31 81       	ldd	r19, Z+1	; 0x01
    2006:	21 50       	subi	r18, 0x01	; 1
    2008:	31 09       	sbc	r19, r1
    200a:	fc 01       	movw	r30, r24
    200c:	31 83       	std	Z+1, r19	; 0x01
    200e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	ce 01       	movw	r24, r28
    2012:	8f 56       	subi	r24, 0x6F	; 111
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	fc 01       	movw	r30, r24
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	89 2b       	or	r24, r25
    201e:	a1 f6       	brne	.-88     	; 0x1fc8 <main+0xec4>
    2020:	2c c0       	rjmp	.+88     	; 0x207a <main+0xf76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	8e 01       	movw	r16, r28
    2024:	0f 56       	subi	r16, 0x6F	; 111
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	ce 01       	movw	r24, r28
    202a:	83 57       	subi	r24, 0x73	; 115
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	fc 01       	movw	r30, r24
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	f8 01       	movw	r30, r16
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
    2046:	ce 01       	movw	r24, r28
    2048:	8b 56       	subi	r24, 0x6B	; 107
    204a:	9f 4f       	sbci	r25, 0xFF	; 255
    204c:	9e 01       	movw	r18, r28
    204e:	2f 56       	subi	r18, 0x6F	; 111
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	f9 01       	movw	r30, r18
    2054:	20 81       	ld	r18, Z
    2056:	31 81       	ldd	r19, Z+1	; 0x01
    2058:	fc 01       	movw	r30, r24
    205a:	31 83       	std	Z+1, r19	; 0x01
    205c:	20 83       	st	Z, r18
    205e:	ce 01       	movw	r24, r28
    2060:	8b 56       	subi	r24, 0x6B	; 107
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	fc 01       	movw	r30, r24
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <main+0xf66>
    206e:	9e 01       	movw	r18, r28
    2070:	2b 56       	subi	r18, 0x6B	; 107
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	f9 01       	movw	r30, r18
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
            _delay_ms(t_2000ms);
            LCD_clear();
    207a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO,"Do you want to");
    207e:	41 e6       	ldi	r20, 0x61	; 97
    2080:	51 e0       	ldi	r21, 0x01	; 1
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(NUM_TWO,NUM_TWO,"Play again");
    208a:	40 e7       	ldi	r20, 0x70	; 112
    208c:	51 e0       	ldi	r21, 0x01	; 1
    208e:	62 e0       	ldi	r22, 0x02	; 2
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e8       	ldi	r25, 0x80	; 128
    209a:	ab e3       	ldi	r26, 0x3B	; 59
    209c:	b5 e4       	ldi	r27, 0x45	; 69
    209e:	8f a3       	std	Y+39, r24	; 0x27
    20a0:	98 a7       	std	Y+40, r25	; 0x28
    20a2:	a9 a7       	std	Y+41, r26	; 0x29
    20a4:	ba a7       	std	Y+42, r27	; 0x2a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	8e 01       	movw	r16, r28
    20a8:	0d 57       	subi	r16, 0x7D	; 125
    20aa:	1f 4f       	sbci	r17, 0xFF	; 255
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a e7       	ldi	r20, 0x7A	; 122
    20b2:	55 e4       	ldi	r21, 0x45	; 69
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	f8 01       	movw	r30, r16
    20c6:	80 83       	st	Z, r24
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	a2 83       	std	Z+2, r26	; 0x02
    20cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ce:	ce 01       	movw	r24, r28
    20d0:	8d 57       	subi	r24, 0x7D	; 125
    20d2:	9f 4f       	sbci	r25, 0xFF	; 255
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	fc 01       	movw	r30, r24
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	4c f4       	brge	.+18     	; 0x2100 <main+0xffc>
		__ticks = 1;
    20ee:	ce 01       	movw	r24, r28
    20f0:	89 57       	subi	r24, 0x79	; 121
    20f2:	9f 4f       	sbci	r25, 0xFF	; 255
    20f4:	21 e0       	ldi	r18, 0x01	; 1
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	fc 01       	movw	r30, r24
    20fa:	31 83       	std	Z+1, r19	; 0x01
    20fc:	20 83       	st	Z, r18
    20fe:	69 c0       	rjmp	.+210    	; 0x21d2 <main+0x10ce>
	else if (__tmp > 65535)
    2100:	ce 01       	movw	r24, r28
    2102:	8d 57       	subi	r24, 0x7D	; 125
    2104:	9f 4f       	sbci	r25, 0xFF	; 255
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	fc 01       	movw	r30, r24
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    211c:	18 16       	cp	r1, r24
    211e:	0c f0       	brlt	.+2      	; 0x2122 <main+0x101e>
    2120:	46 c0       	rjmp	.+140    	; 0x21ae <main+0x10aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	6f a1       	ldd	r22, Y+39	; 0x27
    212c:	78 a5       	ldd	r23, Y+40	; 0x28
    212e:	89 a5       	ldd	r24, Y+41	; 0x29
    2130:	9a a5       	ldd	r25, Y+42	; 0x2a
    2132:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8e 01       	movw	r16, r28
    213c:	09 57       	subi	r16, 0x79	; 121
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	24 c0       	rjmp	.+72     	; 0x219c <main+0x1098>
    2154:	ce 01       	movw	r24, r28
    2156:	87 57       	subi	r24, 0x77	; 119
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	20 e9       	ldi	r18, 0x90	; 144
    215c:	31 e0       	ldi	r19, 0x01	; 1
    215e:	fc 01       	movw	r30, r24
    2160:	31 83       	std	Z+1, r19	; 0x01
    2162:	20 83       	st	Z, r18
    2164:	ce 01       	movw	r24, r28
    2166:	87 57       	subi	r24, 0x77	; 119
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	fc 01       	movw	r30, r24
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <main+0x106c>
    2174:	9e 01       	movw	r18, r28
    2176:	27 57       	subi	r18, 0x77	; 119
    2178:	3f 4f       	sbci	r19, 0xFF	; 255
    217a:	f9 01       	movw	r30, r18
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	ce 01       	movw	r24, r28
    2182:	89 57       	subi	r24, 0x79	; 121
    2184:	9f 4f       	sbci	r25, 0xFF	; 255
    2186:	9e 01       	movw	r18, r28
    2188:	29 57       	subi	r18, 0x79	; 121
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	f9 01       	movw	r30, r18
    218e:	20 81       	ld	r18, Z
    2190:	31 81       	ldd	r19, Z+1	; 0x01
    2192:	21 50       	subi	r18, 0x01	; 1
    2194:	31 09       	sbc	r19, r1
    2196:	fc 01       	movw	r30, r24
    2198:	31 83       	std	Z+1, r19	; 0x01
    219a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	ce 01       	movw	r24, r28
    219e:	89 57       	subi	r24, 0x79	; 121
    21a0:	9f 4f       	sbci	r25, 0xFF	; 255
    21a2:	fc 01       	movw	r30, r24
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	89 2b       	or	r24, r25
    21aa:	a1 f6       	brne	.-88     	; 0x2154 <main+0x1050>
    21ac:	2c c0       	rjmp	.+88     	; 0x2206 <main+0x1102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	8e 01       	movw	r16, r28
    21b0:	09 57       	subi	r16, 0x79	; 121
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	ce 01       	movw	r24, r28
    21b6:	8d 57       	subi	r24, 0x7D	; 125
    21b8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ba:	fc 01       	movw	r30, r24
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	f8 01       	movw	r30, r16
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	ce 01       	movw	r24, r28
    21d4:	85 57       	subi	r24, 0x75	; 117
    21d6:	9f 4f       	sbci	r25, 0xFF	; 255
    21d8:	9e 01       	movw	r18, r28
    21da:	29 57       	subi	r18, 0x79	; 121
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	f9 01       	movw	r30, r18
    21e0:	20 81       	ld	r18, Z
    21e2:	31 81       	ldd	r19, Z+1	; 0x01
    21e4:	fc 01       	movw	r30, r24
    21e6:	31 83       	std	Z+1, r19	; 0x01
    21e8:	20 83       	st	Z, r18
    21ea:	ce 01       	movw	r24, r28
    21ec:	85 57       	subi	r24, 0x75	; 117
    21ee:	9f 4f       	sbci	r25, 0xFF	; 255
    21f0:	fc 01       	movw	r30, r24
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <main+0x10f2>
    21fa:	9e 01       	movw	r18, r28
    21fc:	25 57       	subi	r18, 0x75	; 117
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	f9 01       	movw	r30, r18
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
            _delay_ms(t_3000ms);
            LCD_clear();
    2206:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_displayStringRowColumn(NUM_ONE,NUM_ZERO,"0.yes  1.No");
    220a:	48 ec       	ldi	r20, 0xC8	; 200
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
            ret=Button_Is_Pressed();
    2216:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Button_Is_Pressed>
    221a:	8a 8f       	std	Y+26, r24	; 0x1a
            if (ret==NUM_ONE)
    221c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	21 f4       	brne	.+8      	; 0x222a <main+0x1126>
            {
                flag1=NUM_ONE;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	89 83       	std	Y+1, r24	; 0x01
                flag6=NUM_ZERO;
    2226:	1e 82       	std	Y+6, r1	; 0x06
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <main+0x112c>
            }
            else
            {
                flag7=NUM_ONE;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8f 83       	std	Y+7, r24	; 0x07
                flag6=NUM_ZERO;
    222e:	1e 82       	std	Y+6, r1	; 0x06

            }
        }
        if (flag7==NUM_ONE)
    2230:	8f 81       	ldd	r24, Y+7	; 0x07
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	09 f0       	breq	.+2      	; 0x2238 <main+0x1134>
    2236:	88 c9       	rjmp	.-3312   	; 0x1548 <main+0x444>
        {
            LCD_clear();
    2238:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
            LCD_displayStringRowColumn(NUM_ONE,NUM_FOUR,"Thank YOU");
    223c:	4b e7       	ldi	r20, 0x7B	; 123
    223e:	51 e0       	ldi	r21, 0x01	; 1
    2240:	64 e0       	ldi	r22, 0x04	; 4
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_displayStringRowColumn>
        }



    }
    2248:	7f c9       	rjmp	.-3330   	; 0x1548 <main+0x444>

0000224a <Disp_Cgram>:
}

static void Disp_Cgram(uint8* arr,uint8 loc)
{
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	62 97       	sbiw	r28, 0x12	; 18
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	99 8b       	std	Y+17, r25	; 0x11
    2260:	88 8b       	std	Y+16, r24	; 0x10
    2262:	6a 8b       	std	Y+18, r22	; 0x12

    uint8 i=NUM_ZERO;
    2264:	19 82       	std	Y+1, r1	; 0x01
    if(loc<NUM_EIGHT)
    2266:	8a 89       	ldd	r24, Y+18	; 0x12
    2268:	88 30       	cpi	r24, 0x08	; 8
    226a:	08 f0       	brcs	.+2      	; 0x226e <Disp_Cgram+0x24>
    226c:	96 c0       	rjmp	.+300    	; 0x239a <Disp_Cgram+0x150>
    {
        LCD_sendCommand(0x40+loc*NUM_EIGHT);
    226e:	8a 89       	ldd	r24, Y+18	; 0x12
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	08 96       	adiw	r24, 0x08	; 8
    2276:	88 0f       	add	r24, r24
    2278:	88 0f       	add	r24, r24
    227a:	88 0f       	add	r24, r24
    227c:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
        for (i=NUM_ZERO; i<NUM_EIGHT; i++)
    2280:	19 82       	std	Y+1, r1	; 0x01
    2282:	0e c0       	rjmp	.+28     	; 0x22a0 <Disp_Cgram+0x56>
        {
            LCD_displayChar(arr[i]);
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	28 89       	ldd	r18, Y+16	; 0x10
    228c:	39 89       	ldd	r19, Y+17	; 0x11
    228e:	82 0f       	add	r24, r18
    2290:	93 1f       	adc	r25, r19
    2292:	fc 01       	movw	r30, r24
    2294:	80 81       	ld	r24, Z
    2296:	0e 94 db 05 	call	0xbb6	; 0xbb6 <LCD_displayChar>

    uint8 i=NUM_ZERO;
    if(loc<NUM_EIGHT)
    {
        LCD_sendCommand(0x40+loc*NUM_EIGHT);
        for (i=NUM_ZERO; i<NUM_EIGHT; i++)
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	88 30       	cpi	r24, 0x08	; 8
    22a4:	78 f3       	brcs	.-34     	; 0x2284 <Disp_Cgram+0x3a>
        {
            LCD_displayChar(arr[i]);
        }
        LCD_sendCommand(0X80);
    22a6:	80 e8       	ldi	r24, 0x80	; 128
    22a8:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
        LCD_clear();
    22ac:	0e 94 5d 08 	call	0x10ba	; 0x10ba <LCD_clear>
        LCD_displayChar(NUM_ZERO+loc);
    22b0:	8a 89       	ldd	r24, Y+18	; 0x12
    22b2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <LCD_displayChar>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e8       	ldi	r25, 0x80	; 128
    22ba:	ab e3       	ldi	r26, 0x3B	; 59
    22bc:	b5 e4       	ldi	r27, 0x45	; 69
    22be:	8a 83       	std	Y+2, r24	; 0x02
    22c0:	9b 83       	std	Y+3, r25	; 0x03
    22c2:	ac 83       	std	Y+4, r26	; 0x04
    22c4:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	55 e4       	ldi	r21, 0x45	; 69
    22ce:	6a 81       	ldd	r22, Y+2	; 0x02
    22d0:	7b 81       	ldd	r23, Y+3	; 0x03
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	9d 81       	ldd	r25, Y+5	; 0x05
    22d6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8e 83       	std	Y+6, r24	; 0x06
    22e0:	9f 83       	std	Y+7, r25	; 0x07
    22e2:	a8 87       	std	Y+8, r26	; 0x08
    22e4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	6e 81       	ldd	r22, Y+6	; 0x06
    22f0:	7f 81       	ldd	r23, Y+7	; 0x07
    22f2:	88 85       	ldd	r24, Y+8	; 0x08
    22f4:	99 85       	ldd	r25, Y+9	; 0x09
    22f6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__cmpsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	2c f4       	brge	.+10     	; 0x2308 <Disp_Cgram+0xbe>
		__ticks = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9b 87       	std	Y+11, r25	; 0x0b
    2304:	8a 87       	std	Y+10, r24	; 0x0a
    2306:	3f c0       	rjmp	.+126    	; 0x2386 <Disp_Cgram+0x13c>
	else if (__tmp > 65535)
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	6e 81       	ldd	r22, Y+6	; 0x06
    2312:	7f 81       	ldd	r23, Y+7	; 0x07
    2314:	88 85       	ldd	r24, Y+8	; 0x08
    2316:	99 85       	ldd	r25, Y+9	; 0x09
    2318:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    231c:	18 16       	cp	r1, r24
    231e:	4c f5       	brge	.+82     	; 0x2372 <Disp_Cgram+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	6a 81       	ldd	r22, Y+2	; 0x02
    232a:	7b 81       	ldd	r23, Y+3	; 0x03
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	9d 81       	ldd	r25, Y+5	; 0x05
    2330:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9b 87       	std	Y+11, r25	; 0x0b
    2346:	8a 87       	std	Y+10, r24	; 0x0a
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <Disp_Cgram+0x11e>
    234a:	80 e9       	ldi	r24, 0x90	; 144
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	9d 87       	std	Y+13, r25	; 0x0d
    2350:	8c 87       	std	Y+12, r24	; 0x0c
    2352:	8c 85       	ldd	r24, Y+12	; 0x0c
    2354:	9d 85       	ldd	r25, Y+13	; 0x0d
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <Disp_Cgram+0x10c>
    235a:	9d 87       	std	Y+13, r25	; 0x0d
    235c:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2360:	9b 85       	ldd	r25, Y+11	; 0x0b
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	9b 87       	std	Y+11, r25	; 0x0b
    2366:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	8a 85       	ldd	r24, Y+10	; 0x0a
    236a:	9b 85       	ldd	r25, Y+11	; 0x0b
    236c:	89 2b       	or	r24, r25
    236e:	69 f7       	brne	.-38     	; 0x234a <Disp_Cgram+0x100>
        _delay_ms(t_3000ms);
    }
}
    2370:	14 c0       	rjmp	.+40     	; 0x239a <Disp_Cgram+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	6e 81       	ldd	r22, Y+6	; 0x06
    2374:	7f 81       	ldd	r23, Y+7	; 0x07
    2376:	88 85       	ldd	r24, Y+8	; 0x08
    2378:	99 85       	ldd	r25, Y+9	; 0x09
    237a:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9b 87       	std	Y+11, r25	; 0x0b
    2384:	8a 87       	std	Y+10, r24	; 0x0a
    2386:	8a 85       	ldd	r24, Y+10	; 0x0a
    2388:	9b 85       	ldd	r25, Y+11	; 0x0b
    238a:	9f 87       	std	Y+15, r25	; 0x0f
    238c:	8e 87       	std	Y+14, r24	; 0x0e
    238e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2390:	9f 85       	ldd	r25, Y+15	; 0x0f
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <Disp_Cgram+0x148>
    2396:	9f 87       	std	Y+15, r25	; 0x0f
    2398:	8e 87       	std	Y+14, r24	; 0x0e
    239a:	00 00       	nop
    239c:	62 96       	adiw	r28, 0x12	; 18
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <Button_Is_Pressed>:

static uint8 Button_Is_Pressed()
{
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <Button_Is_Pressed+0x6>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    uint8 flag = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	8a 83       	std	Y+2, r24	; 0x02
    uint8 counter;
    while (flag)
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <Button_Is_Pressed+0x2e>
    {
        if (DIO_ReadPin(BUTTON_ZERO))
    23be:	84 e1       	ldi	r24, 0x14	; 20
    23c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_ReadPin>
    23c4:	88 23       	and	r24, r24
    23c6:	19 f0       	breq	.+6      	; 0x23ce <Button_Is_Pressed+0x20>
        {
            counter  = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	89 83       	std	Y+1, r24	; 0x01
            break;
    23cc:	0a c0       	rjmp	.+20     	; 0x23e2 <Button_Is_Pressed+0x34>
        }
        else if (DIO_ReadPin(BUTTON_ONE))
    23ce:	8a e0       	ldi	r24, 0x0A	; 10
    23d0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_ReadPin>
    23d4:	88 23       	and	r24, r24
    23d6:	11 f0       	breq	.+4      	; 0x23dc <Button_Is_Pressed+0x2e>
        {
            counter = 0;
    23d8:	19 82       	std	Y+1, r1	; 0x01
            break;
    23da:	03 c0       	rjmp	.+6      	; 0x23e2 <Button_Is_Pressed+0x34>

static uint8 Button_Is_Pressed()
{
    uint8 flag = 1;
    uint8 counter;
    while (flag)
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	88 23       	and	r24, r24
    23e0:	71 f7       	brne	.-36     	; 0x23be <Button_Is_Pressed+0x10>
        else
        {
            /*Nothing to do*/
        }
    }
    return counter;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	08 95       	ret

000023ee <__cmpsf2>:
    23ee:	0e 94 2b 12 	call	0x2456	; 0x2456 <__fp_cmp>
    23f2:	08 f4       	brcc	.+2      	; 0x23f6 <__cmpsf2+0x8>
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	08 95       	ret

000023f8 <__fixunssfsi>:
    23f8:	0e 94 57 12 	call	0x24ae	; 0x24ae <__fp_splitA>
    23fc:	88 f0       	brcs	.+34     	; 0x2420 <__fixunssfsi+0x28>
    23fe:	9f 57       	subi	r25, 0x7F	; 127
    2400:	98 f0       	brcs	.+38     	; 0x2428 <__fixunssfsi+0x30>
    2402:	b9 2f       	mov	r27, r25
    2404:	99 27       	eor	r25, r25
    2406:	b7 51       	subi	r27, 0x17	; 23
    2408:	b0 f0       	brcs	.+44     	; 0x2436 <__fixunssfsi+0x3e>
    240a:	e1 f0       	breq	.+56     	; 0x2444 <__fixunssfsi+0x4c>
    240c:	66 0f       	add	r22, r22
    240e:	77 1f       	adc	r23, r23
    2410:	88 1f       	adc	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	1a f0       	brmi	.+6      	; 0x241c <__fixunssfsi+0x24>
    2416:	ba 95       	dec	r27
    2418:	c9 f7       	brne	.-14     	; 0x240c <__fixunssfsi+0x14>
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <__fixunssfsi+0x4c>
    241c:	b1 30       	cpi	r27, 0x01	; 1
    241e:	91 f0       	breq	.+36     	; 0x2444 <__fixunssfsi+0x4c>
    2420:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__fp_zero>
    2424:	b1 e0       	ldi	r27, 0x01	; 1
    2426:	08 95       	ret
    2428:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__fp_zero>
    242c:	67 2f       	mov	r22, r23
    242e:	78 2f       	mov	r23, r24
    2430:	88 27       	eor	r24, r24
    2432:	b8 5f       	subi	r27, 0xF8	; 248
    2434:	39 f0       	breq	.+14     	; 0x2444 <__fixunssfsi+0x4c>
    2436:	b9 3f       	cpi	r27, 0xF9	; 249
    2438:	cc f3       	brlt	.-14     	; 0x242c <__fixunssfsi+0x34>
    243a:	86 95       	lsr	r24
    243c:	77 95       	ror	r23
    243e:	67 95       	ror	r22
    2440:	b3 95       	inc	r27
    2442:	d9 f7       	brne	.-10     	; 0x243a <__fixunssfsi+0x42>
    2444:	3e f4       	brtc	.+14     	; 0x2454 <__fixunssfsi+0x5c>
    2446:	90 95       	com	r25
    2448:	80 95       	com	r24
    244a:	70 95       	com	r23
    244c:	61 95       	neg	r22
    244e:	7f 4f       	sbci	r23, 0xFF	; 255
    2450:	8f 4f       	sbci	r24, 0xFF	; 255
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	08 95       	ret

00002456 <__fp_cmp>:
    2456:	99 0f       	add	r25, r25
    2458:	00 08       	sbc	r0, r0
    245a:	55 0f       	add	r21, r21
    245c:	aa 0b       	sbc	r26, r26
    245e:	e0 e8       	ldi	r30, 0x80	; 128
    2460:	fe ef       	ldi	r31, 0xFE	; 254
    2462:	16 16       	cp	r1, r22
    2464:	17 06       	cpc	r1, r23
    2466:	e8 07       	cpc	r30, r24
    2468:	f9 07       	cpc	r31, r25
    246a:	c0 f0       	brcs	.+48     	; 0x249c <__fp_cmp+0x46>
    246c:	12 16       	cp	r1, r18
    246e:	13 06       	cpc	r1, r19
    2470:	e4 07       	cpc	r30, r20
    2472:	f5 07       	cpc	r31, r21
    2474:	98 f0       	brcs	.+38     	; 0x249c <__fp_cmp+0x46>
    2476:	62 1b       	sub	r22, r18
    2478:	73 0b       	sbc	r23, r19
    247a:	84 0b       	sbc	r24, r20
    247c:	95 0b       	sbc	r25, r21
    247e:	39 f4       	brne	.+14     	; 0x248e <__fp_cmp+0x38>
    2480:	0a 26       	eor	r0, r26
    2482:	61 f0       	breq	.+24     	; 0x249c <__fp_cmp+0x46>
    2484:	23 2b       	or	r18, r19
    2486:	24 2b       	or	r18, r20
    2488:	25 2b       	or	r18, r21
    248a:	21 f4       	brne	.+8      	; 0x2494 <__fp_cmp+0x3e>
    248c:	08 95       	ret
    248e:	0a 26       	eor	r0, r26
    2490:	09 f4       	brne	.+2      	; 0x2494 <__fp_cmp+0x3e>
    2492:	a1 40       	sbci	r26, 0x01	; 1
    2494:	a6 95       	lsr	r26
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	81 1d       	adc	r24, r1
    249a:	81 1d       	adc	r24, r1
    249c:	08 95       	ret

0000249e <__fp_split3>:
    249e:	57 fd       	sbrc	r21, 7
    24a0:	90 58       	subi	r25, 0x80	; 128
    24a2:	44 0f       	add	r20, r20
    24a4:	55 1f       	adc	r21, r21
    24a6:	59 f0       	breq	.+22     	; 0x24be <__fp_splitA+0x10>
    24a8:	5f 3f       	cpi	r21, 0xFF	; 255
    24aa:	71 f0       	breq	.+28     	; 0x24c8 <__fp_splitA+0x1a>
    24ac:	47 95       	ror	r20

000024ae <__fp_splitA>:
    24ae:	88 0f       	add	r24, r24
    24b0:	97 fb       	bst	r25, 7
    24b2:	99 1f       	adc	r25, r25
    24b4:	61 f0       	breq	.+24     	; 0x24ce <__fp_splitA+0x20>
    24b6:	9f 3f       	cpi	r25, 0xFF	; 255
    24b8:	79 f0       	breq	.+30     	; 0x24d8 <__fp_splitA+0x2a>
    24ba:	87 95       	ror	r24
    24bc:	08 95       	ret
    24be:	12 16       	cp	r1, r18
    24c0:	13 06       	cpc	r1, r19
    24c2:	14 06       	cpc	r1, r20
    24c4:	55 1f       	adc	r21, r21
    24c6:	f2 cf       	rjmp	.-28     	; 0x24ac <__fp_split3+0xe>
    24c8:	46 95       	lsr	r20
    24ca:	f1 df       	rcall	.-30     	; 0x24ae <__fp_splitA>
    24cc:	08 c0       	rjmp	.+16     	; 0x24de <__fp_splitA+0x30>
    24ce:	16 16       	cp	r1, r22
    24d0:	17 06       	cpc	r1, r23
    24d2:	18 06       	cpc	r1, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	f1 cf       	rjmp	.-30     	; 0x24ba <__fp_splitA+0xc>
    24d8:	86 95       	lsr	r24
    24da:	71 05       	cpc	r23, r1
    24dc:	61 05       	cpc	r22, r1
    24de:	08 94       	sec
    24e0:	08 95       	ret

000024e2 <__fp_zero>:
    24e2:	e8 94       	clt

000024e4 <__fp_szero>:
    24e4:	bb 27       	eor	r27, r27
    24e6:	66 27       	eor	r22, r22
    24e8:	77 27       	eor	r23, r23
    24ea:	cb 01       	movw	r24, r22
    24ec:	97 f9       	bld	r25, 7
    24ee:	08 95       	ret

000024f0 <__gesf2>:
    24f0:	0e 94 2b 12 	call	0x2456	; 0x2456 <__fp_cmp>
    24f4:	08 f4       	brcc	.+2      	; 0x24f8 <__gesf2+0x8>
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
    24f8:	08 95       	ret

000024fa <__mulsf3>:
    24fa:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3x>
    24fe:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    2502:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    2506:	38 f0       	brcs	.+14     	; 0x2516 <__mulsf3+0x1c>
    2508:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    250c:	20 f0       	brcs	.+8      	; 0x2516 <__mulsf3+0x1c>
    250e:	95 23       	and	r25, r21
    2510:	11 f0       	breq	.+4      	; 0x2516 <__mulsf3+0x1c>
    2512:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    2516:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>
    251a:	11 24       	eor	r1, r1
    251c:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_szero>

00002520 <__mulsf3x>:
    2520:	0e 94 4f 12 	call	0x249e	; 0x249e <__fp_split3>
    2524:	70 f3       	brcs	.-36     	; 0x2502 <__mulsf3+0x8>

00002526 <__mulsf3_pse>:
    2526:	95 9f       	mul	r25, r21
    2528:	c1 f3       	breq	.-16     	; 0x251a <__mulsf3+0x20>
    252a:	95 0f       	add	r25, r21
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	55 1f       	adc	r21, r21
    2530:	62 9f       	mul	r22, r18
    2532:	f0 01       	movw	r30, r0
    2534:	72 9f       	mul	r23, r18
    2536:	bb 27       	eor	r27, r27
    2538:	f0 0d       	add	r31, r0
    253a:	b1 1d       	adc	r27, r1
    253c:	63 9f       	mul	r22, r19
    253e:	aa 27       	eor	r26, r26
    2540:	f0 0d       	add	r31, r0
    2542:	b1 1d       	adc	r27, r1
    2544:	aa 1f       	adc	r26, r26
    2546:	64 9f       	mul	r22, r20
    2548:	66 27       	eor	r22, r22
    254a:	b0 0d       	add	r27, r0
    254c:	a1 1d       	adc	r26, r1
    254e:	66 1f       	adc	r22, r22
    2550:	82 9f       	mul	r24, r18
    2552:	22 27       	eor	r18, r18
    2554:	b0 0d       	add	r27, r0
    2556:	a1 1d       	adc	r26, r1
    2558:	62 1f       	adc	r22, r18
    255a:	73 9f       	mul	r23, r19
    255c:	b0 0d       	add	r27, r0
    255e:	a1 1d       	adc	r26, r1
    2560:	62 1f       	adc	r22, r18
    2562:	83 9f       	mul	r24, r19
    2564:	a0 0d       	add	r26, r0
    2566:	61 1d       	adc	r22, r1
    2568:	22 1f       	adc	r18, r18
    256a:	74 9f       	mul	r23, r20
    256c:	33 27       	eor	r19, r19
    256e:	a0 0d       	add	r26, r0
    2570:	61 1d       	adc	r22, r1
    2572:	23 1f       	adc	r18, r19
    2574:	84 9f       	mul	r24, r20
    2576:	60 0d       	add	r22, r0
    2578:	21 1d       	adc	r18, r1
    257a:	82 2f       	mov	r24, r18
    257c:	76 2f       	mov	r23, r22
    257e:	6a 2f       	mov	r22, r26
    2580:	11 24       	eor	r1, r1
    2582:	9f 57       	subi	r25, 0x7F	; 127
    2584:	50 40       	sbci	r21, 0x00	; 0
    2586:	9a f0       	brmi	.+38     	; 0x25ae <__mulsf3_pse+0x88>
    2588:	f1 f0       	breq	.+60     	; 0x25c6 <__mulsf3_pse+0xa0>
    258a:	88 23       	and	r24, r24
    258c:	4a f0       	brmi	.+18     	; 0x25a0 <__mulsf3_pse+0x7a>
    258e:	ee 0f       	add	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	bb 1f       	adc	r27, r27
    2594:	66 1f       	adc	r22, r22
    2596:	77 1f       	adc	r23, r23
    2598:	88 1f       	adc	r24, r24
    259a:	91 50       	subi	r25, 0x01	; 1
    259c:	50 40       	sbci	r21, 0x00	; 0
    259e:	a9 f7       	brne	.-22     	; 0x258a <__mulsf3_pse+0x64>
    25a0:	9e 3f       	cpi	r25, 0xFE	; 254
    25a2:	51 05       	cpc	r21, r1
    25a4:	80 f0       	brcs	.+32     	; 0x25c6 <__mulsf3_pse+0xa0>
    25a6:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    25aa:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_szero>
    25ae:	5f 3f       	cpi	r21, 0xFF	; 255
    25b0:	e4 f3       	brlt	.-8      	; 0x25aa <__mulsf3_pse+0x84>
    25b2:	98 3e       	cpi	r25, 0xE8	; 232
    25b4:	d4 f3       	brlt	.-12     	; 0x25aa <__mulsf3_pse+0x84>
    25b6:	86 95       	lsr	r24
    25b8:	77 95       	ror	r23
    25ba:	67 95       	ror	r22
    25bc:	b7 95       	ror	r27
    25be:	f7 95       	ror	r31
    25c0:	e7 95       	ror	r30
    25c2:	9f 5f       	subi	r25, 0xFF	; 255
    25c4:	c1 f7       	brne	.-16     	; 0x25b6 <__mulsf3_pse+0x90>
    25c6:	fe 2b       	or	r31, r30
    25c8:	88 0f       	add	r24, r24
    25ca:	91 1d       	adc	r25, r1
    25cc:	96 95       	lsr	r25
    25ce:	87 95       	ror	r24
    25d0:	97 f9       	bld	r25, 7
    25d2:	08 95       	ret

000025d4 <__fp_inf>:
    25d4:	97 f9       	bld	r25, 7
    25d6:	9f 67       	ori	r25, 0x7F	; 127
    25d8:	80 e8       	ldi	r24, 0x80	; 128
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	08 95       	ret

000025e0 <__fp_nan>:
    25e0:	9f ef       	ldi	r25, 0xFF	; 255
    25e2:	80 ec       	ldi	r24, 0xC0	; 192
    25e4:	08 95       	ret

000025e6 <__fp_pscA>:
    25e6:	00 24       	eor	r0, r0
    25e8:	0a 94       	dec	r0
    25ea:	16 16       	cp	r1, r22
    25ec:	17 06       	cpc	r1, r23
    25ee:	18 06       	cpc	r1, r24
    25f0:	09 06       	cpc	r0, r25
    25f2:	08 95       	ret

000025f4 <__fp_pscB>:
    25f4:	00 24       	eor	r0, r0
    25f6:	0a 94       	dec	r0
    25f8:	12 16       	cp	r1, r18
    25fa:	13 06       	cpc	r1, r19
    25fc:	14 06       	cpc	r1, r20
    25fe:	05 06       	cpc	r0, r21
    2600:	08 95       	ret

00002602 <__fp_round>:
    2602:	09 2e       	mov	r0, r25
    2604:	03 94       	inc	r0
    2606:	00 0c       	add	r0, r0
    2608:	11 f4       	brne	.+4      	; 0x260e <__fp_round+0xc>
    260a:	88 23       	and	r24, r24
    260c:	52 f0       	brmi	.+20     	; 0x2622 <__fp_round+0x20>
    260e:	bb 0f       	add	r27, r27
    2610:	40 f4       	brcc	.+16     	; 0x2622 <__fp_round+0x20>
    2612:	bf 2b       	or	r27, r31
    2614:	11 f4       	brne	.+4      	; 0x261a <__fp_round+0x18>
    2616:	60 ff       	sbrs	r22, 0
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <__fp_round+0x20>
    261a:	6f 5f       	subi	r22, 0xFF	; 255
    261c:	7f 4f       	sbci	r23, 0xFF	; 255
    261e:	8f 4f       	sbci	r24, 0xFF	; 255
    2620:	9f 4f       	sbci	r25, 0xFF	; 255
    2622:	08 95       	ret

00002624 <_exit>:
    2624:	f8 94       	cli

00002626 <__stop_program>:
    2626:	ff cf       	rjmp	.-2      	; 0x2626 <__stop_program>
