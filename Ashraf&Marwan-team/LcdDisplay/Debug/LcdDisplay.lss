
LcdDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00000cba  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c03  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000755  00000000  00000000  00002b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af1  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00003d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ab  00000000  00000000  00003f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a33  00000000  00000000  000043cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00004e02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	73 04       	cpc	r7, r3
  56:	b5 04       	cpc	r11, r5
  58:	e4 04       	cpc	r14, r4
  5a:	13 05       	cpc	r17, r3
  5c:	43 05       	cpc	r20, r3
  5e:	71 05       	cpc	r23, r1
  60:	fd 05       	cpc	r31, r13
  62:	9f 05       	cpc	r25, r15
  64:	ce 05       	cpc	r28, r14

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea eb       	ldi	r30, 0xBA	; 186
  7a:	fc e0       	ldi	r31, 0x0C	; 12
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	ac 33       	cpi	r26, 0x3C	; 60
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>
  88:	0e 94 66 03 	call	0x6cc	; 0x6cc <main>
  8c:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <DIO_WritePin>:
/* O/p : nothing */
/* Return : void */
/* Function that write to DIO pin */
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
	if(PinValue == 1)
  94:	61 30       	cpi	r22, 0x01	; 1
  96:	09 f0       	breq	.+2      	; 0x9a <DIO_WritePin+0x6>
  98:	43 c0       	rjmp	.+134    	; 0x120 <DIO_WritePin+0x8c>
	{
		if(PinNum >= 0 && PinNum<=7)
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	68 f4       	brcc	.+26     	; 0xb8 <DIO_WritePin+0x24>
		{
			Set_Bit(PORTA,PinNum);
  9e:	4b b3       	in	r20, 0x1b	; 27
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	b9 01       	movw	r22, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_WritePin+0x18>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <DIO_WritePin+0x14>
  b0:	cb 01       	movw	r24, r22
  b2:	84 2b       	or	r24, r20
  b4:	8b bb       	out	0x1b, r24	; 27
  b6:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
  b8:	98 ef       	ldi	r25, 0xF8	; 248
  ba:	98 0f       	add	r25, r24
  bc:	98 30       	cpi	r25, 0x08	; 8
  be:	68 f4       	brcc	.+26     	; 0xda <DIO_WritePin+0x46>
		{
			Set_Bit(PORTB,(PinNum-8));
  c0:	48 b3       	in	r20, 0x18	; 24
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	b9 01       	movw	r22, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_WritePin+0x3a>
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	9a 95       	dec	r25
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_WritePin+0x36>
  d2:	cb 01       	movw	r24, r22
  d4:	84 2b       	or	r24, r20
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
  da:	90 ef       	ldi	r25, 0xF0	; 240
  dc:	98 0f       	add	r25, r24
  de:	98 30       	cpi	r25, 0x08	; 8
  e0:	68 f4       	brcc	.+26     	; 0xfc <DIO_WritePin+0x68>
		{
			Set_Bit(PORTC,(PinNum-16));
  e2:	45 b3       	in	r20, 0x15	; 21
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_WritePin+0x5c>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	9a 95       	dec	r25
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_WritePin+0x58>
  f4:	cb 01       	movw	r24, r22
  f6:	84 2b       	or	r24, r20
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
  fc:	98 ee       	ldi	r25, 0xE8	; 232
  fe:	98 0f       	add	r25, r24
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	08 f0       	brcs	.+2      	; 0x106 <DIO_WritePin+0x72>
 104:	54 c0       	rjmp	.+168    	; 0x1ae <DIO_WritePin+0x11a>
		{
			Set_Bit(PORTD,(PinNum-24));
 106:	42 b3       	in	r20, 0x12	; 18
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_WritePin+0x80>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	9a 95       	dec	r25
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_WritePin+0x7c>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	08 95       	ret
		}
		else;
	}
	else if(PinValue == 0)
 120:	61 11       	cpse	r22, r1
 122:	45 c0       	rjmp	.+138    	; 0x1ae <DIO_WritePin+0x11a>
	{
		if(PinNum >= 0 && PinNum<=7)
 124:	88 30       	cpi	r24, 0x08	; 8
 126:	70 f4       	brcc	.+28     	; 0x144 <DIO_WritePin+0xb0>
		{
			Clear_Bit(PORTA,PinNum);
 128:	4b b3       	in	r20, 0x1b	; 27
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	b9 01       	movw	r22, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_WritePin+0xa2>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_WritePin+0x9e>
 13a:	cb 01       	movw	r24, r22
 13c:	80 95       	com	r24
 13e:	84 23       	and	r24, r20
 140:	8b bb       	out	0x1b, r24	; 27
 142:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
 144:	98 ef       	ldi	r25, 0xF8	; 248
 146:	98 0f       	add	r25, r24
 148:	98 30       	cpi	r25, 0x08	; 8
 14a:	70 f4       	brcc	.+28     	; 0x168 <DIO_WritePin+0xd4>
		{
			Clear_Bit(PORTB,(PinNum-8));
 14c:	48 b3       	in	r20, 0x18	; 24
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_WritePin+0xc6>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	9a 95       	dec	r25
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_WritePin+0xc2>
 15e:	cb 01       	movw	r24, r22
 160:	80 95       	com	r24
 162:	84 23       	and	r24, r20
 164:	88 bb       	out	0x18, r24	; 24
 166:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
 168:	90 ef       	ldi	r25, 0xF0	; 240
 16a:	98 0f       	add	r25, r24
 16c:	98 30       	cpi	r25, 0x08	; 8
 16e:	70 f4       	brcc	.+28     	; 0x18c <DIO_WritePin+0xf8>
		{
			Clear_Bit(PORTC,(PinNum-16));
 170:	45 b3       	in	r20, 0x15	; 21
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_WritePin+0xea>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	9a 95       	dec	r25
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_WritePin+0xe6>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	85 bb       	out	0x15, r24	; 21
 18a:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
 18c:	98 ee       	ldi	r25, 0xE8	; 232
 18e:	98 0f       	add	r25, r24
 190:	98 30       	cpi	r25, 0x08	; 8
 192:	68 f4       	brcc	.+26     	; 0x1ae <DIO_WritePin+0x11a>
		{
			Clear_Bit(PORTD,(PinNum-24));
 194:	42 b3       	in	r20, 0x12	; 18
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_WritePin+0x10e>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	9a 95       	dec	r25
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_WritePin+0x10a>
 1a6:	cb 01       	movw	r24, r22
 1a8:	80 95       	com	r24
 1aa:	84 23       	and	r24, r20
 1ac:	82 bb       	out	0x12, r24	; 18
 1ae:	08 95       	ret

000001b0 <DIO_ReadPin>:
/* Return : unint8 */
/* Function that read value of DIO pin */
uint8 DIO_ReadPin(uint8 PinNum)
{
	uint8 Pin =0;
	if(PinNum >= 0 && PinNum<=7)
 1b0:	88 30       	cpi	r24, 0x08	; 8
 1b2:	a0 f4       	brcc	.+40     	; 0x1dc <DIO_ReadPin+0x2c>
	{
		Pin = Get_Bit(PINA,PinNum);
 1b4:	49 b3       	in	r20, 0x19	; 25
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	08 2e       	mov	r0, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_ReadPin+0x12>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_ReadPin+0xe>
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	24 23       	and	r18, r20
 1ca:	35 23       	and	r19, r21
 1cc:	a9 01       	movw	r20, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_ReadPin+0x24>
 1d0:	55 95       	asr	r21
 1d2:	47 95       	ror	r20
 1d4:	8a 95       	dec	r24
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_ReadPin+0x20>
 1d8:	ca 01       	movw	r24, r20
 1da:	08 95       	ret
	}
	else if(PinNum > 7 && PinNum <= 15)
 1dc:	98 ef       	ldi	r25, 0xF8	; 248
 1de:	98 0f       	add	r25, r24
 1e0:	98 30       	cpi	r25, 0x08	; 8
 1e2:	b0 f4       	brcc	.+44     	; 0x210 <DIO_ReadPin+0x60>
	{
		Pin = Get_Bit(PINB,(PinNum-8));
 1e4:	26 b3       	in	r18, 0x16	; 22
 1e6:	48 2f       	mov	r20, r24
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	48 50       	subi	r20, 0x08	; 8
 1ec:	51 09       	sbc	r21, r1
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	04 2e       	mov	r0, r20
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_ReadPin+0x4a>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_ReadPin+0x46>
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	82 23       	and	r24, r18
 202:	93 23       	and	r25, r19
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_ReadPin+0x5a>
 206:	95 95       	asr	r25
 208:	87 95       	ror	r24
 20a:	4a 95       	dec	r20
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_ReadPin+0x56>
 20e:	08 95       	ret
	}
	else if(PinNum > 15 && PinNum <= 23 )
 210:	90 ef       	ldi	r25, 0xF0	; 240
 212:	98 0f       	add	r25, r24
 214:	98 30       	cpi	r25, 0x08	; 8
 216:	b0 f4       	brcc	.+44     	; 0x244 <DIO_ReadPin+0x94>
	{
		Pin = Get_Bit(PINC,(PinNum-16));
 218:	23 b3       	in	r18, 0x13	; 19
 21a:	48 2f       	mov	r20, r24
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	40 51       	subi	r20, 0x10	; 16
 220:	51 09       	sbc	r21, r1
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	04 2e       	mov	r0, r20
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_ReadPin+0x7e>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_ReadPin+0x7a>
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	82 23       	and	r24, r18
 236:	93 23       	and	r25, r19
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_ReadPin+0x8e>
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	4a 95       	dec	r20
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_ReadPin+0x8a>
 242:	08 95       	ret
	}
	else if(PinNum > 23 && PinNum<= 31)
 244:	98 ee       	ldi	r25, 0xE8	; 232
 246:	98 0f       	add	r25, r24
 248:	98 30       	cpi	r25, 0x08	; 8
 24a:	b0 f4       	brcc	.+44     	; 0x278 <DIO_ReadPin+0xc8>
	{
		Pin = Get_Bit(PIND,(PinNum-24));
 24c:	20 b3       	in	r18, 0x10	; 16
 24e:	48 2f       	mov	r20, r24
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	48 51       	subi	r20, 0x18	; 24
 254:	51 09       	sbc	r21, r1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	04 2e       	mov	r0, r20
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_ReadPin+0xb2>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_ReadPin+0xae>
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	82 23       	and	r24, r18
 26a:	93 23       	and	r25, r19
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_ReadPin+0xc2>
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	4a 95       	dec	r20
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_ReadPin+0xbe>
 276:	08 95       	ret
/* O/p : Value of pin */
/* Return : unint8 */
/* Function that read value of DIO pin */
uint8 DIO_ReadPin(uint8 PinNum)
{
	uint8 Pin =0;
 278:	80 e0       	ldi	r24, 0x00	; 0
	{
		Pin = Get_Bit(PIND,(PinNum-24));
	}
	else;
	return Pin ;
}
 27a:	08 95       	ret

0000027c <DIO_SetPinDirection>:
/* O/p : nothing */
/* Return : void */
/* Function that Sets direction of DIO pin */
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if(PinDirection == 1)
 27c:	61 30       	cpi	r22, 0x01	; 1
 27e:	09 f0       	breq	.+2      	; 0x282 <DIO_SetPinDirection+0x6>
 280:	43 c0       	rjmp	.+134    	; 0x308 <DIO_SetPinDirection+0x8c>
	{
		if(PinNum >= 0 && PinNum<=7)
 282:	88 30       	cpi	r24, 0x08	; 8
 284:	68 f4       	brcc	.+26     	; 0x2a0 <DIO_SetPinDirection+0x24>
		{
			Set_Bit(DDRA,PinNum);
 286:	4a b3       	in	r20, 0x1a	; 26
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	b9 01       	movw	r22, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_SetPinDirection+0x18>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	8a 95       	dec	r24
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_SetPinDirection+0x14>
 298:	cb 01       	movw	r24, r22
 29a:	84 2b       	or	r24, r20
 29c:	8a bb       	out	0x1a, r24	; 26
 29e:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
 2a0:	98 ef       	ldi	r25, 0xF8	; 248
 2a2:	98 0f       	add	r25, r24
 2a4:	98 30       	cpi	r25, 0x08	; 8
 2a6:	68 f4       	brcc	.+26     	; 0x2c2 <DIO_SetPinDirection+0x46>
		{
			Set_Bit(DDRB,(PinNum-8));
 2a8:	47 b3       	in	r20, 0x17	; 23
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	b9 01       	movw	r22, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_SetPinDirection+0x3a>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	9a 95       	dec	r25
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_SetPinDirection+0x36>
 2ba:	cb 01       	movw	r24, r22
 2bc:	84 2b       	or	r24, r20
 2be:	87 bb       	out	0x17, r24	; 23
 2c0:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
 2c2:	90 ef       	ldi	r25, 0xF0	; 240
 2c4:	98 0f       	add	r25, r24
 2c6:	98 30       	cpi	r25, 0x08	; 8
 2c8:	68 f4       	brcc	.+26     	; 0x2e4 <DIO_SetPinDirection+0x68>
		{
			Set_Bit(DDRC,(PinNum-16));
 2ca:	44 b3       	in	r20, 0x14	; 20
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	b9 01       	movw	r22, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_SetPinDirection+0x5c>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	9a 95       	dec	r25
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_SetPinDirection+0x58>
 2dc:	cb 01       	movw	r24, r22
 2de:	84 2b       	or	r24, r20
 2e0:	84 bb       	out	0x14, r24	; 20
 2e2:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
 2e4:	98 ee       	ldi	r25, 0xE8	; 232
 2e6:	98 0f       	add	r25, r24
 2e8:	98 30       	cpi	r25, 0x08	; 8
 2ea:	08 f0       	brcs	.+2      	; 0x2ee <DIO_SetPinDirection+0x72>
 2ec:	54 c0       	rjmp	.+168    	; 0x396 <DIO_SetPinDirection+0x11a>
		{
			Set_Bit(DDRD,(PinNum-24));
 2ee:	41 b3       	in	r20, 0x11	; 17
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	b9 01       	movw	r22, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_SetPinDirection+0x80>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	9a 95       	dec	r25
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_SetPinDirection+0x7c>
 300:	cb 01       	movw	r24, r22
 302:	84 2b       	or	r24, r20
 304:	81 bb       	out	0x11, r24	; 17
 306:	08 95       	ret
		}
		else;
	}
	else if(PinDirection == 0)
 308:	61 11       	cpse	r22, r1
 30a:	45 c0       	rjmp	.+138    	; 0x396 <DIO_SetPinDirection+0x11a>
	{
		if(PinNum >= 0 && PinNum<=7)
 30c:	88 30       	cpi	r24, 0x08	; 8
 30e:	70 f4       	brcc	.+28     	; 0x32c <DIO_SetPinDirection+0xb0>
		{
			Clear_Bit(DDRA,PinNum);
 310:	4a b3       	in	r20, 0x1a	; 26
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_SetPinDirection+0xa2>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_SetPinDirection+0x9e>
 322:	cb 01       	movw	r24, r22
 324:	80 95       	com	r24
 326:	84 23       	and	r24, r20
 328:	8a bb       	out	0x1a, r24	; 26
 32a:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
 32c:	98 ef       	ldi	r25, 0xF8	; 248
 32e:	98 0f       	add	r25, r24
 330:	98 30       	cpi	r25, 0x08	; 8
 332:	70 f4       	brcc	.+28     	; 0x350 <DIO_SetPinDirection+0xd4>
		{
			Clear_Bit(DDRB,(PinNum-8));
 334:	47 b3       	in	r20, 0x17	; 23
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_SetPinDirection+0xc6>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	9a 95       	dec	r25
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_SetPinDirection+0xc2>
 346:	cb 01       	movw	r24, r22
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	87 bb       	out	0x17, r24	; 23
 34e:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
 350:	90 ef       	ldi	r25, 0xF0	; 240
 352:	98 0f       	add	r25, r24
 354:	98 30       	cpi	r25, 0x08	; 8
 356:	70 f4       	brcc	.+28     	; 0x374 <DIO_SetPinDirection+0xf8>
		{
			Clear_Bit(DDRC,(PinNum-16));
 358:	44 b3       	in	r20, 0x14	; 20
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_SetPinDirection+0xea>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	9a 95       	dec	r25
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_SetPinDirection+0xe6>
 36a:	cb 01       	movw	r24, r22
 36c:	80 95       	com	r24
 36e:	84 23       	and	r24, r20
 370:	84 bb       	out	0x14, r24	; 20
 372:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
 374:	98 ee       	ldi	r25, 0xE8	; 232
 376:	98 0f       	add	r25, r24
 378:	98 30       	cpi	r25, 0x08	; 8
 37a:	68 f4       	brcc	.+26     	; 0x396 <DIO_SetPinDirection+0x11a>
		{
			Clear_Bit(DDRD,(PinNum-24));
 37c:	41 b3       	in	r20, 0x11	; 17
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_SetPinDirection+0x10e>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	9a 95       	dec	r25
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_SetPinDirection+0x10a>
 38e:	cb 01       	movw	r24, r22
 390:	80 95       	com	r24
 392:	84 23       	and	r24, r20
 394:	81 bb       	out	0x11, r24	; 17
 396:	08 95       	ret

00000398 <LCD_sendCommand>:
void LCD_sendString_RowCol(uint8 *str , uint8 row , uint8 col)
{
	LCD_gotoRowColumn(row,col);
	timer_delay(DELAY_10_MS);
	LCD_displayString(str);
}
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	c8 2f       	mov	r28, r24
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 3c2:	c4 fb       	bst	r28, 4
 3c4:	66 27       	eor	r22, r22
 3c6:	60 f9       	bld	r22, 0
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 3ce:	c5 fb       	bst	r28, 5
 3d0:	66 27       	eor	r22, r22
 3d2:	60 f9       	bld	r22, 0
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 3da:	c6 fb       	bst	r28, 6
 3dc:	66 27       	eor	r22, r22
 3de:	60 f9       	bld	r22, 0
 3e0:	86 e0       	ldi	r24, 0x06	; 6
 3e2:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 3e6:	6c 2f       	mov	r22, r28
 3e8:	66 1f       	adc	r22, r22
 3ea:	66 27       	eor	r22, r22
 3ec:	66 1f       	adc	r22, r22
 3ee:	87 e0       	ldi	r24, 0x07	; 7
 3f0:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 438:	80 e1       	ldi	r24, 0x10	; 16
 43a:	c8 9f       	mul	r28, r24
 43c:	e0 01       	movw	r28, r0
 43e:	11 24       	eor	r1, r1
 440:	6c 2f       	mov	r22, r28
 442:	62 95       	swap	r22
 444:	61 70       	andi	r22, 0x01	; 1
 446:	84 e0       	ldi	r24, 0x04	; 4
 448:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 44c:	c5 fb       	bst	r28, 5
 44e:	66 27       	eor	r22, r22
 450:	60 f9       	bld	r22, 0
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 458:	c6 fb       	bst	r28, 6
 45a:	66 27       	eor	r22, r22
 45c:	60 f9       	bld	r22, 0
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 464:	6c 2f       	mov	r22, r28
 466:	66 1f       	adc	r22, r22
 468:	66 27       	eor	r22, r22
 46a:	66 1f       	adc	r22, r22
 46c:	87 e0       	ldi	r24, 0x07	; 7
 46e:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <LCD_init>:
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	84 e0       	ldi	r24, 0x04	; 4
 4e4:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	85 e0       	ldi	r24, 0x05	; 5
 4ec:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	86 e0       	ldi	r24, 0x06	; 6
 4f4:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
 500:	83 e3       	ldi	r24, 0x33	; 51
 502:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 506:	82 e3       	ldi	r24, 0x32	; 50
 508:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 50c:	88 e2       	ldi	r24, 0x28	; 40
 50e:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 518:	8e e0       	ldi	r24, 0x0E	; 14
 51a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 51e:	80 e8       	ldi	r24, 0x80	; 128
 520:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 524:	86 e0       	ldi	r24, 0x06	; 6
 526:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 52a:	8c e0       	ldi	r24, 0x0C	; 12
 52c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 530:	08 95       	ret

00000532 <LCD_displayChar>:
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	c8 2f       	mov	r28, r24
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 55c:	c4 fb       	bst	r28, 4
 55e:	66 27       	eor	r22, r22
 560:	60 f9       	bld	r22, 0
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 568:	c5 fb       	bst	r28, 5
 56a:	66 27       	eor	r22, r22
 56c:	60 f9       	bld	r22, 0
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 574:	c6 fb       	bst	r28, 6
 576:	66 27       	eor	r22, r22
 578:	60 f9       	bld	r22, 0
 57a:	86 e0       	ldi	r24, 0x06	; 6
 57c:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 580:	6c 2f       	mov	r22, r28
 582:	66 1f       	adc	r22, r22
 584:	66 27       	eor	r22, r22
 586:	66 1f       	adc	r22, r22
 588:	87 e0       	ldi	r24, 0x07	; 7
 58a:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 5c2:	80 e1       	ldi	r24, 0x10	; 16
 5c4:	c8 9f       	mul	r28, r24
 5c6:	e0 01       	movw	r28, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	6c 2f       	mov	r22, r28
 5cc:	62 95       	swap	r22
 5ce:	61 70       	andi	r22, 0x01	; 1
 5d0:	84 e0       	ldi	r24, 0x04	; 4
 5d2:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 5d6:	c5 fb       	bst	r28, 5
 5d8:	66 27       	eor	r22, r22
 5da:	60 f9       	bld	r22, 0
 5dc:	85 e0       	ldi	r24, 0x05	; 5
 5de:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 5e2:	c6 fb       	bst	r28, 6
 5e4:	66 27       	eor	r22, r22
 5e6:	60 f9       	bld	r22, 0
 5e8:	86 e0       	ldi	r24, 0x06	; 6
 5ea:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 5ee:	6c 2f       	mov	r22, r28
 5f0:	66 1f       	adc	r22, r22
 5f2:	66 27       	eor	r22, r22
 5f4:	66 1f       	adc	r22, r22
 5f6:	87 e0       	ldi	r24, 0x07	; 7
 5f8:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	83 e0       	ldi	r24, 0x03	; 3
 620:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_WritePin>
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <LCD_displayString>:
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	8c 01       	movw	r16, r24
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0
 644:	09 c0       	rjmp	.+18     	; 0x658 <LCD_displayString+0x22>
 646:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
 64a:	21 96       	adiw	r28, 0x01	; 1
 64c:	c0 31       	cpi	r28, 0x10	; 16
 64e:	d1 05       	cpc	r29, r1
 650:	19 f4       	brne	.+6      	; 0x658 <LCD_displayString+0x22>
 652:	84 e1       	ldi	r24, 0x14	; 20
 654:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 658:	f8 01       	movw	r30, r16
 65a:	81 91       	ld	r24, Z+
 65c:	8f 01       	movw	r16, r30
 65e:	81 11       	cpse	r24, r1
 660:	f2 cf       	rjmp	.-28     	; 0x646 <LCD_displayString+0x10>
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	08 95       	ret

0000066c <LCD_gotoRowColumn>:
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	29 f4       	brne	.+10     	; 0x67a <LCD_gotoRowColumn+0xe>
 670:	8f e7       	ldi	r24, 0x7F	; 127
 672:	86 0f       	add	r24, r22
 674:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 678:	08 95       	ret
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	21 f4       	brne	.+8      	; 0x686 <LCD_gotoRowColumn+0x1a>
 67e:	8f eb       	ldi	r24, 0xBF	; 191
 680:	86 0f       	add	r24, r22
 682:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 686:	08 95       	ret

00000688 <LCD_clear>:

void LCD_clear(void)
{
	LCD_sendCommand(LCD_CMD_CLR);
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
	LCD_sendCommand (LCD_CMD_CURSOR_1ST_LINE);
 68e:	80 e8       	ldi	r24, 0x80	; 128
 690:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 694:	08 95       	ret

00000696 <LCD_Custom_Char>:
}

void LCD_Custom_Char (uint8 loc, uint8 *msg)
{
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
	uint8 i;
	if(loc<8)
 69e:	88 30       	cpi	r24, 0x08	; 8
 6a0:	80 f4       	brcc	.+32     	; 0x6c2 <LCD_Custom_Char+0x2c>
 6a2:	8b 01       	movw	r16, r22
	{
		LCD_sendCommand (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 6a4:	88 0f       	add	r24, r24
 6a6:	88 0f       	add	r24, r24
 6a8:	88 0f       	add	r24, r24
 6aa:	80 5c       	subi	r24, 0xC0	; 192
 6ac:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
 6b0:	e8 01       	movw	r28, r16
 6b2:	08 5f       	subi	r16, 0xF8	; 248
 6b4:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_displayChar(msg[i]);
 6b6:	89 91       	ld	r24, Y+
 6b8:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
{
	uint8 i;
	if(loc<8)
	{
		LCD_sendCommand (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 6bc:	c0 17       	cp	r28, r16
 6be:	d1 07       	cpc	r29, r17
 6c0:	d1 f7       	brne	.-12     	; 0x6b6 <LCD_Custom_Char+0x20>
		LCD_displayChar(msg[i]);
	}
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	08 95       	ret

000006cc <main>:




int main(void)
{
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	c7 5c       	subi	r28, 0xC7	; 199
 6d6:	d1 09       	sbc	r29, r1
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	f8 94       	cli
 6dc:	de bf       	out	0x3e, r29	; 62
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	cd bf       	out	0x3d, r28	; 61
    /* Variables */
	uint8 msg0[]={"WELCOME"};
 6e2:	88 e0       	ldi	r24, 0x08	; 8
 6e4:	ed ea       	ldi	r30, 0xAD	; 173
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	de 01       	movw	r26, r28
 6ea:	11 96       	adiw	r26, 0x01	; 1
 6ec:	01 90       	ld	r0, Z+
 6ee:	0d 92       	st	X+, r0
 6f0:	8a 95       	dec	r24
 6f2:	e1 f7       	brne	.-8      	; 0x6ec <main+0x20>
	uint8 msg01[]={"-WELCOME-"};
 6f4:	8a e0       	ldi	r24, 0x0A	; 10
 6f6:	e5 eb       	ldi	r30, 0xB5	; 181
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	de 01       	movw	r26, r28
 6fc:	19 96       	adiw	r26, 0x09	; 9
 6fe:	01 90       	ld	r0, Z+
 700:	0d 92       	st	X+, r0
 702:	8a 95       	dec	r24
 704:	e1 f7       	brne	.-8      	; 0x6fe <main+0x32>
	uint8 msg02[]={"--WELCOME--"};
 706:	8c e0       	ldi	r24, 0x0C	; 12
 708:	ef eb       	ldi	r30, 0xBF	; 191
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	de 01       	movw	r26, r28
 70e:	53 96       	adiw	r26, 0x13	; 19
 710:	01 90       	ld	r0, Z+
 712:	0d 92       	st	X+, r0
 714:	8a 95       	dec	r24
 716:	e1 f7       	brne	.-8      	; 0x710 <main+0x44>
	uint8 msg03[]={"---WELCOME---"};
 718:	8e e0       	ldi	r24, 0x0E	; 14
 71a:	eb ec       	ldi	r30, 0xCB	; 203
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	de 01       	movw	r26, r28
 720:	5f 96       	adiw	r26, 0x1f	; 31
 722:	01 90       	ld	r0, Z+
 724:	0d 92       	st	X+, r0
 726:	8a 95       	dec	r24
 728:	e1 f7       	brne	.-8      	; 0x722 <main+0x56>
	uint8 Ques1[]={"Is Nile 6685 km?"};  //wrong 
 72a:	81 e1       	ldi	r24, 0x11	; 17
 72c:	e9 ed       	ldi	r30, 0xD9	; 217
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	de 01       	movw	r26, r28
 732:	9d 96       	adiw	r26, 0x2d	; 45
 734:	01 90       	ld	r0, Z+
 736:	0d 92       	st	X+, r0
 738:	8a 95       	dec	r24
 73a:	e1 f7       	brne	.-8      	; 0x734 <main+0x68>
	uint8 Ques2[]={"Hitler died 30-6"};  //wrong
 73c:	81 e1       	ldi	r24, 0x11	; 17
 73e:	ea ee       	ldi	r30, 0xEA	; 234
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	de 01       	movw	r26, r28
 744:	de 96       	adiw	r26, 0x3e	; 62
 746:	01 90       	ld	r0, Z+
 748:	0d 92       	st	X+, r0
 74a:	8a 95       	dec	r24
 74c:	e1 f7       	brne	.-8      	; 0x746 <main+0x7a>
	uint8 Ques3[]={"ManUtd est. 1878"};  //yes
 74e:	81 e1       	ldi	r24, 0x11	; 17
 750:	eb ef       	ldi	r30, 0xFB	; 251
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	de 01       	movw	r26, r28
 756:	a1 5b       	subi	r26, 0xB1	; 177
 758:	bf 4f       	sbci	r27, 0xFF	; 255
 75a:	01 90       	ld	r0, Z+
 75c:	0d 92       	st	X+, r0
 75e:	8a 95       	dec	r24
 760:	e1 f7       	brne	.-8      	; 0x75a <main+0x8e>
	uint8 Ques4[]={"Cr7 35 years ?"};    //wrong
 762:	8f e0       	ldi	r24, 0x0F	; 15
 764:	ec e0       	ldi	r30, 0x0C	; 12
 766:	f1 e0       	ldi	r31, 0x01	; 1
 768:	de 01       	movw	r26, r28
 76a:	a0 5a       	subi	r26, 0xA0	; 160
 76c:	bf 4f       	sbci	r27, 0xFF	; 255
 76e:	01 90       	ld	r0, Z+
 770:	0d 92       	st	X+, r0
 772:	8a 95       	dec	r24
 774:	e1 f7       	brne	.-8      	; 0x76e <main+0xa2>
	uint8 Ques5[]={"BOSCH est. 1886"};   //Yes
 776:	80 e1       	ldi	r24, 0x10	; 16
 778:	eb e1       	ldi	r30, 0x1B	; 27
 77a:	f1 e0       	ldi	r31, 0x01	; 1
 77c:	de 01       	movw	r26, r28
 77e:	a1 59       	subi	r26, 0x91	; 145
 780:	bf 4f       	sbci	r27, 0xFF	; 255
 782:	01 90       	ld	r0, Z+
 784:	0d 92       	st	X+, r0
 786:	8a 95       	dec	r24
 788:	e1 f7       	brne	.-8      	; 0x782 <main+0xb6>
	uint8 Ans1[]={">Yes         >NO"};
 78a:	81 e1       	ldi	r24, 0x11	; 17
 78c:	eb e2       	ldi	r30, 0x2B	; 43
 78e:	f1 e0       	ldi	r31, 0x01	; 1
 790:	de 01       	movw	r26, r28
 792:	a1 58       	subi	r26, 0x81	; 129
 794:	bf 4f       	sbci	r27, 0xFF	; 255
 796:	01 90       	ld	r0, Z+
 798:	0d 92       	st	X+, r0
 79a:	8a 95       	dec	r24
 79c:	e1 f7       	brne	.-8      	; 0x796 <main+0xca>
		
	uint8 Custom1[]={0,0,1,2,4,8,16,16};
 79e:	88 e0       	ldi	r24, 0x08	; 8
 7a0:	e0 e6       	ldi	r30, 0x60	; 96
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	de 01       	movw	r26, r28
 7a6:	a0 57       	subi	r26, 0x70	; 112
 7a8:	bf 4f       	sbci	r27, 0xFF	; 255
 7aa:	01 90       	ld	r0, Z+
 7ac:	0d 92       	st	X+, r0
 7ae:	8a 95       	dec	r24
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <main+0xde>
	uint8 Custom2[]={0,31,0,0,27,0,0,0};
 7b2:	88 e0       	ldi	r24, 0x08	; 8
 7b4:	e8 e6       	ldi	r30, 0x68	; 104
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	de 01       	movw	r26, r28
 7ba:	a8 56       	subi	r26, 0x68	; 104
 7bc:	bf 4f       	sbci	r27, 0xFF	; 255
 7be:	01 90       	ld	r0, Z+
 7c0:	0d 92       	st	X+, r0
 7c2:	8a 95       	dec	r24
 7c4:	e1 f7       	brne	.-8      	; 0x7be <main+0xf2>
	uint8 Custom3[]={0,0,16,8,4,2,1,1};
 7c6:	88 e0       	ldi	r24, 0x08	; 8
 7c8:	e0 e7       	ldi	r30, 0x70	; 112
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	de 01       	movw	r26, r28
 7ce:	a0 56       	subi	r26, 0x60	; 96
 7d0:	bf 4f       	sbci	r27, 0xFF	; 255
 7d2:	01 90       	ld	r0, Z+
 7d4:	0d 92       	st	X+, r0
 7d6:	8a 95       	dec	r24
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <main+0x106>
	uint8 Custom4[]={16,16,8,4,2,1,0,0};
 7da:	88 e0       	ldi	r24, 0x08	; 8
 7dc:	e8 e7       	ldi	r30, 0x78	; 120
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	de 01       	movw	r26, r28
 7e2:	a8 55       	subi	r26, 0x58	; 88
 7e4:	bf 4f       	sbci	r27, 0xFF	; 255
 7e6:	01 90       	ld	r0, Z+
 7e8:	0d 92       	st	X+, r0
 7ea:	8a 95       	dec	r24
 7ec:	e1 f7       	brne	.-8      	; 0x7e6 <main+0x11a>
	uint8 Custom5[]={0,14,17,17,0,0,31,0};
 7ee:	88 e0       	ldi	r24, 0x08	; 8
 7f0:	e0 e8       	ldi	r30, 0x80	; 128
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	de 01       	movw	r26, r28
 7f6:	a0 55       	subi	r26, 0x50	; 80
 7f8:	bf 4f       	sbci	r27, 0xFF	; 255
 7fa:	01 90       	ld	r0, Z+
 7fc:	0d 92       	st	X+, r0
 7fe:	8a 95       	dec	r24
 800:	e1 f7       	brne	.-8      	; 0x7fa <main+0x12e>
	uint8 Custom6[]={1,1,2,4,8,16,0,0};
 802:	88 e0       	ldi	r24, 0x08	; 8
 804:	e8 e8       	ldi	r30, 0x88	; 136
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	de 01       	movw	r26, r28
 80a:	a8 54       	subi	r26, 0x48	; 72
 80c:	bf 4f       	sbci	r27, 0xFF	; 255
 80e:	01 90       	ld	r0, Z+
 810:	0d 92       	st	X+, r0
 812:	8a 95       	dec	r24
 814:	e1 f7       	brne	.-8      	; 0x80e <main+0x142>
	uint8 Custom7[]={0,17,17,14,0,0,31,0};
 816:	88 e0       	ldi	r24, 0x08	; 8
 818:	e0 e9       	ldi	r30, 0x90	; 144
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	de 01       	movw	r26, r28
 81e:	a0 54       	subi	r26, 0x40	; 64
 820:	bf 4f       	sbci	r27, 0xFF	; 255
 822:	01 90       	ld	r0, Z+
 824:	0d 92       	st	X+, r0
 826:	8a 95       	dec	r24
 828:	e1 f7       	brne	.-8      	; 0x822 <main+0x156>
	uint8 ScreenState = 0 , Prev_Screen=1 , Score = 0 ;
	
	
	
	/* Init Push  buttons Ports to input */
	DIO_SetPinDirection(PUSHBTN0 , LOW);
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	84 e1       	ldi	r24, 0x14	; 20
 82e:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
	DIO_SetPinDirection(PUSHBTN1 , LOW);
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	8a e0       	ldi	r24, 0x0A	; 10
 836:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_SetPinDirection>
	
	timer_init();
 83a:	0e 94 2b 06 	call	0xc56	; 0xc56 <timer_init>
	LCD_init();
 83e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_init>
	LCD_clear();
 842:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>

	LCD_Custom_Char(0,Custom1);
 846:	be 01       	movw	r22, r28
 848:	60 57       	subi	r22, 0x70	; 112
 84a:	7f 4f       	sbci	r23, 0xFF	; 255
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Custom_Char>
	LCD_Custom_Char(1,Custom2);
 852:	be 01       	movw	r22, r28
 854:	68 56       	subi	r22, 0x68	; 104
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Custom_Char>
	LCD_Custom_Char(2,Custom3);
 85e:	be 01       	movw	r22, r28
 860:	60 56       	subi	r22, 0x60	; 96
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Custom_Char>
	LCD_Custom_Char(3,Custom4);
 86a:	be 01       	movw	r22, r28
 86c:	68 55       	subi	r22, 0x58	; 88
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	83 e0       	ldi	r24, 0x03	; 3
 872:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Custom_Char>
	LCD_Custom_Char(4,Custom5);
 876:	be 01       	movw	r22, r28
 878:	60 55       	subi	r22, 0x50	; 80
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	84 e0       	ldi	r24, 0x04	; 4
 87e:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Custom_Char>
	LCD_Custom_Char(5,Custom6);
 882:	be 01       	movw	r22, r28
 884:	68 54       	subi	r22, 0x48	; 72
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	85 e0       	ldi	r24, 0x05	; 5
 88a:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Custom_Char>
	LCD_Custom_Char(6,Custom7);
 88e:	be 01       	movw	r22, r28
 890:	60 54       	subi	r22, 0x40	; 64
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	86 e0       	ldi	r24, 0x06	; 6
 896:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Custom_Char>
	uint8 Custom3[]={0,0,16,8,4,2,1,1};
	uint8 Custom4[]={16,16,8,4,2,1,0,0};
	uint8 Custom5[]={0,14,17,17,0,0,31,0};
	uint8 Custom6[]={1,1,2,4,8,16,0,0};
	uint8 Custom7[]={0,17,17,14,0,0,31,0};
	uint8 ScreenState = 0 , Prev_Screen=1 , Score = 0 ;
 89a:	f1 2c       	mov	r15, r1
 89c:	01 e0       	ldi	r16, 0x01	; 1
 89e:	10 e0       	ldi	r17, 0x00	; 0
				LCD_displayString("Again ?");
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
				
				if(DIO_ReadPin(PUSHBTN0))
				{
					ScreenState = SCREEN0;
 8a0:	c1 2c       	mov	r12, r1
					Score++;
				}
				
				if(DIO_ReadPin(PUSHBTN1))
				{
					ScreenState = SCREEN_SAD;
 8a2:	68 94       	set
 8a4:	dd 24       	eor	r13, r13
 8a6:	d3 f8       	bld	r13, 3
				LCD_displayString(Ans1);
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
			
				if(DIO_ReadPin(PUSHBTN0))
				{
					ScreenState = SCREEN_SMILE;
 8a8:	0f 2e       	mov	r0, r31
 8aa:	f7 e0       	ldi	r31, 0x07	; 7
 8ac:	ef 2e       	mov	r14, r31
 8ae:	f0 2d       	mov	r31, r0
 8b0:	10 c0       	rjmp	.+32     	; 0x8d2 <__stack+0x73>
				LCD_displayString(msg03);
				timer_delay(DELAY_1_SEC);
				ScreenState = SCREEN1 ;
				break;
			case SCREEN1 :
				Prev_Screen = SCREEN1 ;
 8b2:	01 2f       	mov	r16, r17
 8b4:	1b 2d       	mov	r17, r11
 8b6:	0d c0       	rjmp	.+26     	; 0x8d2 <__stack+0x73>
				}
			
				break;
				
			case SCREEN2 :
				Prev_Screen = SCREEN2 ;
 8b8:	01 2f       	mov	r16, r17
 8ba:	1b 2d       	mov	r17, r11
 8bc:	0a c0       	rjmp	.+20     	; 0x8d2 <__stack+0x73>
					Score ++ ;
				}
				
				break;
			case SCREEN3 :
				Prev_Screen = SCREEN3 ;
 8be:	01 2f       	mov	r16, r17
 8c0:	1b 2d       	mov	r17, r11
 8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <__stack+0x73>
					ScreenState = SCREEN_SAD;
				}
				
				break;
			case SCREEN4 :
				Prev_Screen = SCREEN4 ;
 8c4:	01 2f       	mov	r16, r17
 8c6:	1b 2d       	mov	r17, r11
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__stack+0x73>
					Score ++;
				}
				
				break;
			case SCREEN5 :
				Prev_Screen = SCREEN5 ;
 8ca:	01 2f       	mov	r16, r17
 8cc:	1b 2d       	mov	r17, r11
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__stack+0x73>
 8d0:	1b 2d       	mov	r17, r11
	LCD_Custom_Char(5,Custom6);
	LCD_Custom_Char(6,Custom7);
		
    while (1) 
    {
		switch (ScreenState)
 8d2:	81 2f       	mov	r24, r17
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	fc 01       	movw	r30, r24
 8d8:	89 30       	cpi	r24, 0x09	; 9
 8da:	91 05       	cpc	r25, r1
 8dc:	e0 f7       	brcc	.-8      	; 0x8d6 <__stack+0x77>
 8de:	e6 5d       	subi	r30, 0xD6	; 214
 8e0:	ff 4f       	sbci	r31, 0xFF	; 255
 8e2:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__tablejump2__>
		{
			case SCREEN0 :
				LCD_clear();
 8e6:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,5);
 8ea:	65 e0       	ldi	r22, 0x05	; 5
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(msg0);
 8f2:	ce 01       	movw	r24, r28
 8f4:	01 96       	adiw	r24, 0x01	; 1
 8f6:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				timer_delay(300);
 8fa:	6c e2       	ldi	r22, 0x2C	; 44
 8fc:	71 e0       	ldi	r23, 0x01	; 1
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
				LCD_clear();
 906:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,4);
 90a:	64 e0       	ldi	r22, 0x04	; 4
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(msg01);
 912:	ce 01       	movw	r24, r28
 914:	09 96       	adiw	r24, 0x09	; 9
 916:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				timer_delay(300);
 91a:	6c e2       	ldi	r22, 0x2C	; 44
 91c:	71 e0       	ldi	r23, 0x01	; 1
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
				LCD_clear();
 926:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,3);
 92a:	63 e0       	ldi	r22, 0x03	; 3
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(msg02);
 932:	ce 01       	movw	r24, r28
 934:	43 96       	adiw	r24, 0x13	; 19
 936:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				timer_delay(300);
 93a:	6c e2       	ldi	r22, 0x2C	; 44
 93c:	71 e0       	ldi	r23, 0x01	; 1
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
				LCD_clear();
 946:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,2);
 94a:	62 e0       	ldi	r22, 0x02	; 2
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(msg03);
 952:	ce 01       	movw	r24, r28
 954:	4f 96       	adiw	r24, 0x1f	; 31
 956:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				timer_delay(DELAY_1_SEC);
 95a:	64 ef       	ldi	r22, 0xF4	; 244
 95c:	71 e0       	ldi	r23, 0x01	; 1
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
				ScreenState = SCREEN1 ;
 966:	11 e0       	ldi	r17, 0x01	; 1
				break;
 968:	b4 cf       	rjmp	.-152    	; 0x8d2 <__stack+0x73>
			case SCREEN1 :
				Prev_Screen = SCREEN1 ;
				LCD_clear();
 96a:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,1);
 96e:	61 e0       	ldi	r22, 0x01	; 1
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ques1);
 976:	ce 01       	movw	r24, r28
 978:	8d 96       	adiw	r24, 0x2d	; 45
 97a:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				LCD_gotoRowColumn(2,1);
 97e:	61 e0       	ldi	r22, 0x01	; 1
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ans1);
 986:	ce 01       	movw	r24, r28
 988:	81 58       	subi	r24, 0x81	; 129
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
 990:	84 e1       	ldi	r24, 0x14	; 20
 992:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 996:	81 11       	cpse	r24, r1
 998:	05 c0       	rjmp	.+10     	; 0x9a4 <__stack+0x145>
 99a:	8a e0       	ldi	r24, 0x0A	; 10
 99c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 9a0:	88 23       	and	r24, r24
 9a2:	b1 f3       	breq	.-20     	; 0x990 <__stack+0x131>
				
				if(DIO_ReadPin(PUSHBTN0))
 9a4:	84 e1       	ldi	r24, 0x14	; 20
 9a6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 9aa:	88 23       	and	r24, r24
 9ac:	11 f0       	breq	.+4      	; 0x9b2 <__stack+0x153>
				{
					ScreenState = SCREEN_SAD;
 9ae:	bd 2c       	mov	r11, r13
 9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <__stack+0x155>
 9b2:	b1 2e       	mov	r11, r17
	
				}

				if(DIO_ReadPin(PUSHBTN1))
 9b4:	8a e0       	ldi	r24, 0x0A	; 10
 9b6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 9ba:	88 23       	and	r24, r24
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <__stack+0x161>
 9be:	79 cf       	rjmp	.-270    	; 0x8b2 <__stack+0x53>
				{
					ScreenState = SCREEN_SMILE;
					Score++;
 9c0:	f3 94       	inc	r15
				LCD_displayString(msg03);
				timer_delay(DELAY_1_SEC);
				ScreenState = SCREEN1 ;
				break;
			case SCREEN1 :
				Prev_Screen = SCREEN1 ;
 9c2:	01 2f       	mov	r16, r17
	
				}

				if(DIO_ReadPin(PUSHBTN1))
				{
					ScreenState = SCREEN_SMILE;
 9c4:	1e 2d       	mov	r17, r14
 9c6:	85 cf       	rjmp	.-246    	; 0x8d2 <__stack+0x73>
			
				break;
				
			case SCREEN2 :
				Prev_Screen = SCREEN2 ;
				LCD_clear();
 9c8:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,1);
 9cc:	61 e0       	ldi	r22, 0x01	; 1
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ques2);
 9d4:	ce 01       	movw	r24, r28
 9d6:	ce 96       	adiw	r24, 0x3e	; 62
 9d8:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				LCD_gotoRowColumn(2,1);
 9dc:	61 e0       	ldi	r22, 0x01	; 1
 9de:	82 e0       	ldi	r24, 0x02	; 2
 9e0:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ans1);
 9e4:	ce 01       	movw	r24, r28
 9e6:	81 58       	subi	r24, 0x81	; 129
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
 9ee:	84 e1       	ldi	r24, 0x14	; 20
 9f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 9f4:	81 11       	cpse	r24, r1
 9f6:	05 c0       	rjmp	.+10     	; 0xa02 <__stack+0x1a3>
 9f8:	8a e0       	ldi	r24, 0x0A	; 10
 9fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 9fe:	88 23       	and	r24, r24
 a00:	b1 f3       	breq	.-20     	; 0x9ee <__stack+0x18f>
				
				if(DIO_ReadPin(PUSHBTN0))
 a02:	84 e1       	ldi	r24, 0x14	; 20
 a04:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 a08:	88 23       	and	r24, r24
 a0a:	11 f0       	breq	.+4      	; 0xa10 <__stack+0x1b1>
				{
					ScreenState = SCREEN_SAD;
 a0c:	bd 2c       	mov	r11, r13
 a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__stack+0x1b3>
 a10:	b1 2e       	mov	r11, r17
				}
				
				if(DIO_ReadPin(PUSHBTN1))
 a12:	8a e0       	ldi	r24, 0x0A	; 10
 a14:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 a18:	88 23       	and	r24, r24
 a1a:	09 f4       	brne	.+2      	; 0xa1e <__stack+0x1bf>
 a1c:	4d cf       	rjmp	.-358    	; 0x8b8 <__stack+0x59>
				{
					ScreenState = SCREEN_SMILE;
					Score ++ ;
 a1e:	f3 94       	inc	r15
				}
			
				break;
				
			case SCREEN2 :
				Prev_Screen = SCREEN2 ;
 a20:	01 2f       	mov	r16, r17
					ScreenState = SCREEN_SAD;
				}
				
				if(DIO_ReadPin(PUSHBTN1))
				{
					ScreenState = SCREEN_SMILE;
 a22:	1e 2d       	mov	r17, r14
 a24:	56 cf       	rjmp	.-340    	; 0x8d2 <__stack+0x73>
				}
				
				break;
			case SCREEN3 :
				Prev_Screen = SCREEN3 ;
				LCD_clear();
 a26:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,1);
 a2a:	61 e0       	ldi	r22, 0x01	; 1
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ques3);
 a32:	ce 01       	movw	r24, r28
 a34:	81 5b       	subi	r24, 0xB1	; 177
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				LCD_gotoRowColumn(2,1);
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	82 e0       	ldi	r24, 0x02	; 2
 a40:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ans1);
 a44:	ce 01       	movw	r24, r28
 a46:	81 58       	subi	r24, 0x81	; 129
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
 a4e:	84 e1       	ldi	r24, 0x14	; 20
 a50:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 a54:	81 11       	cpse	r24, r1
 a56:	05 c0       	rjmp	.+10     	; 0xa62 <__stack+0x203>
 a58:	8a e0       	ldi	r24, 0x0A	; 10
 a5a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 a5e:	88 23       	and	r24, r24
 a60:	b1 f3       	breq	.-20     	; 0xa4e <__stack+0x1ef>
				
				if(DIO_ReadPin(PUSHBTN0))
 a62:	84 e1       	ldi	r24, 0x14	; 20
 a64:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 a68:	88 23       	and	r24, r24
 a6a:	19 f0       	breq	.+6      	; 0xa72 <__stack+0x213>
				{
					ScreenState = SCREEN_SMILE;
					Score++;
 a6c:	f3 94       	inc	r15
				LCD_displayString(Ans1);
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
				
				if(DIO_ReadPin(PUSHBTN0))
				{
					ScreenState = SCREEN_SMILE;
 a6e:	be 2c       	mov	r11, r14
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <__stack+0x215>
 a72:	b1 2e       	mov	r11, r17
					Score++;
				}
				
				if(DIO_ReadPin(PUSHBTN1))
 a74:	8a e0       	ldi	r24, 0x0A	; 10
 a76:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 a7a:	88 23       	and	r24, r24
 a7c:	09 f4       	brne	.+2      	; 0xa80 <__stack+0x221>
 a7e:	1f cf       	rjmp	.-450    	; 0x8be <__stack+0x5f>
					Score ++ ;
				}
				
				break;
			case SCREEN3 :
				Prev_Screen = SCREEN3 ;
 a80:	01 2f       	mov	r16, r17
					Score++;
				}
				
				if(DIO_ReadPin(PUSHBTN1))
				{
					ScreenState = SCREEN_SAD;
 a82:	1d 2d       	mov	r17, r13
 a84:	26 cf       	rjmp	.-436    	; 0x8d2 <__stack+0x73>
				
				break;
			case SCREEN4 :
				Prev_Screen = SCREEN4 ;
				//LCD_clear();
				LCD_gotoRowColumn(1,1);
 a86:	61 e0       	ldi	r22, 0x01	; 1
 a88:	81 e0       	ldi	r24, 0x01	; 1
 a8a:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ques4);
 a8e:	ce 01       	movw	r24, r28
 a90:	80 5a       	subi	r24, 0xA0	; 160
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				LCD_gotoRowColumn(2,1);
 a98:	61 e0       	ldi	r22, 0x01	; 1
 a9a:	82 e0       	ldi	r24, 0x02	; 2
 a9c:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ans1);
 aa0:	ce 01       	movw	r24, r28
 aa2:	81 58       	subi	r24, 0x81	; 129
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
 aaa:	84 e1       	ldi	r24, 0x14	; 20
 aac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 ab0:	81 11       	cpse	r24, r1
 ab2:	05 c0       	rjmp	.+10     	; 0xabe <__stack+0x25f>
 ab4:	8a e0       	ldi	r24, 0x0A	; 10
 ab6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 aba:	88 23       	and	r24, r24
 abc:	b1 f3       	breq	.-20     	; 0xaaa <__stack+0x24b>
			
				if(DIO_ReadPin(PUSHBTN0))
 abe:	84 e1       	ldi	r24, 0x14	; 20
 ac0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 ac4:	88 23       	and	r24, r24
 ac6:	11 f0       	breq	.+4      	; 0xacc <__stack+0x26d>
				{
					ScreenState = SCREEN_SAD;
 ac8:	bd 2c       	mov	r11, r13
 aca:	01 c0       	rjmp	.+2      	; 0xace <__stack+0x26f>
 acc:	b1 2e       	mov	r11, r17
				}
				
				if(DIO_ReadPin(PUSHBTN1))
 ace:	8a e0       	ldi	r24, 0x0A	; 10
 ad0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 ad4:	88 23       	and	r24, r24
 ad6:	09 f4       	brne	.+2      	; 0xada <__stack+0x27b>
 ad8:	f5 ce       	rjmp	.-534    	; 0x8c4 <__stack+0x65>
				{
					ScreenState = SCREEN_SMILE;
					Score ++;
 ada:	f3 94       	inc	r15
					ScreenState = SCREEN_SAD;
				}
				
				break;
			case SCREEN4 :
				Prev_Screen = SCREEN4 ;
 adc:	01 2f       	mov	r16, r17
					ScreenState = SCREEN_SAD;
				}
				
				if(DIO_ReadPin(PUSHBTN1))
				{
					ScreenState = SCREEN_SMILE;
 ade:	1e 2d       	mov	r17, r14
 ae0:	f8 ce       	rjmp	.-528    	; 0x8d2 <__stack+0x73>
				
				break;
			case SCREEN5 :
				Prev_Screen = SCREEN5 ;
				//LCD_clear();
				LCD_gotoRowColumn(1,1);
 ae2:	61 e0       	ldi	r22, 0x01	; 1
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ques5);
 aea:	ce 01       	movw	r24, r28
 aec:	81 59       	subi	r24, 0x91	; 145
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				LCD_gotoRowColumn(2,1);
 af4:	61 e0       	ldi	r22, 0x01	; 1
 af6:	82 e0       	ldi	r24, 0x02	; 2
 af8:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString(Ans1);
 afc:	ce 01       	movw	r24, r28
 afe:	81 58       	subi	r24, 0x81	; 129
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
 b06:	84 e1       	ldi	r24, 0x14	; 20
 b08:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 b0c:	81 11       	cpse	r24, r1
 b0e:	05 c0       	rjmp	.+10     	; 0xb1a <__stack+0x2bb>
 b10:	8a e0       	ldi	r24, 0x0A	; 10
 b12:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 b16:	88 23       	and	r24, r24
 b18:	b1 f3       	breq	.-20     	; 0xb06 <__stack+0x2a7>
			
				if(DIO_ReadPin(PUSHBTN0))
 b1a:	84 e1       	ldi	r24, 0x14	; 20
 b1c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 b20:	88 23       	and	r24, r24
 b22:	19 f0       	breq	.+6      	; 0xb2a <__stack+0x2cb>
				{
					ScreenState = SCREEN_SMILE;
					Score++;
 b24:	f3 94       	inc	r15
				LCD_displayString(Ans1);
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
			
				if(DIO_ReadPin(PUSHBTN0))
				{
					ScreenState = SCREEN_SMILE;
 b26:	be 2c       	mov	r11, r14
 b28:	01 c0       	rjmp	.+2      	; 0xb2c <__stack+0x2cd>
 b2a:	b1 2e       	mov	r11, r17
					Score++;
				}
				
				if(DIO_ReadPin(PUSHBTN1))
 b2c:	8a e0       	ldi	r24, 0x0A	; 10
 b2e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 b32:	88 23       	and	r24, r24
 b34:	09 f4       	brne	.+2      	; 0xb38 <__stack+0x2d9>
 b36:	c9 ce       	rjmp	.-622    	; 0x8ca <__stack+0x6b>
					Score ++;
				}
				
				break;
			case SCREEN5 :
				Prev_Screen = SCREEN5 ;
 b38:	01 2f       	mov	r16, r17
					Score++;
				}
				
				if(DIO_ReadPin(PUSHBTN1))
				{
					ScreenState = SCREEN_SAD;
 b3a:	1d 2d       	mov	r17, r13
 b3c:	ca ce       	rjmp	.-620    	; 0x8d2 <__stack+0x73>
				}
				
				break;
			case SCREEN_SMILE :
				LCD_clear();
 b3e:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,1);
 b42:	61 e0       	ldi	r22, 0x01	; 1
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_sendCommand(0x87);
 b4a:	87 e8       	ldi	r24, 0x87	; 135
 b4c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
				LCD_displayChar(0);
 b50:	8c 2d       	mov	r24, r12
 b52:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_displayChar(1);
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_displayChar(2);
 b5c:	82 e0       	ldi	r24, 0x02	; 2
 b5e:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_sendCommand(0xc7);
 b62:	87 ec       	ldi	r24, 0xC7	; 199
 b64:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
				timer_delay(2);
 b68:	62 e0       	ldi	r22, 0x02	; 2
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
				LCD_displayChar(3);
 b74:	83 e0       	ldi	r24, 0x03	; 3
 b76:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_displayChar(6);
 b7a:	86 e0       	ldi	r24, 0x06	; 6
 b7c:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_displayChar(5);
 b80:	85 e0       	ldi	r24, 0x05	; 5
 b82:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				timer_delay(2000);
 b86:	60 ed       	ldi	r22, 0xD0	; 208
 b88:	77 e0       	ldi	r23, 0x07	; 7
 b8a:	80 e0       	ldi	r24, 0x00	; 0
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
				LCD_clear();
 b92:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				
				ScreenState = ++Prev_Screen;
 b96:	0f 5f       	subi	r16, 0xFF	; 255
 b98:	10 2f       	mov	r17, r16
				break;
 b9a:	9b ce       	rjmp	.-714    	; 0x8d2 <__stack+0x73>
			case SCREEN_SAD :
				LCD_clear();
 b9c:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
				LCD_gotoRowColumn(1,1);
 ba0:	61 e0       	ldi	r22, 0x01	; 1
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_sendCommand(0x87);
 ba8:	87 e8       	ldi	r24, 0x87	; 135
 baa:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
				LCD_displayChar(0);
 bae:	8c 2d       	mov	r24, r12
 bb0:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_displayChar(1);
 bb4:	81 e0       	ldi	r24, 0x01	; 1
 bb6:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_displayChar(2);
 bba:	82 e0       	ldi	r24, 0x02	; 2
 bbc:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_sendCommand(0xc7);
 bc0:	87 ec       	ldi	r24, 0xC7	; 199
 bc2:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_sendCommand>
				timer_delay(2);
 bc6:	62 e0       	ldi	r22, 0x02	; 2
 bc8:	70 e0       	ldi	r23, 0x00	; 0
 bca:	80 e0       	ldi	r24, 0x00	; 0
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
				LCD_displayChar(3);
 bd2:	83 e0       	ldi	r24, 0x03	; 3
 bd4:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_displayChar(4);
 bd8:	84 e0       	ldi	r24, 0x04	; 4
 bda:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_displayChar(5);
 bde:	85 e0       	ldi	r24, 0x05	; 5
 be0:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				timer_delay(2000);
 be4:	60 ed       	ldi	r22, 0xD0	; 208
 be6:	77 e0       	ldi	r23, 0x07	; 7
 be8:	80 e0       	ldi	r24, 0x00	; 0
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 3e 06 	call	0xc7c	; 0xc7c <timer_delay>
				LCD_clear();
 bf0:	0e 94 44 03 	call	0x688	; 0x688 <LCD_clear>
	
				ScreenState = ++Prev_Screen;
 bf4:	0f 5f       	subi	r16, 0xFF	; 255
 bf6:	10 2f       	mov	r17, r16
				break;
 bf8:	6c ce       	rjmp	.-808    	; 0x8d2 <__stack+0x73>
			case SCREEN_SCORE :
				//LCD_clear();
				LCD_gotoRowColumn(1,1);
 bfa:	61 e0       	ldi	r22, 0x01	; 1
 bfc:	81 e0       	ldi	r24, 0x01	; 1
 bfe:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString("Your Score: ");
 c02:	88 e9       	ldi	r24, 0x98	; 152
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				LCD_displayChar(Score+48);
 c0a:	80 e3       	ldi	r24, 0x30	; 48
 c0c:	8f 0d       	add	r24, r15
 c0e:	0e 94 99 02 	call	0x532	; 0x532 <LCD_displayChar>
				LCD_gotoRowColumn(2,1);
 c12:	61 e0       	ldi	r22, 0x01	; 1
 c14:	82 e0       	ldi	r24, 0x02	; 2
 c16:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_gotoRowColumn>
				LCD_displayString("Again ?");
 c1a:	85 ea       	ldi	r24, 0xA5	; 165
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_displayString>
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
 c22:	84 e1       	ldi	r24, 0x14	; 20
 c24:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 c28:	81 11       	cpse	r24, r1
 c2a:	05 c0       	rjmp	.+10     	; 0xc36 <__stack+0x3d7>
 c2c:	8a e0       	ldi	r24, 0x0A	; 10
 c2e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 c32:	88 23       	and	r24, r24
 c34:	b1 f3       	breq	.-20     	; 0xc22 <__stack+0x3c3>
				
				if(DIO_ReadPin(PUSHBTN0))
 c36:	84 e1       	ldi	r24, 0x14	; 20
 c38:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 c3c:	88 23       	and	r24, r24
 c3e:	19 f0       	breq	.+6      	; 0xc46 <__stack+0x3e7>
				{
					ScreenState = SCREEN0;
					Score++;
 c40:	f3 94       	inc	r15
				LCD_displayString("Again ?");
				while(!DIO_ReadPin(PUSHBTN0) && !DIO_ReadPin(PUSHBTN1));
				
				if(DIO_ReadPin(PUSHBTN0))
				{
					ScreenState = SCREEN0;
 c42:	bc 2c       	mov	r11, r12
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <__stack+0x3e9>
 c46:	b1 2e       	mov	r11, r17
					Score++;
				}
				
				if(DIO_ReadPin(PUSHBTN1))
 c48:	8a e0       	ldi	r24, 0x0A	; 10
 c4a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_ReadPin>
 c4e:	88 23       	and	r24, r24
 c50:	09 f4       	brne	.+2      	; 0xc54 <__stack+0x3f5>
 c52:	3e ce       	rjmp	.-900    	; 0x8d0 <__stack+0x71>
 c54:	3e ce       	rjmp	.-900    	; 0x8d2 <__stack+0x73>

00000c56 <timer_init>:
 */ 
#include "../Includes/timer.h"
void timer_init()
{
	/* CTC Mode */
	Set_Bit(TCCR0,3);
 c56:	83 b7       	in	r24, 0x33	; 51
 c58:	88 60       	ori	r24, 0x08	; 8
 c5a:	83 bf       	out	0x33, r24	; 51
	Clear_Bit(TCCR0,6);
 c5c:	83 b7       	in	r24, 0x33	; 51
 c5e:	8f 7b       	andi	r24, 0xBF	; 191
 c60:	83 bf       	out	0x33, r24	; 51
	
	
	
	/* Clear TCNT0 & set OCR0 to 250 */
	TCNT0 = 0x00 ;
 c62:	12 be       	out	0x32, r1	; 50
	OCR0 = 250 ;
 c64:	8a ef       	ldi	r24, 0xFA	; 250
 c66:	8c bf       	out	0x3c, r24	; 60
	
	/* 64 Prescaler */
	Set_Bit(TCCR0,0);
 c68:	83 b7       	in	r24, 0x33	; 51
 c6a:	81 60       	ori	r24, 0x01	; 1
 c6c:	83 bf       	out	0x33, r24	; 51
	Set_Bit(TCCR0,1);
 c6e:	83 b7       	in	r24, 0x33	; 51
 c70:	82 60       	ori	r24, 0x02	; 2
 c72:	83 bf       	out	0x33, r24	; 51
	Clear_Bit(TCCR0,2);
 c74:	83 b7       	in	r24, 0x33	; 51
 c76:	8b 7f       	andi	r24, 0xFB	; 251
 c78:	83 bf       	out	0x33, r24	; 51
 c7a:	08 95       	ret

00000c7c <timer_delay>:
}

void timer_delay(uint32 n)
{
 c7c:	ab 01       	movw	r20, r22
 c7e:	bc 01       	movw	r22, r24
	
	/* Reset Over Flow flag*/
	Set_Bit(TIFR,0);
 c80:	88 b7       	in	r24, 0x38	; 56
 c82:	81 60       	ori	r24, 0x01	; 1
 c84:	88 bf       	out	0x38, r24	; 56
	/* Reset Timer count */
	TCNT0 = 0x00 ;
 c86:	12 be       	out	0x32, r1	; 50
	
	/* Each OF = 1ms */
	for(n ; n>0 ; n--)
 c88:	41 15       	cp	r20, r1
 c8a:	51 05       	cpc	r21, r1
 c8c:	61 05       	cpc	r22, r1
 c8e:	71 05       	cpc	r23, r1
 c90:	59 f0       	breq	.+22     	; 0xca8 <timer_delay+0x2c>
	{
		while(!(TIFR&0x02));
 c92:	08 b6       	in	r0, 0x38	; 56
 c94:	01 fe       	sbrs	r0, 1
 c96:	fd cf       	rjmp	.-6      	; 0xc92 <timer_delay+0x16>
		TIFR |= 0x02 ;
 c98:	88 b7       	in	r24, 0x38	; 56
 c9a:	82 60       	ori	r24, 0x02	; 2
 c9c:	88 bf       	out	0x38, r24	; 56
	Set_Bit(TIFR,0);
	/* Reset Timer count */
	TCNT0 = 0x00 ;
	
	/* Each OF = 1ms */
	for(n ; n>0 ; n--)
 c9e:	41 50       	subi	r20, 0x01	; 1
 ca0:	51 09       	sbc	r21, r1
 ca2:	61 09       	sbc	r22, r1
 ca4:	71 09       	sbc	r23, r1
 ca6:	a9 f7       	brne	.-22     	; 0xc92 <timer_delay+0x16>
 ca8:	08 95       	ret

00000caa <__tablejump2__>:
 caa:	ee 0f       	add	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	05 90       	lpm	r0, Z+
 cb0:	f4 91       	lpm	r31, Z
 cb2:	e0 2d       	mov	r30, r0
 cb4:	09 94       	ijmp

00000cb6 <_exit>:
 cb6:	f8 94       	cli

00000cb8 <__stop_program>:
 cb8:	ff cf       	rjmp	.-2      	; 0xcb8 <__stop_program>
